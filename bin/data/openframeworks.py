# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openframeworks', [dirname(__file__)])
        except ImportError:
            import _openframeworks
            return _openframeworks
        if fp is not None:
            try:
                _mod = imp.load_module('_openframeworks', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openframeworks = swig_import_helper()
    del swig_import_helper
else:
    import _openframeworks
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _openframeworks.SwigPyIterator_value(self)
    def incr(self, n=1): return _openframeworks.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _openframeworks.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _openframeworks.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _openframeworks.SwigPyIterator_equal(self, *args)
    def copy(self): return _openframeworks.SwigPyIterator_copy(self)
    def next(self): return _openframeworks.SwigPyIterator_next(self)
    def __next__(self): return _openframeworks.SwigPyIterator___next__(self)
    def previous(self): return _openframeworks.SwigPyIterator_previous(self)
    def advance(self, *args): return _openframeworks.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _openframeworks.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _openframeworks.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _openframeworks.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _openframeworks.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _openframeworks.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _openframeworks.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _openframeworks.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _openframeworks.IntVector___nonzero__(self)
    def __bool__(self): return _openframeworks.IntVector___bool__(self)
    def __len__(self): return _openframeworks.IntVector___len__(self)
    def pop(self): return _openframeworks.IntVector_pop(self)
    def __getslice__(self, *args): return _openframeworks.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _openframeworks.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _openframeworks.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _openframeworks.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _openframeworks.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _openframeworks.IntVector___setitem__(self, *args)
    def append(self, *args): return _openframeworks.IntVector_append(self, *args)
    def empty(self): return _openframeworks.IntVector_empty(self)
    def size(self): return _openframeworks.IntVector_size(self)
    def clear(self): return _openframeworks.IntVector_clear(self)
    def swap(self, *args): return _openframeworks.IntVector_swap(self, *args)
    def get_allocator(self): return _openframeworks.IntVector_get_allocator(self)
    def begin(self): return _openframeworks.IntVector_begin(self)
    def end(self): return _openframeworks.IntVector_end(self)
    def rbegin(self): return _openframeworks.IntVector_rbegin(self)
    def rend(self): return _openframeworks.IntVector_rend(self)
    def pop_back(self): return _openframeworks.IntVector_pop_back(self)
    def erase(self, *args): return _openframeworks.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _openframeworks.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _openframeworks.IntVector_push_back(self, *args)
    def front(self): return _openframeworks.IntVector_front(self)
    def back(self): return _openframeworks.IntVector_back(self)
    def assign(self, *args): return _openframeworks.IntVector_assign(self, *args)
    def resize(self, *args): return _openframeworks.IntVector_resize(self, *args)
    def insert(self, *args): return _openframeworks.IntVector_insert(self, *args)
    def reserve(self, *args): return _openframeworks.IntVector_reserve(self, *args)
    def capacity(self): return _openframeworks.IntVector_capacity(self)
    __swig_destroy__ = _openframeworks.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _openframeworks.IntVector_swigregister
IntVector_swigregister(IntVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _openframeworks.FloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _openframeworks.FloatVector___nonzero__(self)
    def __bool__(self): return _openframeworks.FloatVector___bool__(self)
    def __len__(self): return _openframeworks.FloatVector___len__(self)
    def pop(self): return _openframeworks.FloatVector_pop(self)
    def __getslice__(self, *args): return _openframeworks.FloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _openframeworks.FloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _openframeworks.FloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _openframeworks.FloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _openframeworks.FloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _openframeworks.FloatVector___setitem__(self, *args)
    def append(self, *args): return _openframeworks.FloatVector_append(self, *args)
    def empty(self): return _openframeworks.FloatVector_empty(self)
    def size(self): return _openframeworks.FloatVector_size(self)
    def clear(self): return _openframeworks.FloatVector_clear(self)
    def swap(self, *args): return _openframeworks.FloatVector_swap(self, *args)
    def get_allocator(self): return _openframeworks.FloatVector_get_allocator(self)
    def begin(self): return _openframeworks.FloatVector_begin(self)
    def end(self): return _openframeworks.FloatVector_end(self)
    def rbegin(self): return _openframeworks.FloatVector_rbegin(self)
    def rend(self): return _openframeworks.FloatVector_rend(self)
    def pop_back(self): return _openframeworks.FloatVector_pop_back(self)
    def erase(self, *args): return _openframeworks.FloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _openframeworks.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _openframeworks.FloatVector_push_back(self, *args)
    def front(self): return _openframeworks.FloatVector_front(self)
    def back(self): return _openframeworks.FloatVector_back(self)
    def assign(self, *args): return _openframeworks.FloatVector_assign(self, *args)
    def resize(self, *args): return _openframeworks.FloatVector_resize(self, *args)
    def insert(self, *args): return _openframeworks.FloatVector_insert(self, *args)
    def reserve(self, *args): return _openframeworks.FloatVector_reserve(self, *args)
    def capacity(self): return _openframeworks.FloatVector_capacity(self)
    __swig_destroy__ = _openframeworks.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _openframeworks.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _openframeworks.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _openframeworks.StringVector___nonzero__(self)
    def __bool__(self): return _openframeworks.StringVector___bool__(self)
    def __len__(self): return _openframeworks.StringVector___len__(self)
    def pop(self): return _openframeworks.StringVector_pop(self)
    def __getslice__(self, *args): return _openframeworks.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _openframeworks.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _openframeworks.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _openframeworks.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _openframeworks.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _openframeworks.StringVector___setitem__(self, *args)
    def append(self, *args): return _openframeworks.StringVector_append(self, *args)
    def empty(self): return _openframeworks.StringVector_empty(self)
    def size(self): return _openframeworks.StringVector_size(self)
    def clear(self): return _openframeworks.StringVector_clear(self)
    def swap(self, *args): return _openframeworks.StringVector_swap(self, *args)
    def get_allocator(self): return _openframeworks.StringVector_get_allocator(self)
    def begin(self): return _openframeworks.StringVector_begin(self)
    def end(self): return _openframeworks.StringVector_end(self)
    def rbegin(self): return _openframeworks.StringVector_rbegin(self)
    def rend(self): return _openframeworks.StringVector_rend(self)
    def pop_back(self): return _openframeworks.StringVector_pop_back(self)
    def erase(self, *args): return _openframeworks.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _openframeworks.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _openframeworks.StringVector_push_back(self, *args)
    def front(self): return _openframeworks.StringVector_front(self)
    def back(self): return _openframeworks.StringVector_back(self)
    def assign(self, *args): return _openframeworks.StringVector_assign(self, *args)
    def resize(self, *args): return _openframeworks.StringVector_resize(self, *args)
    def insert(self, *args): return _openframeworks.StringVector_insert(self, *args)
    def reserve(self, *args): return _openframeworks.StringVector_reserve(self, *args)
    def capacity(self): return _openframeworks.StringVector_capacity(self)
    __swig_destroy__ = _openframeworks.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _openframeworks.StringVector_swigregister
StringVector_swigregister(StringVector)

OF_VERSION_MAJOR = _openframeworks.OF_VERSION_MAJOR
OF_VERSION_MINOR = _openframeworks.OF_VERSION_MINOR
OF_VERSION_PATCH = _openframeworks.OF_VERSION_PATCH
OF_LOOP_NONE = _openframeworks.OF_LOOP_NONE
OF_LOOP_PALINDROME = _openframeworks.OF_LOOP_PALINDROME
OF_LOOP_NORMAL = _openframeworks.OF_LOOP_NORMAL
OF_TARGET_OSX = _openframeworks.OF_TARGET_OSX
OF_TARGET_WINGCC = _openframeworks.OF_TARGET_WINGCC
OF_TARGET_WINVS = _openframeworks.OF_TARGET_WINVS
OF_TARGET_IOS = _openframeworks.OF_TARGET_IOS
OF_TARGET_ANDROID = _openframeworks.OF_TARGET_ANDROID
OF_TARGET_LINUX = _openframeworks.OF_TARGET_LINUX
OF_TARGET_LINUX64 = _openframeworks.OF_TARGET_LINUX64
OF_TARGET_LINUXARMV6L = _openframeworks.OF_TARGET_LINUXARMV6L
OF_TARGET_LINUXARMV7L = _openframeworks.OF_TARGET_LINUXARMV7L
B14400 = _openframeworks.B14400
B28800 = _openframeworks.B28800
OF_SERIAL_NO_DATA = _openframeworks.OF_SERIAL_NO_DATA
OF_SERIAL_ERROR = _openframeworks.OF_SERIAL_ERROR
PI = _openframeworks.PI
TWO_PI = _openframeworks.TWO_PI
M_TWO_PI = _openframeworks.M_TWO_PI
FOUR_PI = _openframeworks.FOUR_PI
HALF_PI = _openframeworks.HALF_PI
DEG_TO_RAD = _openframeworks.DEG_TO_RAD
RAD_TO_DEG = _openframeworks.RAD_TO_DEG
OF_OUTLINE = _openframeworks.OF_OUTLINE
OF_FILLED = _openframeworks.OF_FILLED
OF_WINDOW = _openframeworks.OF_WINDOW
OF_FULLSCREEN = _openframeworks.OF_FULLSCREEN
OF_GAME_MODE = _openframeworks.OF_GAME_MODE
OF_ASPECT_RATIO_IGNORE = _openframeworks.OF_ASPECT_RATIO_IGNORE
OF_ASPECT_RATIO_KEEP = _openframeworks.OF_ASPECT_RATIO_KEEP
OF_ASPECT_RATIO_KEEP_BY_EXPANDING = _openframeworks.OF_ASPECT_RATIO_KEEP_BY_EXPANDING
OF_ALIGN_VERT_IGNORE = _openframeworks.OF_ALIGN_VERT_IGNORE
OF_ALIGN_VERT_TOP = _openframeworks.OF_ALIGN_VERT_TOP
OF_ALIGN_VERT_BOTTOM = _openframeworks.OF_ALIGN_VERT_BOTTOM
OF_ALIGN_VERT_CENTER = _openframeworks.OF_ALIGN_VERT_CENTER
OF_ALIGN_HORZ_IGNORE = _openframeworks.OF_ALIGN_HORZ_IGNORE
OF_ALIGN_HORZ_LEFT = _openframeworks.OF_ALIGN_HORZ_LEFT
OF_ALIGN_HORZ_RIGHT = _openframeworks.OF_ALIGN_HORZ_RIGHT
OF_ALIGN_HORZ_CENTER = _openframeworks.OF_ALIGN_HORZ_CENTER
OF_RECTMODE_CORNER = _openframeworks.OF_RECTMODE_CORNER
OF_RECTMODE_CENTER = _openframeworks.OF_RECTMODE_CENTER
OF_SCALEMODE_FIT = _openframeworks.OF_SCALEMODE_FIT
OF_SCALEMODE_FILL = _openframeworks.OF_SCALEMODE_FILL
OF_SCALEMODE_CENTER = _openframeworks.OF_SCALEMODE_CENTER
OF_SCALEMODE_STRETCH_TO_FILL = _openframeworks.OF_SCALEMODE_STRETCH_TO_FILL
OF_IMAGE_GRAYSCALE = _openframeworks.OF_IMAGE_GRAYSCALE
OF_IMAGE_COLOR = _openframeworks.OF_IMAGE_COLOR
OF_IMAGE_COLOR_ALPHA = _openframeworks.OF_IMAGE_COLOR_ALPHA
OF_IMAGE_UNDEFINED = _openframeworks.OF_IMAGE_UNDEFINED
OF_PIXELS_MONO = _openframeworks.OF_PIXELS_MONO
OF_PIXELS_RGB = _openframeworks.OF_PIXELS_RGB
OF_PIXELS_RGBA = _openframeworks.OF_PIXELS_RGBA
OF_PIXELS_BGRA = _openframeworks.OF_PIXELS_BGRA
OF_PIXELS_RGB565 = _openframeworks.OF_PIXELS_RGB565
OF_PIXELS_UNKNOWN = _openframeworks.OF_PIXELS_UNKNOWN
OF_MAX_STYLE_HISTORY = _openframeworks.OF_MAX_STYLE_HISTORY
OF_MAX_VIEWPORT_HISTORY = _openframeworks.OF_MAX_VIEWPORT_HISTORY
OF_MAX_CIRCLE_PTS = _openframeworks.OF_MAX_CIRCLE_PTS
OF_BLENDMODE_DISABLED = _openframeworks.OF_BLENDMODE_DISABLED
OF_BLENDMODE_ALPHA = _openframeworks.OF_BLENDMODE_ALPHA
OF_BLENDMODE_ADD = _openframeworks.OF_BLENDMODE_ADD
OF_BLENDMODE_SUBTRACT = _openframeworks.OF_BLENDMODE_SUBTRACT
OF_BLENDMODE_MULTIPLY = _openframeworks.OF_BLENDMODE_MULTIPLY
OF_BLENDMODE_SCREEN = _openframeworks.OF_BLENDMODE_SCREEN
OF_ORIENTATION_DEFAULT = _openframeworks.OF_ORIENTATION_DEFAULT
OF_ORIENTATION_180 = _openframeworks.OF_ORIENTATION_180
OF_ORIENTATION_90_LEFT = _openframeworks.OF_ORIENTATION_90_LEFT
OF_ORIENTATION_90_RIGHT = _openframeworks.OF_ORIENTATION_90_RIGHT
OF_ORIENTATION_UNKNOWN = _openframeworks.OF_ORIENTATION_UNKNOWN
OF_GRADIENT_LINEAR = _openframeworks.OF_GRADIENT_LINEAR
OF_GRADIENT_CIRCULAR = _openframeworks.OF_GRADIENT_CIRCULAR
OF_GRADIENT_BAR = _openframeworks.OF_GRADIENT_BAR
OF_POLY_WINDING_ODD = _openframeworks.OF_POLY_WINDING_ODD
OF_POLY_WINDING_NONZERO = _openframeworks.OF_POLY_WINDING_NONZERO
OF_POLY_WINDING_POSITIVE = _openframeworks.OF_POLY_WINDING_POSITIVE
OF_POLY_WINDING_NEGATIVE = _openframeworks.OF_POLY_WINDING_NEGATIVE
OF_POLY_WINDING_ABS_GEQ_TWO = _openframeworks.OF_POLY_WINDING_ABS_GEQ_TWO
OF_CLOSE = _openframeworks.OF_CLOSE
OF_LEFT_HANDED = _openframeworks.OF_LEFT_HANDED
OF_RIGHT_HANDED = _openframeworks.OF_RIGHT_HANDED
OF_MATRIX_MODELVIEW = _openframeworks.OF_MATRIX_MODELVIEW
OF_MATRIX_PROJECTION = _openframeworks.OF_MATRIX_PROJECTION
OF_MATRIX_TEXTURE = _openframeworks.OF_MATRIX_TEXTURE
OF_KEY_MODIFIER = _openframeworks.OF_KEY_MODIFIER
OF_KEY_RETURN = _openframeworks.OF_KEY_RETURN
OF_KEY_ESC = _openframeworks.OF_KEY_ESC
OF_KEY_TAB = _openframeworks.OF_KEY_TAB
OF_KEY_BACKSPACE = _openframeworks.OF_KEY_BACKSPACE
OF_KEY_DEL = _openframeworks.OF_KEY_DEL
OF_KEY_F1 = _openframeworks.OF_KEY_F1
OF_KEY_F2 = _openframeworks.OF_KEY_F2
OF_KEY_F3 = _openframeworks.OF_KEY_F3
OF_KEY_F4 = _openframeworks.OF_KEY_F4
OF_KEY_F5 = _openframeworks.OF_KEY_F5
OF_KEY_F6 = _openframeworks.OF_KEY_F6
OF_KEY_F7 = _openframeworks.OF_KEY_F7
OF_KEY_F8 = _openframeworks.OF_KEY_F8
OF_KEY_F9 = _openframeworks.OF_KEY_F9
OF_KEY_F10 = _openframeworks.OF_KEY_F10
OF_KEY_F11 = _openframeworks.OF_KEY_F11
OF_KEY_F12 = _openframeworks.OF_KEY_F12
OF_KEY_LEFT = _openframeworks.OF_KEY_LEFT
OF_KEY_UP = _openframeworks.OF_KEY_UP
OF_KEY_RIGHT = _openframeworks.OF_KEY_RIGHT
OF_KEY_DOWN = _openframeworks.OF_KEY_DOWN
OF_KEY_PAGE_UP = _openframeworks.OF_KEY_PAGE_UP
OF_KEY_PAGE_DOWN = _openframeworks.OF_KEY_PAGE_DOWN
OF_KEY_HOME = _openframeworks.OF_KEY_HOME
OF_KEY_END = _openframeworks.OF_KEY_END
OF_KEY_INSERT = _openframeworks.OF_KEY_INSERT
OF_KEY_CONTROL = _openframeworks.OF_KEY_CONTROL
OF_KEY_ALT = _openframeworks.OF_KEY_ALT
OF_KEY_SHIFT = _openframeworks.OF_KEY_SHIFT
OF_KEY_SUPER = _openframeworks.OF_KEY_SUPER
OF_KEY_LEFT_SHIFT = _openframeworks.OF_KEY_LEFT_SHIFT
OF_KEY_RIGHT_SHIFT = _openframeworks.OF_KEY_RIGHT_SHIFT
OF_KEY_LEFT_CONTROL = _openframeworks.OF_KEY_LEFT_CONTROL
OF_KEY_RIGHT_CONTROL = _openframeworks.OF_KEY_RIGHT_CONTROL
OF_KEY_LEFT_ALT = _openframeworks.OF_KEY_LEFT_ALT
OF_KEY_RIGHT_ALT = _openframeworks.OF_KEY_RIGHT_ALT
OF_KEY_LEFT_SUPER = _openframeworks.OF_KEY_LEFT_SUPER
OF_KEY_RIGHT_SUPER = _openframeworks.OF_KEY_RIGHT_SUPER
OF_KEY_LEFT_COMMAND = _openframeworks.OF_KEY_LEFT_COMMAND
OF_KEY_RIGHT_COMMAND = _openframeworks.OF_KEY_RIGHT_COMMAND
OF_MOUSE_BUTTON_1 = _openframeworks.OF_MOUSE_BUTTON_1
OF_MOUSE_BUTTON_2 = _openframeworks.OF_MOUSE_BUTTON_2
OF_MOUSE_BUTTON_3 = _openframeworks.OF_MOUSE_BUTTON_3
OF_MOUSE_BUTTON_4 = _openframeworks.OF_MOUSE_BUTTON_4
OF_MOUSE_BUTTON_5 = _openframeworks.OF_MOUSE_BUTTON_5
OF_MOUSE_BUTTON_6 = _openframeworks.OF_MOUSE_BUTTON_6
OF_MOUSE_BUTTON_7 = _openframeworks.OF_MOUSE_BUTTON_7
OF_MOUSE_BUTTON_8 = _openframeworks.OF_MOUSE_BUTTON_8
OF_MOUSE_BUTTON_LAST = _openframeworks.OF_MOUSE_BUTTON_LAST
OF_MOUSE_BUTTON_LEFT = _openframeworks.OF_MOUSE_BUTTON_LEFT
OF_MOUSE_BUTTON_MIDDLE = _openframeworks.OF_MOUSE_BUTTON_MIDDLE
OF_MOUSE_BUTTON_RIGHT = _openframeworks.OF_MOUSE_BUTTON_RIGHT
OF_CONSOLE_COLOR_RESTORE = _openframeworks.OF_CONSOLE_COLOR_RESTORE
OF_CONSOLE_COLOR_BLACK = _openframeworks.OF_CONSOLE_COLOR_BLACK
OF_CONSOLE_COLOR_RED = _openframeworks.OF_CONSOLE_COLOR_RED
OF_CONSOLE_COLOR_GREEN = _openframeworks.OF_CONSOLE_COLOR_GREEN
OF_CONSOLE_COLOR_YELLOW = _openframeworks.OF_CONSOLE_COLOR_YELLOW
OF_CONSOLE_COLOR_BLUE = _openframeworks.OF_CONSOLE_COLOR_BLUE
OF_CONSOLE_COLOR_PURPLE = _openframeworks.OF_CONSOLE_COLOR_PURPLE
OF_CONSOLE_COLOR_CYAN = _openframeworks.OF_CONSOLE_COLOR_CYAN
OF_CONSOLE_COLOR_WHITE = _openframeworks.OF_CONSOLE_COLOR_WHITE
OF_BITMAPMODE_SIMPLE = _openframeworks.OF_BITMAPMODE_SIMPLE
OF_BITMAPMODE_SCREEN = _openframeworks.OF_BITMAPMODE_SCREEN
OF_BITMAPMODE_VIEWPORT = _openframeworks.OF_BITMAPMODE_VIEWPORT
OF_BITMAPMODE_MODEL = _openframeworks.OF_BITMAPMODE_MODEL
OF_BITMAPMODE_MODEL_BILLBOARD = _openframeworks.OF_BITMAPMODE_MODEL_BILLBOARD
OF_ENCODING_UTF8 = _openframeworks.OF_ENCODING_UTF8
OF_ENCODING_ISO_8859_15 = _openframeworks.OF_ENCODING_ISO_8859_15
class ofFbo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFbo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFbo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofFbo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofFbo
    __del__ = lambda self : None;
    def allocate(self, *args): return _openframeworks.ofFbo_allocate(self, *args)
    def isAllocated(self): return _openframeworks.ofFbo_isAllocated(self)
    def draw(self, *args): return _openframeworks.ofFbo_draw(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofFbo_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofFbo_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofFbo_resetAnchor(self)
    def setDefaultTextureIndex(self, *args): return _openframeworks.ofFbo_setDefaultTextureIndex(self, *args)
    def getDefaultTextureIndex(self): return _openframeworks.ofFbo_getDefaultTextureIndex(self)
    def getTextureReference(self, *args): return _openframeworks.ofFbo_getTextureReference(self, *args)
    def getDepthTexture(self): return _openframeworks.ofFbo_getDepthTexture(self)
    def setUseTexture(self, *args): return _openframeworks.ofFbo_setUseTexture(self, *args)
    def begin(self, setupScreen=True): return _openframeworks.ofFbo_begin(self, setupScreen)
    def end(self): return _openframeworks.ofFbo_end(self)
    def readToPixels(self, *args): return _openframeworks.ofFbo_readToPixels(self, *args)
    def getWidth(self): return _openframeworks.ofFbo_getWidth(self)
    def getHeight(self): return _openframeworks.ofFbo_getHeight(self)
    def bind(self): return _openframeworks.ofFbo_bind(self)
    def unbind(self): return _openframeworks.ofFbo_unbind(self)
    def checkStatus(self): return _openframeworks.ofFbo_checkStatus(self)
    def createAndAttachTexture(self, *args): return _openframeworks.ofFbo_createAndAttachTexture(self, *args)
    def attachTexture(self, *args): return _openframeworks.ofFbo_attachTexture(self, *args)
    def createAndAttachRenderbuffer(self, *args): return _openframeworks.ofFbo_createAndAttachRenderbuffer(self, *args)
    def createAndAttachDepthStencilTexture(self, *args): return _openframeworks.ofFbo_createAndAttachDepthStencilTexture(self, *args)
    def getNumTextures(self): return _openframeworks.ofFbo_getNumTextures(self)
    def setActiveDrawBuffer(self, *args): return _openframeworks.ofFbo_setActiveDrawBuffer(self, *args)
    def setActiveDrawBuffers(self, *args): return _openframeworks.ofFbo_setActiveDrawBuffers(self, *args)
    def activateAllDrawBuffers(self): return _openframeworks.ofFbo_activateAllDrawBuffers(self)
    def getFbo(self): return _openframeworks.ofFbo_getFbo(self)
    __swig_getmethods__["checkGLSupport"] = lambda x: _openframeworks.ofFbo_checkGLSupport
    if _newclass:checkGLSupport = staticmethod(_openframeworks.ofFbo_checkGLSupport)
    __swig_getmethods__["maxColorAttachments"] = lambda x: _openframeworks.ofFbo_maxColorAttachments
    if _newclass:maxColorAttachments = staticmethod(_openframeworks.ofFbo_maxColorAttachments)
    __swig_getmethods__["maxDrawBuffers"] = lambda x: _openframeworks.ofFbo_maxDrawBuffers
    if _newclass:maxDrawBuffers = staticmethod(_openframeworks.ofFbo_maxDrawBuffers)
    __swig_getmethods__["maxSamples"] = lambda x: _openframeworks.ofFbo_maxSamples
    if _newclass:maxSamples = staticmethod(_openframeworks.ofFbo_maxSamples)
    def getDepthBuffer(self): return _openframeworks.ofFbo_getDepthBuffer(self)
    def getStencilBuffer(self): return _openframeworks.ofFbo_getStencilBuffer(self)
ofFbo_swigregister = _openframeworks.ofFbo_swigregister
ofFbo_swigregister(ofFbo)

def ofFbo_checkGLSupport():
  return _openframeworks.ofFbo_checkGLSupport()
ofFbo_checkGLSupport = _openframeworks.ofFbo_checkGLSupport

def ofFbo_maxColorAttachments():
  return _openframeworks.ofFbo_maxColorAttachments()
ofFbo_maxColorAttachments = _openframeworks.ofFbo_maxColorAttachments

def ofFbo_maxDrawBuffers():
  return _openframeworks.ofFbo_maxDrawBuffers()
ofFbo_maxDrawBuffers = _openframeworks.ofFbo_maxDrawBuffers

def ofFbo_maxSamples():
  return _openframeworks.ofFbo_maxSamples()
ofFbo_maxSamples = _openframeworks.ofFbo_maxSamples


def ofGetUsingArbTex():
  return _openframeworks.ofGetUsingArbTex()
ofGetUsingArbTex = _openframeworks.ofGetUsingArbTex

def ofEnableArbTex():
  return _openframeworks.ofEnableArbTex()
ofEnableArbTex = _openframeworks.ofEnableArbTex

def ofDisableArbTex():
  return _openframeworks.ofDisableArbTex()
ofDisableArbTex = _openframeworks.ofDisableArbTex

def ofGetUsingNormalizedTexCoords():
  return _openframeworks.ofGetUsingNormalizedTexCoords()
ofGetUsingNormalizedTexCoords = _openframeworks.ofGetUsingNormalizedTexCoords

def ofEnableNormalizedTexCoords():
  return _openframeworks.ofEnableNormalizedTexCoords()
ofEnableNormalizedTexCoords = _openframeworks.ofEnableNormalizedTexCoords

def ofDisableNormalizedTexCoords():
  return _openframeworks.ofDisableNormalizedTexCoords()
ofDisableNormalizedTexCoords = _openframeworks.ofDisableNormalizedTexCoords
OF_COMPRESS_NONE = _openframeworks.OF_COMPRESS_NONE
OF_COMPRESS_SRGB = _openframeworks.OF_COMPRESS_SRGB
OF_COMPRESS_ARB = _openframeworks.OF_COMPRESS_ARB
class ofTextureData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTextureData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofTextureData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofTextureData()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["textureID"] = _openframeworks.ofTextureData_textureID_set
    __swig_getmethods__["textureID"] = _openframeworks.ofTextureData_textureID_get
    if _newclass:textureID = _swig_property(_openframeworks.ofTextureData_textureID_get, _openframeworks.ofTextureData_textureID_set)
    __swig_setmethods__["textureTarget"] = _openframeworks.ofTextureData_textureTarget_set
    __swig_getmethods__["textureTarget"] = _openframeworks.ofTextureData_textureTarget_get
    if _newclass:textureTarget = _swig_property(_openframeworks.ofTextureData_textureTarget_get, _openframeworks.ofTextureData_textureTarget_set)
    __swig_setmethods__["glTypeInternal"] = _openframeworks.ofTextureData_glTypeInternal_set
    __swig_getmethods__["glTypeInternal"] = _openframeworks.ofTextureData_glTypeInternal_get
    if _newclass:glTypeInternal = _swig_property(_openframeworks.ofTextureData_glTypeInternal_get, _openframeworks.ofTextureData_glTypeInternal_set)
    __swig_setmethods__["tex_t"] = _openframeworks.ofTextureData_tex_t_set
    __swig_getmethods__["tex_t"] = _openframeworks.ofTextureData_tex_t_get
    if _newclass:tex_t = _swig_property(_openframeworks.ofTextureData_tex_t_get, _openframeworks.ofTextureData_tex_t_set)
    __swig_setmethods__["tex_u"] = _openframeworks.ofTextureData_tex_u_set
    __swig_getmethods__["tex_u"] = _openframeworks.ofTextureData_tex_u_get
    if _newclass:tex_u = _swig_property(_openframeworks.ofTextureData_tex_u_get, _openframeworks.ofTextureData_tex_u_set)
    __swig_setmethods__["tex_w"] = _openframeworks.ofTextureData_tex_w_set
    __swig_getmethods__["tex_w"] = _openframeworks.ofTextureData_tex_w_get
    if _newclass:tex_w = _swig_property(_openframeworks.ofTextureData_tex_w_get, _openframeworks.ofTextureData_tex_w_set)
    __swig_setmethods__["tex_h"] = _openframeworks.ofTextureData_tex_h_set
    __swig_getmethods__["tex_h"] = _openframeworks.ofTextureData_tex_h_get
    if _newclass:tex_h = _swig_property(_openframeworks.ofTextureData_tex_h_get, _openframeworks.ofTextureData_tex_h_set)
    __swig_setmethods__["width"] = _openframeworks.ofTextureData_width_set
    __swig_getmethods__["width"] = _openframeworks.ofTextureData_width_get
    if _newclass:width = _swig_property(_openframeworks.ofTextureData_width_get, _openframeworks.ofTextureData_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofTextureData_height_set
    __swig_getmethods__["height"] = _openframeworks.ofTextureData_height_get
    if _newclass:height = _swig_property(_openframeworks.ofTextureData_height_get, _openframeworks.ofTextureData_height_set)
    __swig_setmethods__["bFlipTexture"] = _openframeworks.ofTextureData_bFlipTexture_set
    __swig_getmethods__["bFlipTexture"] = _openframeworks.ofTextureData_bFlipTexture_get
    if _newclass:bFlipTexture = _swig_property(_openframeworks.ofTextureData_bFlipTexture_get, _openframeworks.ofTextureData_bFlipTexture_set)
    __swig_setmethods__["compressionType"] = _openframeworks.ofTextureData_compressionType_set
    __swig_getmethods__["compressionType"] = _openframeworks.ofTextureData_compressionType_get
    if _newclass:compressionType = _swig_property(_openframeworks.ofTextureData_compressionType_get, _openframeworks.ofTextureData_compressionType_set)
    __swig_setmethods__["bAllocated"] = _openframeworks.ofTextureData_bAllocated_set
    __swig_getmethods__["bAllocated"] = _openframeworks.ofTextureData_bAllocated_get
    if _newclass:bAllocated = _swig_property(_openframeworks.ofTextureData_bAllocated_get, _openframeworks.ofTextureData_bAllocated_set)
    __swig_setmethods__["bUseExternalTextureID"] = _openframeworks.ofTextureData_bUseExternalTextureID_set
    __swig_getmethods__["bUseExternalTextureID"] = _openframeworks.ofTextureData_bUseExternalTextureID_get
    if _newclass:bUseExternalTextureID = _swig_property(_openframeworks.ofTextureData_bUseExternalTextureID_get, _openframeworks.ofTextureData_bUseExternalTextureID_set)
    __swig_setmethods__["textureMatrix"] = _openframeworks.ofTextureData_textureMatrix_set
    __swig_getmethods__["textureMatrix"] = _openframeworks.ofTextureData_textureMatrix_get
    if _newclass:textureMatrix = _swig_property(_openframeworks.ofTextureData_textureMatrix_get, _openframeworks.ofTextureData_textureMatrix_set)
    __swig_setmethods__["useTextureMatrix"] = _openframeworks.ofTextureData_useTextureMatrix_set
    __swig_getmethods__["useTextureMatrix"] = _openframeworks.ofTextureData_useTextureMatrix_get
    if _newclass:useTextureMatrix = _swig_property(_openframeworks.ofTextureData_useTextureMatrix_get, _openframeworks.ofTextureData_useTextureMatrix_set)
    __swig_destroy__ = _openframeworks.delete_ofTextureData
    __del__ = lambda self : None;
ofTextureData_swigregister = _openframeworks.ofTextureData_swigregister
ofTextureData_swigregister(ofTextureData)


def ofEnableTextureEdgeHack():
  return _openframeworks.ofEnableTextureEdgeHack()
ofEnableTextureEdgeHack = _openframeworks.ofEnableTextureEdgeHack

def ofDisableTextureEdgeHack():
  return _openframeworks.ofDisableTextureEdgeHack()
ofDisableTextureEdgeHack = _openframeworks.ofDisableTextureEdgeHack

def ofIsTextureEdgeHackEnabled():
  return _openframeworks.ofIsTextureEdgeHackEnabled()
ofIsTextureEdgeHackEnabled = _openframeworks.ofIsTextureEdgeHackEnabled
class ofTexture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTexture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofTexture, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofTexture
    __del__ = lambda self : None;
    def allocate(self, *args): return _openframeworks.ofTexture_allocate(self, *args)
    def clear(self): return _openframeworks.ofTexture_clear(self)
    def setUseExternalTextureID(self, *args): return _openframeworks.ofTexture_setUseExternalTextureID(self, *args)
    def loadData(self, *args): return _openframeworks.ofTexture_loadData(self, *args)
    def setRGToRGBASwizzles(self, *args): return _openframeworks.ofTexture_setRGToRGBASwizzles(self, *args)
    def loadScreenData(self, *args): return _openframeworks.ofTexture_loadScreenData(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofTexture_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofTexture_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofTexture_resetAnchor(self)
    def draw(self, *args): return _openframeworks.ofTexture_draw(self, *args)
    def drawSubsection(self, *args): return _openframeworks.ofTexture_drawSubsection(self, *args)
    def readToPixels(self, *args): return _openframeworks.ofTexture_readToPixels(self, *args)
    def bind(self): return _openframeworks.ofTexture_bind(self)
    def unbind(self): return _openframeworks.ofTexture_unbind(self)
    def getCoordFromPoint(self, *args): return _openframeworks.ofTexture_getCoordFromPoint(self, *args)
    def getCoordFromPercent(self, *args): return _openframeworks.ofTexture_getCoordFromPercent(self, *args)
    def setTextureWrap(self, *args): return _openframeworks.ofTexture_setTextureWrap(self, *args)
    def setTextureMinMagFilter(self, *args): return _openframeworks.ofTexture_setTextureMinMagFilter(self, *args)
    def setCompression(self, *args): return _openframeworks.ofTexture_setCompression(self, *args)
    def bAllocated(self): return _openframeworks.ofTexture_bAllocated(self)
    def isAllocated(self): return _openframeworks.ofTexture_isAllocated(self)
    def getTextureData(self, *args): return _openframeworks.ofTexture_getTextureData(self, *args)
    __swig_setmethods__["texData"] = _openframeworks.ofTexture_texData_set
    __swig_getmethods__["texData"] = _openframeworks.ofTexture_texData_get
    if _newclass:texData = _swig_property(_openframeworks.ofTexture_texData_get, _openframeworks.ofTexture_texData_set)
    def getHeight(self): return _openframeworks.ofTexture_getHeight(self)
    def getWidth(self): return _openframeworks.ofTexture_getWidth(self)
ofTexture_swigregister = _openframeworks.ofTexture_swigregister
ofTexture_swigregister(ofTexture)

OF_IMAGE_QUALITY_BEST = _openframeworks.OF_IMAGE_QUALITY_BEST
OF_IMAGE_QUALITY_HIGH = _openframeworks.OF_IMAGE_QUALITY_HIGH
OF_IMAGE_QUALITY_MEDIUM = _openframeworks.OF_IMAGE_QUALITY_MEDIUM
OF_IMAGE_QUALITY_LOW = _openframeworks.OF_IMAGE_QUALITY_LOW
OF_IMAGE_QUALITY_WORST = _openframeworks.OF_IMAGE_QUALITY_WORST
OF_IMAGE_FORMAT_BMP = _openframeworks.OF_IMAGE_FORMAT_BMP
OF_IMAGE_FORMAT_ICO = _openframeworks.OF_IMAGE_FORMAT_ICO
OF_IMAGE_FORMAT_JPEG = _openframeworks.OF_IMAGE_FORMAT_JPEG
OF_IMAGE_FORMAT_JNG = _openframeworks.OF_IMAGE_FORMAT_JNG
OF_IMAGE_FORMAT_KOALA = _openframeworks.OF_IMAGE_FORMAT_KOALA
OF_IMAGE_FORMAT_LBM = _openframeworks.OF_IMAGE_FORMAT_LBM
OF_IMAGE_FORMAT_IFF = _openframeworks.OF_IMAGE_FORMAT_IFF
OF_IMAGE_FORMAT_MNG = _openframeworks.OF_IMAGE_FORMAT_MNG
OF_IMAGE_FORMAT_PBM = _openframeworks.OF_IMAGE_FORMAT_PBM
OF_IMAGE_FORMAT_PBMRAW = _openframeworks.OF_IMAGE_FORMAT_PBMRAW
OF_IMAGE_FORMAT_PCD = _openframeworks.OF_IMAGE_FORMAT_PCD
OF_IMAGE_FORMAT_PCX = _openframeworks.OF_IMAGE_FORMAT_PCX
OF_IMAGE_FORMAT_PGM = _openframeworks.OF_IMAGE_FORMAT_PGM
OF_IMAGE_FORMAT_PGMRAW = _openframeworks.OF_IMAGE_FORMAT_PGMRAW
OF_IMAGE_FORMAT_PNG = _openframeworks.OF_IMAGE_FORMAT_PNG
OF_IMAGE_FORMAT_PPM = _openframeworks.OF_IMAGE_FORMAT_PPM
OF_IMAGE_FORMAT_PPMRAW = _openframeworks.OF_IMAGE_FORMAT_PPMRAW
OF_IMAGE_FORMAT_RAS = _openframeworks.OF_IMAGE_FORMAT_RAS
OF_IMAGE_FORMAT_TARGA = _openframeworks.OF_IMAGE_FORMAT_TARGA
OF_IMAGE_FORMAT_TIFF = _openframeworks.OF_IMAGE_FORMAT_TIFF
OF_IMAGE_FORMAT_WBMP = _openframeworks.OF_IMAGE_FORMAT_WBMP
OF_IMAGE_FORMAT_PSD = _openframeworks.OF_IMAGE_FORMAT_PSD
OF_IMAGE_FORMAT_CUT = _openframeworks.OF_IMAGE_FORMAT_CUT
OF_IMAGE_FORMAT_XBM = _openframeworks.OF_IMAGE_FORMAT_XBM
OF_IMAGE_FORMAT_XPM = _openframeworks.OF_IMAGE_FORMAT_XPM
OF_IMAGE_FORMAT_DDS = _openframeworks.OF_IMAGE_FORMAT_DDS
OF_IMAGE_FORMAT_GIF = _openframeworks.OF_IMAGE_FORMAT_GIF
OF_IMAGE_FORMAT_HDR = _openframeworks.OF_IMAGE_FORMAT_HDR
OF_IMAGE_FORMAT_FAXG3 = _openframeworks.OF_IMAGE_FORMAT_FAXG3
OF_IMAGE_FORMAT_SGI = _openframeworks.OF_IMAGE_FORMAT_SGI
OF_IMAGE_FORMAT_EXR = _openframeworks.OF_IMAGE_FORMAT_EXR
OF_IMAGE_FORMAT_J2K = _openframeworks.OF_IMAGE_FORMAT_J2K
OF_IMAGE_FORMAT_JP2 = _openframeworks.OF_IMAGE_FORMAT_JP2
OF_IMAGE_FORMAT_PFM = _openframeworks.OF_IMAGE_FORMAT_PFM
OF_IMAGE_FORMAT_PICT = _openframeworks.OF_IMAGE_FORMAT_PICT
OF_IMAGE_FORMAT_RAW = _openframeworks.OF_IMAGE_FORMAT_RAW
class ofImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofImage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofImage
    __del__ = lambda self : None;
    def allocate(self, *args): return _openframeworks.ofImage_allocate(self, *args)
    def clear(self): return _openframeworks.ofImage_clear(self)
    def __init__(self, *args): 
        this = _openframeworks.new_ofImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def setUseTexture(self, *args): return _openframeworks.ofImage_setUseTexture(self, *args)
    def isUsingTexture(self): return _openframeworks.ofImage_isUsingTexture(self)
    def getTextureReference(self): return _openframeworks.ofImage_getTextureReference(self)
    def bind(self): return _openframeworks.ofImage_bind(self)
    def unbind(self): return _openframeworks.ofImage_unbind(self)
    def loadImage(self, *args): return _openframeworks.ofImage_loadImage(self, *args)
    def saveImage(self, *args): return _openframeworks.ofImage_saveImage(self, *args)
    def setCompression(self, *args): return _openframeworks.ofImage_setCompression(self, *args)
    def getPixels(self): return _openframeworks.ofImage_getPixels(self)
    def getPixelsRef(self): return _openframeworks.ofImage_getPixelsRef(self)
    def getColor(self, *args): return _openframeworks.ofImage_getColor(self, *args)
    def setColor(self, *args): return _openframeworks.ofImage_setColor(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofImage_setFromPixels(self, *args)
    def setImageType(self, *args): return _openframeworks.ofImage_setImageType(self, *args)
    def resize(self, *args): return _openframeworks.ofImage_resize(self, *args)
    def grabScreen(self, *args): return _openframeworks.ofImage_grabScreen(self, *args)
    def crop(self, *args): return _openframeworks.ofImage_crop(self, *args)
    def cropFrom(self, *args): return _openframeworks.ofImage_cropFrom(self, *args)
    def rotate90(self, *args): return _openframeworks.ofImage_rotate90(self, *args)
    def mirror(self, *args): return _openframeworks.ofImage_mirror(self, *args)
    def update(self): return _openframeworks.ofImage_update(self)
    def setAnchorPercent(self, *args): return _openframeworks.ofImage_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofImage_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofImage_resetAnchor(self)
    def draw(self, *args): return _openframeworks.ofImage_draw(self, *args)
    def drawSubsection(self, *args): return _openframeworks.ofImage_drawSubsection(self, *args)
    def getHeight(self): return _openframeworks.ofImage_getHeight(self)
    def getWidth(self): return _openframeworks.ofImage_getWidth(self)
    def bAllocated(self): return _openframeworks.ofImage_bAllocated(self)
    def isAllocated(self): return _openframeworks.ofImage_isAllocated(self)
    def reloadTexture(self): return _openframeworks.ofImage_reloadTexture(self)
    __swig_setmethods__["width"] = _openframeworks.ofImage_width_set
    __swig_getmethods__["width"] = _openframeworks.ofImage_width_get
    if _newclass:width = _swig_property(_openframeworks.ofImage_width_get, _openframeworks.ofImage_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofImage_height_set
    __swig_getmethods__["height"] = _openframeworks.ofImage_height_get
    if _newclass:height = _swig_property(_openframeworks.ofImage_height_get, _openframeworks.ofImage_height_set)
    __swig_setmethods__["bpp"] = _openframeworks.ofImage_bpp_set
    __swig_getmethods__["bpp"] = _openframeworks.ofImage_bpp_get
    if _newclass:bpp = _swig_property(_openframeworks.ofImage_bpp_get, _openframeworks.ofImage_bpp_set)
    __swig_setmethods__["type"] = _openframeworks.ofImage_type_set
    __swig_getmethods__["type"] = _openframeworks.ofImage_type_get
    if _newclass:type = _swig_property(_openframeworks.ofImage_type_get, _openframeworks.ofImage_type_set)
ofImage_swigregister = _openframeworks.ofImage_swigregister
ofImage_swigregister(ofImage)

class ofFloatImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFloatImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFloatImage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofFloatImage
    __del__ = lambda self : None;
    def allocate(self, *args): return _openframeworks.ofFloatImage_allocate(self, *args)
    def clear(self): return _openframeworks.ofFloatImage_clear(self)
    def __init__(self, *args): 
        this = _openframeworks.new_ofFloatImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def setUseTexture(self, *args): return _openframeworks.ofFloatImage_setUseTexture(self, *args)
    def isUsingTexture(self): return _openframeworks.ofFloatImage_isUsingTexture(self)
    def getTextureReference(self): return _openframeworks.ofFloatImage_getTextureReference(self)
    def bind(self): return _openframeworks.ofFloatImage_bind(self)
    def unbind(self): return _openframeworks.ofFloatImage_unbind(self)
    def loadImage(self, *args): return _openframeworks.ofFloatImage_loadImage(self, *args)
    def saveImage(self, *args): return _openframeworks.ofFloatImage_saveImage(self, *args)
    def setCompression(self, *args): return _openframeworks.ofFloatImage_setCompression(self, *args)
    def getPixels(self): return _openframeworks.ofFloatImage_getPixels(self)
    def getPixelsRef(self): return _openframeworks.ofFloatImage_getPixelsRef(self)
    def getColor(self, *args): return _openframeworks.ofFloatImage_getColor(self, *args)
    def setColor(self, *args): return _openframeworks.ofFloatImage_setColor(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofFloatImage_setFromPixels(self, *args)
    def setImageType(self, *args): return _openframeworks.ofFloatImage_setImageType(self, *args)
    def resize(self, *args): return _openframeworks.ofFloatImage_resize(self, *args)
    def grabScreen(self, *args): return _openframeworks.ofFloatImage_grabScreen(self, *args)
    def crop(self, *args): return _openframeworks.ofFloatImage_crop(self, *args)
    def cropFrom(self, *args): return _openframeworks.ofFloatImage_cropFrom(self, *args)
    def rotate90(self, *args): return _openframeworks.ofFloatImage_rotate90(self, *args)
    def mirror(self, *args): return _openframeworks.ofFloatImage_mirror(self, *args)
    def update(self): return _openframeworks.ofFloatImage_update(self)
    def setAnchorPercent(self, *args): return _openframeworks.ofFloatImage_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofFloatImage_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofFloatImage_resetAnchor(self)
    def draw(self, *args): return _openframeworks.ofFloatImage_draw(self, *args)
    def drawSubsection(self, *args): return _openframeworks.ofFloatImage_drawSubsection(self, *args)
    def getHeight(self): return _openframeworks.ofFloatImage_getHeight(self)
    def getWidth(self): return _openframeworks.ofFloatImage_getWidth(self)
    def bAllocated(self): return _openframeworks.ofFloatImage_bAllocated(self)
    def isAllocated(self): return _openframeworks.ofFloatImage_isAllocated(self)
    def reloadTexture(self): return _openframeworks.ofFloatImage_reloadTexture(self)
    __swig_setmethods__["width"] = _openframeworks.ofFloatImage_width_set
    __swig_getmethods__["width"] = _openframeworks.ofFloatImage_width_get
    if _newclass:width = _swig_property(_openframeworks.ofFloatImage_width_get, _openframeworks.ofFloatImage_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofFloatImage_height_set
    __swig_getmethods__["height"] = _openframeworks.ofFloatImage_height_get
    if _newclass:height = _swig_property(_openframeworks.ofFloatImage_height_get, _openframeworks.ofFloatImage_height_set)
    __swig_setmethods__["bpp"] = _openframeworks.ofFloatImage_bpp_set
    __swig_getmethods__["bpp"] = _openframeworks.ofFloatImage_bpp_get
    if _newclass:bpp = _swig_property(_openframeworks.ofFloatImage_bpp_get, _openframeworks.ofFloatImage_bpp_set)
    __swig_setmethods__["type"] = _openframeworks.ofFloatImage_type_set
    __swig_getmethods__["type"] = _openframeworks.ofFloatImage_type_get
    if _newclass:type = _swig_property(_openframeworks.ofFloatImage_type_get, _openframeworks.ofFloatImage_type_set)
ofFloatImage_swigregister = _openframeworks.ofFloatImage_swigregister
ofFloatImage_swigregister(ofFloatImage)

class ofShortImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofShortImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofShortImage, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofShortImage
    __del__ = lambda self : None;
    def allocate(self, *args): return _openframeworks.ofShortImage_allocate(self, *args)
    def clear(self): return _openframeworks.ofShortImage_clear(self)
    def __init__(self, *args): 
        this = _openframeworks.new_ofShortImage(*args)
        try: self.this.append(this)
        except: self.this = this
    def setUseTexture(self, *args): return _openframeworks.ofShortImage_setUseTexture(self, *args)
    def isUsingTexture(self): return _openframeworks.ofShortImage_isUsingTexture(self)
    def getTextureReference(self): return _openframeworks.ofShortImage_getTextureReference(self)
    def bind(self): return _openframeworks.ofShortImage_bind(self)
    def unbind(self): return _openframeworks.ofShortImage_unbind(self)
    def loadImage(self, *args): return _openframeworks.ofShortImage_loadImage(self, *args)
    def saveImage(self, *args): return _openframeworks.ofShortImage_saveImage(self, *args)
    def setCompression(self, *args): return _openframeworks.ofShortImage_setCompression(self, *args)
    def getPixels(self): return _openframeworks.ofShortImage_getPixels(self)
    def getPixelsRef(self): return _openframeworks.ofShortImage_getPixelsRef(self)
    def getColor(self, *args): return _openframeworks.ofShortImage_getColor(self, *args)
    def setColor(self, *args): return _openframeworks.ofShortImage_setColor(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofShortImage_setFromPixels(self, *args)
    def setImageType(self, *args): return _openframeworks.ofShortImage_setImageType(self, *args)
    def resize(self, *args): return _openframeworks.ofShortImage_resize(self, *args)
    def grabScreen(self, *args): return _openframeworks.ofShortImage_grabScreen(self, *args)
    def crop(self, *args): return _openframeworks.ofShortImage_crop(self, *args)
    def cropFrom(self, *args): return _openframeworks.ofShortImage_cropFrom(self, *args)
    def rotate90(self, *args): return _openframeworks.ofShortImage_rotate90(self, *args)
    def mirror(self, *args): return _openframeworks.ofShortImage_mirror(self, *args)
    def update(self): return _openframeworks.ofShortImage_update(self)
    def setAnchorPercent(self, *args): return _openframeworks.ofShortImage_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofShortImage_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofShortImage_resetAnchor(self)
    def draw(self, *args): return _openframeworks.ofShortImage_draw(self, *args)
    def drawSubsection(self, *args): return _openframeworks.ofShortImage_drawSubsection(self, *args)
    def getHeight(self): return _openframeworks.ofShortImage_getHeight(self)
    def getWidth(self): return _openframeworks.ofShortImage_getWidth(self)
    def bAllocated(self): return _openframeworks.ofShortImage_bAllocated(self)
    def isAllocated(self): return _openframeworks.ofShortImage_isAllocated(self)
    def reloadTexture(self): return _openframeworks.ofShortImage_reloadTexture(self)
    __swig_setmethods__["width"] = _openframeworks.ofShortImage_width_set
    __swig_getmethods__["width"] = _openframeworks.ofShortImage_width_get
    if _newclass:width = _swig_property(_openframeworks.ofShortImage_width_get, _openframeworks.ofShortImage_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofShortImage_height_set
    __swig_getmethods__["height"] = _openframeworks.ofShortImage_height_get
    if _newclass:height = _swig_property(_openframeworks.ofShortImage_height_get, _openframeworks.ofShortImage_height_set)
    __swig_setmethods__["bpp"] = _openframeworks.ofShortImage_bpp_set
    __swig_getmethods__["bpp"] = _openframeworks.ofShortImage_bpp_get
    if _newclass:bpp = _swig_property(_openframeworks.ofShortImage_bpp_get, _openframeworks.ofShortImage_bpp_set)
    __swig_setmethods__["type"] = _openframeworks.ofShortImage_type_set
    __swig_getmethods__["type"] = _openframeworks.ofShortImage_type_get
    if _newclass:type = _swig_property(_openframeworks.ofShortImage_type_get, _openframeworks.ofShortImage_type_set)
ofShortImage_swigregister = _openframeworks.ofShortImage_swigregister
ofShortImage_swigregister(ofShortImage)


def ofSoundStreamSetup(*args):
  return _openframeworks.ofSoundStreamSetup(*args)
ofSoundStreamSetup = _openframeworks.ofSoundStreamSetup

def ofSoundStreamStop():
  return _openframeworks.ofSoundStreamStop()
ofSoundStreamStop = _openframeworks.ofSoundStreamStop

def ofSoundStreamStart():
  return _openframeworks.ofSoundStreamStart()
ofSoundStreamStart = _openframeworks.ofSoundStreamStart

def ofSoundStreamClose():
  return _openframeworks.ofSoundStreamClose()
ofSoundStreamClose = _openframeworks.ofSoundStreamClose

def ofSoundStreamListDevices():
  return _openframeworks.ofSoundStreamListDevices()
ofSoundStreamListDevices = _openframeworks.ofSoundStreamListDevices
class ofSoundStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSoundStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSoundStream, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofSoundStream()
        try: self.this.append(this)
        except: self.this = this
    def setSoundStream(self, *args): return _openframeworks.ofSoundStream_setSoundStream(self, *args)
    def getSoundStream(self): return _openframeworks.ofSoundStream_getSoundStream(self)
    def listDevices(self): return _openframeworks.ofSoundStream_listDevices(self)
    def setDeviceID(self, *args): return _openframeworks.ofSoundStream_setDeviceID(self, *args)
    def setup(self, *args): return _openframeworks.ofSoundStream_setup(self, *args)
    def setInput(self, *args): return _openframeworks.ofSoundStream_setInput(self, *args)
    def setOutput(self, *args): return _openframeworks.ofSoundStream_setOutput(self, *args)
    def start(self): return _openframeworks.ofSoundStream_start(self)
    def stop(self): return _openframeworks.ofSoundStream_stop(self)
    def close(self): return _openframeworks.ofSoundStream_close(self)
    def getTickCount(self): return _openframeworks.ofSoundStream_getTickCount(self)
    def getNumInputChannels(self): return _openframeworks.ofSoundStream_getNumInputChannels(self)
    def getNumOutputChannels(self): return _openframeworks.ofSoundStream_getNumOutputChannels(self)
    def getSampleRate(self): return _openframeworks.ofSoundStream_getSampleRate(self)
    def getBufferSize(self): return _openframeworks.ofSoundStream_getBufferSize(self)
    __swig_destroy__ = _openframeworks.delete_ofSoundStream
    __del__ = lambda self : None;
ofSoundStream_swigregister = _openframeworks.ofSoundStream_swigregister
ofSoundStream_swigregister(ofSoundStream)

class ofSoundPlayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSoundPlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSoundPlayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofSoundPlayer()
        try: self.this.append(this)
        except: self.this = this
    def setPlayer(self, *args): return _openframeworks.ofSoundPlayer_setPlayer(self, *args)
    def getPlayer(self): return _openframeworks.ofSoundPlayer_getPlayer(self)
    def loadSound(self, *args): return _openframeworks.ofSoundPlayer_loadSound(self, *args)
    def unloadSound(self): return _openframeworks.ofSoundPlayer_unloadSound(self)
    def play(self): return _openframeworks.ofSoundPlayer_play(self)
    def stop(self): return _openframeworks.ofSoundPlayer_stop(self)
    def setVolume(self, *args): return _openframeworks.ofSoundPlayer_setVolume(self, *args)
    def setPan(self, *args): return _openframeworks.ofSoundPlayer_setPan(self, *args)
    def setSpeed(self, *args): return _openframeworks.ofSoundPlayer_setSpeed(self, *args)
    def setPaused(self, *args): return _openframeworks.ofSoundPlayer_setPaused(self, *args)
    def setLoop(self, *args): return _openframeworks.ofSoundPlayer_setLoop(self, *args)
    def setMultiPlay(self, *args): return _openframeworks.ofSoundPlayer_setMultiPlay(self, *args)
    def setPosition(self, *args): return _openframeworks.ofSoundPlayer_setPosition(self, *args)
    def setPositionMS(self, *args): return _openframeworks.ofSoundPlayer_setPositionMS(self, *args)
    def getPositionMS(self): return _openframeworks.ofSoundPlayer_getPositionMS(self)
    def getPosition(self): return _openframeworks.ofSoundPlayer_getPosition(self)
    def getIsPlaying(self): return _openframeworks.ofSoundPlayer_getIsPlaying(self)
    def getSpeed(self): return _openframeworks.ofSoundPlayer_getSpeed(self)
    def getPan(self): return _openframeworks.ofSoundPlayer_getPan(self)
    def getVolume(self): return _openframeworks.ofSoundPlayer_getVolume(self)
    def isLoaded(self): return _openframeworks.ofSoundPlayer_isLoaded(self)
    __swig_destroy__ = _openframeworks.delete_ofSoundPlayer
    __del__ = lambda self : None;
ofSoundPlayer_swigregister = _openframeworks.ofSoundPlayer_swigregister
ofSoundPlayer_swigregister(ofSoundPlayer)

class ofColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofColor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofColor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _openframeworks.new_ofColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["fromHsb"] = lambda x: _openframeworks.ofColor_fromHsb
    if _newclass:fromHsb = staticmethod(_openframeworks.ofColor_fromHsb)
    __swig_getmethods__["fromHex"] = lambda x: _openframeworks.ofColor_fromHex
    if _newclass:fromHex = staticmethod(_openframeworks.ofColor_fromHex)
    def set(self, *args): return _openframeworks.ofColor_set(self, *args)
    def setHex(self, *args): return _openframeworks.ofColor_setHex(self, *args)
    def getHex(self): return _openframeworks.ofColor_getHex(self)
    def clamp(self): return _openframeworks.ofColor_clamp(self)
    def invert(self): return _openframeworks.ofColor_invert(self)
    def normalize(self): return _openframeworks.ofColor_normalize(self)
    def lerp(self, *args): return _openframeworks.ofColor_lerp(self, *args)
    def getClamped(self): return _openframeworks.ofColor_getClamped(self)
    def getInverted(self): return _openframeworks.ofColor_getInverted(self)
    def getNormalized(self): return _openframeworks.ofColor_getNormalized(self)
    def getLerped(self, *args): return _openframeworks.ofColor_getLerped(self, *args)
    def getHue(self): return _openframeworks.ofColor_getHue(self)
    def getHueAngle(self): return _openframeworks.ofColor_getHueAngle(self)
    def getSaturation(self): return _openframeworks.ofColor_getSaturation(self)
    def getBrightness(self): return _openframeworks.ofColor_getBrightness(self)
    def getLightness(self): return _openframeworks.ofColor_getLightness(self)
    def getHsb(self, *args): return _openframeworks.ofColor_getHsb(self, *args)
    def setHue(self, *args): return _openframeworks.ofColor_setHue(self, *args)
    def setHueAngle(self, *args): return _openframeworks.ofColor_setHueAngle(self, *args)
    def setSaturation(self, *args): return _openframeworks.ofColor_setSaturation(self, *args)
    def setBrightness(self, *args): return _openframeworks.ofColor_setBrightness(self, *args)
    def setHsb(self, *args): return _openframeworks.ofColor_setHsb(self, *args)
    def __eq__(self, *args): return _openframeworks.ofColor___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofColor___ne__(self, *args)
    def __add__(self, *args): return _openframeworks.ofColor___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofColor___iadd__(self, *args)
    def __sub__(self, *args): return _openframeworks.ofColor___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofColor___isub__(self, *args)
    def __mul__(self, *args): return _openframeworks.ofColor___mul__(self, *args)
    def __imul__(self, *args): return _openframeworks.ofColor___imul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofColor___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofColor___idiv__(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofColor___getitem__(self, *args)
    __swig_getmethods__["limit"] = lambda x: _openframeworks.ofColor_limit
    if _newclass:limit = staticmethod(_openframeworks.ofColor_limit)
    def getR(self): return _openframeworks.ofColor_getR(self)
    def getG(self): return _openframeworks.ofColor_getG(self)
    def getB(self): return _openframeworks.ofColor_getB(self)
    def getA(self): return _openframeworks.ofColor_getA(self)
    def setR(self, *args): return _openframeworks.ofColor_setR(self, *args)
    def setG(self, *args): return _openframeworks.ofColor_setG(self, *args)
    def setB(self, *args): return _openframeworks.ofColor_setB(self, *args)
    def setA(self, *args): return _openframeworks.ofColor_setA(self, *args)
    def __str__(self): return _openframeworks.ofColor___str__(self)
ofColor_swigregister = _openframeworks.ofColor_swigregister
ofColor_swigregister(ofColor)

def ofColor_fromHsb(*args):
  return _openframeworks.ofColor_fromHsb(*args)
ofColor_fromHsb = _openframeworks.ofColor_fromHsb

def ofColor_fromHex(*args):
  return _openframeworks.ofColor_fromHex(*args)
ofColor_fromHex = _openframeworks.ofColor_fromHex
cvar = _openframeworks.cvar
ofColor.white = _openframeworks.cvar.ofColor_white
ofColor.gray = _openframeworks.cvar.ofColor_gray
ofColor.black = _openframeworks.cvar.ofColor_black
ofColor.red = _openframeworks.cvar.ofColor_red
ofColor.green = _openframeworks.cvar.ofColor_green
ofColor.blue = _openframeworks.cvar.ofColor_blue
ofColor.cyan = _openframeworks.cvar.ofColor_cyan
ofColor.magenta = _openframeworks.cvar.ofColor_magenta
ofColor.yellow = _openframeworks.cvar.ofColor_yellow
ofColor.aliceBlue = _openframeworks.cvar.ofColor_aliceBlue
ofColor.antiqueWhite = _openframeworks.cvar.ofColor_antiqueWhite
ofColor.aqua = _openframeworks.cvar.ofColor_aqua
ofColor.aquamarine = _openframeworks.cvar.ofColor_aquamarine
ofColor.azure = _openframeworks.cvar.ofColor_azure
ofColor.beige = _openframeworks.cvar.ofColor_beige
ofColor.bisque = _openframeworks.cvar.ofColor_bisque
ofColor.blanchedAlmond = _openframeworks.cvar.ofColor_blanchedAlmond
ofColor.blueViolet = _openframeworks.cvar.ofColor_blueViolet
ofColor.brown = _openframeworks.cvar.ofColor_brown
ofColor.burlyWood = _openframeworks.cvar.ofColor_burlyWood
ofColor.cadetBlue = _openframeworks.cvar.ofColor_cadetBlue
ofColor.chartreuse = _openframeworks.cvar.ofColor_chartreuse
ofColor.chocolate = _openframeworks.cvar.ofColor_chocolate
ofColor.coral = _openframeworks.cvar.ofColor_coral
ofColor.cornflowerBlue = _openframeworks.cvar.ofColor_cornflowerBlue
ofColor.cornsilk = _openframeworks.cvar.ofColor_cornsilk
ofColor.crimson = _openframeworks.cvar.ofColor_crimson
ofColor.darkBlue = _openframeworks.cvar.ofColor_darkBlue
ofColor.darkCyan = _openframeworks.cvar.ofColor_darkCyan
ofColor.darkGoldenRod = _openframeworks.cvar.ofColor_darkGoldenRod
ofColor.darkGray = _openframeworks.cvar.ofColor_darkGray
ofColor.darkGrey = _openframeworks.cvar.ofColor_darkGrey
ofColor.darkGreen = _openframeworks.cvar.ofColor_darkGreen
ofColor.darkKhaki = _openframeworks.cvar.ofColor_darkKhaki
ofColor.darkMagenta = _openframeworks.cvar.ofColor_darkMagenta
ofColor.darkOliveGreen = _openframeworks.cvar.ofColor_darkOliveGreen
ofColor.darkorange = _openframeworks.cvar.ofColor_darkorange
ofColor.darkOrchid = _openframeworks.cvar.ofColor_darkOrchid
ofColor.darkRed = _openframeworks.cvar.ofColor_darkRed
ofColor.darkSalmon = _openframeworks.cvar.ofColor_darkSalmon
ofColor.darkSeaGreen = _openframeworks.cvar.ofColor_darkSeaGreen
ofColor.darkSlateBlue = _openframeworks.cvar.ofColor_darkSlateBlue
ofColor.darkSlateGray = _openframeworks.cvar.ofColor_darkSlateGray
ofColor.darkSlateGrey = _openframeworks.cvar.ofColor_darkSlateGrey
ofColor.darkTurquoise = _openframeworks.cvar.ofColor_darkTurquoise
ofColor.darkViolet = _openframeworks.cvar.ofColor_darkViolet
ofColor.deepPink = _openframeworks.cvar.ofColor_deepPink
ofColor.deepSkyBlue = _openframeworks.cvar.ofColor_deepSkyBlue
ofColor.dimGray = _openframeworks.cvar.ofColor_dimGray
ofColor.dimGrey = _openframeworks.cvar.ofColor_dimGrey
ofColor.dodgerBlue = _openframeworks.cvar.ofColor_dodgerBlue
ofColor.fireBrick = _openframeworks.cvar.ofColor_fireBrick
ofColor.floralWhite = _openframeworks.cvar.ofColor_floralWhite
ofColor.forestGreen = _openframeworks.cvar.ofColor_forestGreen
ofColor.fuchsia = _openframeworks.cvar.ofColor_fuchsia
ofColor.gainsboro = _openframeworks.cvar.ofColor_gainsboro
ofColor.ghostWhite = _openframeworks.cvar.ofColor_ghostWhite
ofColor.gold = _openframeworks.cvar.ofColor_gold
ofColor.goldenRod = _openframeworks.cvar.ofColor_goldenRod
ofColor.grey = _openframeworks.cvar.ofColor_grey
ofColor.greenYellow = _openframeworks.cvar.ofColor_greenYellow
ofColor.honeyDew = _openframeworks.cvar.ofColor_honeyDew
ofColor.hotPink = _openframeworks.cvar.ofColor_hotPink
ofColor.indianRed = _openframeworks.cvar.ofColor_indianRed
ofColor.indigo = _openframeworks.cvar.ofColor_indigo
ofColor.ivory = _openframeworks.cvar.ofColor_ivory
ofColor.khaki = _openframeworks.cvar.ofColor_khaki
ofColor.lavender = _openframeworks.cvar.ofColor_lavender
ofColor.lavenderBlush = _openframeworks.cvar.ofColor_lavenderBlush
ofColor.lawnGreen = _openframeworks.cvar.ofColor_lawnGreen
ofColor.lemonChiffon = _openframeworks.cvar.ofColor_lemonChiffon
ofColor.lightBlue = _openframeworks.cvar.ofColor_lightBlue
ofColor.lightCoral = _openframeworks.cvar.ofColor_lightCoral
ofColor.lightCyan = _openframeworks.cvar.ofColor_lightCyan
ofColor.lightGoldenRodYellow = _openframeworks.cvar.ofColor_lightGoldenRodYellow
ofColor.lightGray = _openframeworks.cvar.ofColor_lightGray
ofColor.lightGrey = _openframeworks.cvar.ofColor_lightGrey
ofColor.lightGreen = _openframeworks.cvar.ofColor_lightGreen
ofColor.lightPink = _openframeworks.cvar.ofColor_lightPink
ofColor.lightSalmon = _openframeworks.cvar.ofColor_lightSalmon
ofColor.lightSeaGreen = _openframeworks.cvar.ofColor_lightSeaGreen
ofColor.lightSkyBlue = _openframeworks.cvar.ofColor_lightSkyBlue
ofColor.lightSlateGray = _openframeworks.cvar.ofColor_lightSlateGray
ofColor.lightSlateGrey = _openframeworks.cvar.ofColor_lightSlateGrey
ofColor.lightSteelBlue = _openframeworks.cvar.ofColor_lightSteelBlue
ofColor.lightYellow = _openframeworks.cvar.ofColor_lightYellow
ofColor.lime = _openframeworks.cvar.ofColor_lime
ofColor.limeGreen = _openframeworks.cvar.ofColor_limeGreen
ofColor.linen = _openframeworks.cvar.ofColor_linen
ofColor.maroon = _openframeworks.cvar.ofColor_maroon
ofColor.mediumAquaMarine = _openframeworks.cvar.ofColor_mediumAquaMarine
ofColor.mediumBlue = _openframeworks.cvar.ofColor_mediumBlue
ofColor.mediumOrchid = _openframeworks.cvar.ofColor_mediumOrchid
ofColor.mediumPurple = _openframeworks.cvar.ofColor_mediumPurple
ofColor.mediumSeaGreen = _openframeworks.cvar.ofColor_mediumSeaGreen
ofColor.mediumSlateBlue = _openframeworks.cvar.ofColor_mediumSlateBlue
ofColor.mediumSpringGreen = _openframeworks.cvar.ofColor_mediumSpringGreen
ofColor.mediumTurquoise = _openframeworks.cvar.ofColor_mediumTurquoise
ofColor.mediumVioletRed = _openframeworks.cvar.ofColor_mediumVioletRed
ofColor.midnightBlue = _openframeworks.cvar.ofColor_midnightBlue
ofColor.mintCream = _openframeworks.cvar.ofColor_mintCream
ofColor.mistyRose = _openframeworks.cvar.ofColor_mistyRose
ofColor.moccasin = _openframeworks.cvar.ofColor_moccasin
ofColor.navajoWhite = _openframeworks.cvar.ofColor_navajoWhite
ofColor.navy = _openframeworks.cvar.ofColor_navy
ofColor.oldLace = _openframeworks.cvar.ofColor_oldLace
ofColor.olive = _openframeworks.cvar.ofColor_olive
ofColor.oliveDrab = _openframeworks.cvar.ofColor_oliveDrab
ofColor.orange = _openframeworks.cvar.ofColor_orange
ofColor.orangeRed = _openframeworks.cvar.ofColor_orangeRed
ofColor.orchid = _openframeworks.cvar.ofColor_orchid
ofColor.paleGoldenRod = _openframeworks.cvar.ofColor_paleGoldenRod
ofColor.paleGreen = _openframeworks.cvar.ofColor_paleGreen
ofColor.paleTurquoise = _openframeworks.cvar.ofColor_paleTurquoise
ofColor.paleVioletRed = _openframeworks.cvar.ofColor_paleVioletRed
ofColor.papayaWhip = _openframeworks.cvar.ofColor_papayaWhip
ofColor.peachPuff = _openframeworks.cvar.ofColor_peachPuff
ofColor.peru = _openframeworks.cvar.ofColor_peru
ofColor.pink = _openframeworks.cvar.ofColor_pink
ofColor.plum = _openframeworks.cvar.ofColor_plum
ofColor.powderBlue = _openframeworks.cvar.ofColor_powderBlue
ofColor.purple = _openframeworks.cvar.ofColor_purple
ofColor.rosyBrown = _openframeworks.cvar.ofColor_rosyBrown
ofColor.royalBlue = _openframeworks.cvar.ofColor_royalBlue
ofColor.saddleBrown = _openframeworks.cvar.ofColor_saddleBrown
ofColor.salmon = _openframeworks.cvar.ofColor_salmon
ofColor.sandyBrown = _openframeworks.cvar.ofColor_sandyBrown
ofColor.seaGreen = _openframeworks.cvar.ofColor_seaGreen
ofColor.seaShell = _openframeworks.cvar.ofColor_seaShell
ofColor.sienna = _openframeworks.cvar.ofColor_sienna
ofColor.silver = _openframeworks.cvar.ofColor_silver
ofColor.skyBlue = _openframeworks.cvar.ofColor_skyBlue
ofColor.slateBlue = _openframeworks.cvar.ofColor_slateBlue
ofColor.slateGray = _openframeworks.cvar.ofColor_slateGray
ofColor.slateGrey = _openframeworks.cvar.ofColor_slateGrey
ofColor.snow = _openframeworks.cvar.ofColor_snow
ofColor.springGreen = _openframeworks.cvar.ofColor_springGreen
ofColor.steelBlue = _openframeworks.cvar.ofColor_steelBlue
ofColor.blueSteel = _openframeworks.cvar.ofColor_blueSteel
ofColor.tan = _openframeworks.cvar.ofColor_tan
ofColor.teal = _openframeworks.cvar.ofColor_teal
ofColor.thistle = _openframeworks.cvar.ofColor_thistle
ofColor.tomato = _openframeworks.cvar.ofColor_tomato
ofColor.turquoise = _openframeworks.cvar.ofColor_turquoise
ofColor.violet = _openframeworks.cvar.ofColor_violet
ofColor.wheat = _openframeworks.cvar.ofColor_wheat
ofColor.whiteSmoke = _openframeworks.cvar.ofColor_whiteSmoke
ofColor.yellowGreen = _openframeworks.cvar.ofColor_yellowGreen

def ofColor_limit():
  return _openframeworks.ofColor_limit()
ofColor_limit = _openframeworks.ofColor_limit

class ofFloatColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFloatColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFloatColor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofFloatColor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _openframeworks.new_ofFloatColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["fromHsb"] = lambda x: _openframeworks.ofFloatColor_fromHsb
    if _newclass:fromHsb = staticmethod(_openframeworks.ofFloatColor_fromHsb)
    __swig_getmethods__["fromHex"] = lambda x: _openframeworks.ofFloatColor_fromHex
    if _newclass:fromHex = staticmethod(_openframeworks.ofFloatColor_fromHex)
    def set(self, *args): return _openframeworks.ofFloatColor_set(self, *args)
    def setHex(self, *args): return _openframeworks.ofFloatColor_setHex(self, *args)
    def getHex(self): return _openframeworks.ofFloatColor_getHex(self)
    def clamp(self): return _openframeworks.ofFloatColor_clamp(self)
    def invert(self): return _openframeworks.ofFloatColor_invert(self)
    def normalize(self): return _openframeworks.ofFloatColor_normalize(self)
    def lerp(self, *args): return _openframeworks.ofFloatColor_lerp(self, *args)
    def getClamped(self): return _openframeworks.ofFloatColor_getClamped(self)
    def getInverted(self): return _openframeworks.ofFloatColor_getInverted(self)
    def getNormalized(self): return _openframeworks.ofFloatColor_getNormalized(self)
    def getLerped(self, *args): return _openframeworks.ofFloatColor_getLerped(self, *args)
    def getHue(self): return _openframeworks.ofFloatColor_getHue(self)
    def getHueAngle(self): return _openframeworks.ofFloatColor_getHueAngle(self)
    def getSaturation(self): return _openframeworks.ofFloatColor_getSaturation(self)
    def getBrightness(self): return _openframeworks.ofFloatColor_getBrightness(self)
    def getLightness(self): return _openframeworks.ofFloatColor_getLightness(self)
    def getHsb(self, *args): return _openframeworks.ofFloatColor_getHsb(self, *args)
    def setHue(self, *args): return _openframeworks.ofFloatColor_setHue(self, *args)
    def setHueAngle(self, *args): return _openframeworks.ofFloatColor_setHueAngle(self, *args)
    def setSaturation(self, *args): return _openframeworks.ofFloatColor_setSaturation(self, *args)
    def setBrightness(self, *args): return _openframeworks.ofFloatColor_setBrightness(self, *args)
    def setHsb(self, *args): return _openframeworks.ofFloatColor_setHsb(self, *args)
    def __eq__(self, *args): return _openframeworks.ofFloatColor___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofFloatColor___ne__(self, *args)
    def __add__(self, *args): return _openframeworks.ofFloatColor___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofFloatColor___iadd__(self, *args)
    def __sub__(self, *args): return _openframeworks.ofFloatColor___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofFloatColor___isub__(self, *args)
    def __mul__(self, *args): return _openframeworks.ofFloatColor___mul__(self, *args)
    def __imul__(self, *args): return _openframeworks.ofFloatColor___imul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofFloatColor___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofFloatColor___idiv__(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofFloatColor___getitem__(self, *args)
    __swig_getmethods__["limit"] = lambda x: _openframeworks.ofFloatColor_limit
    if _newclass:limit = staticmethod(_openframeworks.ofFloatColor_limit)
    def getR(self): return _openframeworks.ofFloatColor_getR(self)
    def getG(self): return _openframeworks.ofFloatColor_getG(self)
    def getB(self): return _openframeworks.ofFloatColor_getB(self)
    def getA(self): return _openframeworks.ofFloatColor_getA(self)
    def setR(self, *args): return _openframeworks.ofFloatColor_setR(self, *args)
    def setG(self, *args): return _openframeworks.ofFloatColor_setG(self, *args)
    def setB(self, *args): return _openframeworks.ofFloatColor_setB(self, *args)
    def setA(self, *args): return _openframeworks.ofFloatColor_setA(self, *args)
    def __str__(self): return _openframeworks.ofFloatColor___str__(self)
ofFloatColor_swigregister = _openframeworks.ofFloatColor_swigregister
ofFloatColor_swigregister(ofFloatColor)

def ofFloatColor_fromHsb(*args):
  return _openframeworks.ofFloatColor_fromHsb(*args)
ofFloatColor_fromHsb = _openframeworks.ofFloatColor_fromHsb

def ofFloatColor_fromHex(*args):
  return _openframeworks.ofFloatColor_fromHex(*args)
ofFloatColor_fromHex = _openframeworks.ofFloatColor_fromHex
ofFloatColor.white = _openframeworks.cvar.ofFloatColor_white
ofFloatColor.gray = _openframeworks.cvar.ofFloatColor_gray
ofFloatColor.black = _openframeworks.cvar.ofFloatColor_black
ofFloatColor.red = _openframeworks.cvar.ofFloatColor_red
ofFloatColor.green = _openframeworks.cvar.ofFloatColor_green
ofFloatColor.blue = _openframeworks.cvar.ofFloatColor_blue
ofFloatColor.cyan = _openframeworks.cvar.ofFloatColor_cyan
ofFloatColor.magenta = _openframeworks.cvar.ofFloatColor_magenta
ofFloatColor.yellow = _openframeworks.cvar.ofFloatColor_yellow
ofFloatColor.aliceBlue = _openframeworks.cvar.ofFloatColor_aliceBlue
ofFloatColor.antiqueWhite = _openframeworks.cvar.ofFloatColor_antiqueWhite
ofFloatColor.aqua = _openframeworks.cvar.ofFloatColor_aqua
ofFloatColor.aquamarine = _openframeworks.cvar.ofFloatColor_aquamarine
ofFloatColor.azure = _openframeworks.cvar.ofFloatColor_azure
ofFloatColor.beige = _openframeworks.cvar.ofFloatColor_beige
ofFloatColor.bisque = _openframeworks.cvar.ofFloatColor_bisque
ofFloatColor.blanchedAlmond = _openframeworks.cvar.ofFloatColor_blanchedAlmond
ofFloatColor.blueViolet = _openframeworks.cvar.ofFloatColor_blueViolet
ofFloatColor.brown = _openframeworks.cvar.ofFloatColor_brown
ofFloatColor.burlyWood = _openframeworks.cvar.ofFloatColor_burlyWood
ofFloatColor.cadetBlue = _openframeworks.cvar.ofFloatColor_cadetBlue
ofFloatColor.chartreuse = _openframeworks.cvar.ofFloatColor_chartreuse
ofFloatColor.chocolate = _openframeworks.cvar.ofFloatColor_chocolate
ofFloatColor.coral = _openframeworks.cvar.ofFloatColor_coral
ofFloatColor.cornflowerBlue = _openframeworks.cvar.ofFloatColor_cornflowerBlue
ofFloatColor.cornsilk = _openframeworks.cvar.ofFloatColor_cornsilk
ofFloatColor.crimson = _openframeworks.cvar.ofFloatColor_crimson
ofFloatColor.darkBlue = _openframeworks.cvar.ofFloatColor_darkBlue
ofFloatColor.darkCyan = _openframeworks.cvar.ofFloatColor_darkCyan
ofFloatColor.darkGoldenRod = _openframeworks.cvar.ofFloatColor_darkGoldenRod
ofFloatColor.darkGray = _openframeworks.cvar.ofFloatColor_darkGray
ofFloatColor.darkGrey = _openframeworks.cvar.ofFloatColor_darkGrey
ofFloatColor.darkGreen = _openframeworks.cvar.ofFloatColor_darkGreen
ofFloatColor.darkKhaki = _openframeworks.cvar.ofFloatColor_darkKhaki
ofFloatColor.darkMagenta = _openframeworks.cvar.ofFloatColor_darkMagenta
ofFloatColor.darkOliveGreen = _openframeworks.cvar.ofFloatColor_darkOliveGreen
ofFloatColor.darkorange = _openframeworks.cvar.ofFloatColor_darkorange
ofFloatColor.darkOrchid = _openframeworks.cvar.ofFloatColor_darkOrchid
ofFloatColor.darkRed = _openframeworks.cvar.ofFloatColor_darkRed
ofFloatColor.darkSalmon = _openframeworks.cvar.ofFloatColor_darkSalmon
ofFloatColor.darkSeaGreen = _openframeworks.cvar.ofFloatColor_darkSeaGreen
ofFloatColor.darkSlateBlue = _openframeworks.cvar.ofFloatColor_darkSlateBlue
ofFloatColor.darkSlateGray = _openframeworks.cvar.ofFloatColor_darkSlateGray
ofFloatColor.darkSlateGrey = _openframeworks.cvar.ofFloatColor_darkSlateGrey
ofFloatColor.darkTurquoise = _openframeworks.cvar.ofFloatColor_darkTurquoise
ofFloatColor.darkViolet = _openframeworks.cvar.ofFloatColor_darkViolet
ofFloatColor.deepPink = _openframeworks.cvar.ofFloatColor_deepPink
ofFloatColor.deepSkyBlue = _openframeworks.cvar.ofFloatColor_deepSkyBlue
ofFloatColor.dimGray = _openframeworks.cvar.ofFloatColor_dimGray
ofFloatColor.dimGrey = _openframeworks.cvar.ofFloatColor_dimGrey
ofFloatColor.dodgerBlue = _openframeworks.cvar.ofFloatColor_dodgerBlue
ofFloatColor.fireBrick = _openframeworks.cvar.ofFloatColor_fireBrick
ofFloatColor.floralWhite = _openframeworks.cvar.ofFloatColor_floralWhite
ofFloatColor.forestGreen = _openframeworks.cvar.ofFloatColor_forestGreen
ofFloatColor.fuchsia = _openframeworks.cvar.ofFloatColor_fuchsia
ofFloatColor.gainsboro = _openframeworks.cvar.ofFloatColor_gainsboro
ofFloatColor.ghostWhite = _openframeworks.cvar.ofFloatColor_ghostWhite
ofFloatColor.gold = _openframeworks.cvar.ofFloatColor_gold
ofFloatColor.goldenRod = _openframeworks.cvar.ofFloatColor_goldenRod
ofFloatColor.grey = _openframeworks.cvar.ofFloatColor_grey
ofFloatColor.greenYellow = _openframeworks.cvar.ofFloatColor_greenYellow
ofFloatColor.honeyDew = _openframeworks.cvar.ofFloatColor_honeyDew
ofFloatColor.hotPink = _openframeworks.cvar.ofFloatColor_hotPink
ofFloatColor.indianRed = _openframeworks.cvar.ofFloatColor_indianRed
ofFloatColor.indigo = _openframeworks.cvar.ofFloatColor_indigo
ofFloatColor.ivory = _openframeworks.cvar.ofFloatColor_ivory
ofFloatColor.khaki = _openframeworks.cvar.ofFloatColor_khaki
ofFloatColor.lavender = _openframeworks.cvar.ofFloatColor_lavender
ofFloatColor.lavenderBlush = _openframeworks.cvar.ofFloatColor_lavenderBlush
ofFloatColor.lawnGreen = _openframeworks.cvar.ofFloatColor_lawnGreen
ofFloatColor.lemonChiffon = _openframeworks.cvar.ofFloatColor_lemonChiffon
ofFloatColor.lightBlue = _openframeworks.cvar.ofFloatColor_lightBlue
ofFloatColor.lightCoral = _openframeworks.cvar.ofFloatColor_lightCoral
ofFloatColor.lightCyan = _openframeworks.cvar.ofFloatColor_lightCyan
ofFloatColor.lightGoldenRodYellow = _openframeworks.cvar.ofFloatColor_lightGoldenRodYellow
ofFloatColor.lightGray = _openframeworks.cvar.ofFloatColor_lightGray
ofFloatColor.lightGrey = _openframeworks.cvar.ofFloatColor_lightGrey
ofFloatColor.lightGreen = _openframeworks.cvar.ofFloatColor_lightGreen
ofFloatColor.lightPink = _openframeworks.cvar.ofFloatColor_lightPink
ofFloatColor.lightSalmon = _openframeworks.cvar.ofFloatColor_lightSalmon
ofFloatColor.lightSeaGreen = _openframeworks.cvar.ofFloatColor_lightSeaGreen
ofFloatColor.lightSkyBlue = _openframeworks.cvar.ofFloatColor_lightSkyBlue
ofFloatColor.lightSlateGray = _openframeworks.cvar.ofFloatColor_lightSlateGray
ofFloatColor.lightSlateGrey = _openframeworks.cvar.ofFloatColor_lightSlateGrey
ofFloatColor.lightSteelBlue = _openframeworks.cvar.ofFloatColor_lightSteelBlue
ofFloatColor.lightYellow = _openframeworks.cvar.ofFloatColor_lightYellow
ofFloatColor.lime = _openframeworks.cvar.ofFloatColor_lime
ofFloatColor.limeGreen = _openframeworks.cvar.ofFloatColor_limeGreen
ofFloatColor.linen = _openframeworks.cvar.ofFloatColor_linen
ofFloatColor.maroon = _openframeworks.cvar.ofFloatColor_maroon
ofFloatColor.mediumAquaMarine = _openframeworks.cvar.ofFloatColor_mediumAquaMarine
ofFloatColor.mediumBlue = _openframeworks.cvar.ofFloatColor_mediumBlue
ofFloatColor.mediumOrchid = _openframeworks.cvar.ofFloatColor_mediumOrchid
ofFloatColor.mediumPurple = _openframeworks.cvar.ofFloatColor_mediumPurple
ofFloatColor.mediumSeaGreen = _openframeworks.cvar.ofFloatColor_mediumSeaGreen
ofFloatColor.mediumSlateBlue = _openframeworks.cvar.ofFloatColor_mediumSlateBlue
ofFloatColor.mediumSpringGreen = _openframeworks.cvar.ofFloatColor_mediumSpringGreen
ofFloatColor.mediumTurquoise = _openframeworks.cvar.ofFloatColor_mediumTurquoise
ofFloatColor.mediumVioletRed = _openframeworks.cvar.ofFloatColor_mediumVioletRed
ofFloatColor.midnightBlue = _openframeworks.cvar.ofFloatColor_midnightBlue
ofFloatColor.mintCream = _openframeworks.cvar.ofFloatColor_mintCream
ofFloatColor.mistyRose = _openframeworks.cvar.ofFloatColor_mistyRose
ofFloatColor.moccasin = _openframeworks.cvar.ofFloatColor_moccasin
ofFloatColor.navajoWhite = _openframeworks.cvar.ofFloatColor_navajoWhite
ofFloatColor.navy = _openframeworks.cvar.ofFloatColor_navy
ofFloatColor.oldLace = _openframeworks.cvar.ofFloatColor_oldLace
ofFloatColor.olive = _openframeworks.cvar.ofFloatColor_olive
ofFloatColor.oliveDrab = _openframeworks.cvar.ofFloatColor_oliveDrab
ofFloatColor.orange = _openframeworks.cvar.ofFloatColor_orange
ofFloatColor.orangeRed = _openframeworks.cvar.ofFloatColor_orangeRed
ofFloatColor.orchid = _openframeworks.cvar.ofFloatColor_orchid
ofFloatColor.paleGoldenRod = _openframeworks.cvar.ofFloatColor_paleGoldenRod
ofFloatColor.paleGreen = _openframeworks.cvar.ofFloatColor_paleGreen
ofFloatColor.paleTurquoise = _openframeworks.cvar.ofFloatColor_paleTurquoise
ofFloatColor.paleVioletRed = _openframeworks.cvar.ofFloatColor_paleVioletRed
ofFloatColor.papayaWhip = _openframeworks.cvar.ofFloatColor_papayaWhip
ofFloatColor.peachPuff = _openframeworks.cvar.ofFloatColor_peachPuff
ofFloatColor.peru = _openframeworks.cvar.ofFloatColor_peru
ofFloatColor.pink = _openframeworks.cvar.ofFloatColor_pink
ofFloatColor.plum = _openframeworks.cvar.ofFloatColor_plum
ofFloatColor.powderBlue = _openframeworks.cvar.ofFloatColor_powderBlue
ofFloatColor.purple = _openframeworks.cvar.ofFloatColor_purple
ofFloatColor.rosyBrown = _openframeworks.cvar.ofFloatColor_rosyBrown
ofFloatColor.royalBlue = _openframeworks.cvar.ofFloatColor_royalBlue
ofFloatColor.saddleBrown = _openframeworks.cvar.ofFloatColor_saddleBrown
ofFloatColor.salmon = _openframeworks.cvar.ofFloatColor_salmon
ofFloatColor.sandyBrown = _openframeworks.cvar.ofFloatColor_sandyBrown
ofFloatColor.seaGreen = _openframeworks.cvar.ofFloatColor_seaGreen
ofFloatColor.seaShell = _openframeworks.cvar.ofFloatColor_seaShell
ofFloatColor.sienna = _openframeworks.cvar.ofFloatColor_sienna
ofFloatColor.silver = _openframeworks.cvar.ofFloatColor_silver
ofFloatColor.skyBlue = _openframeworks.cvar.ofFloatColor_skyBlue
ofFloatColor.slateBlue = _openframeworks.cvar.ofFloatColor_slateBlue
ofFloatColor.slateGray = _openframeworks.cvar.ofFloatColor_slateGray
ofFloatColor.slateGrey = _openframeworks.cvar.ofFloatColor_slateGrey
ofFloatColor.snow = _openframeworks.cvar.ofFloatColor_snow
ofFloatColor.springGreen = _openframeworks.cvar.ofFloatColor_springGreen
ofFloatColor.steelBlue = _openframeworks.cvar.ofFloatColor_steelBlue
ofFloatColor.blueSteel = _openframeworks.cvar.ofFloatColor_blueSteel
ofFloatColor.tan = _openframeworks.cvar.ofFloatColor_tan
ofFloatColor.teal = _openframeworks.cvar.ofFloatColor_teal
ofFloatColor.thistle = _openframeworks.cvar.ofFloatColor_thistle
ofFloatColor.tomato = _openframeworks.cvar.ofFloatColor_tomato
ofFloatColor.turquoise = _openframeworks.cvar.ofFloatColor_turquoise
ofFloatColor.violet = _openframeworks.cvar.ofFloatColor_violet
ofFloatColor.wheat = _openframeworks.cvar.ofFloatColor_wheat
ofFloatColor.whiteSmoke = _openframeworks.cvar.ofFloatColor_whiteSmoke
ofFloatColor.yellowGreen = _openframeworks.cvar.ofFloatColor_yellowGreen

def ofFloatColor_limit():
  return _openframeworks.ofFloatColor_limit()
ofFloatColor_limit = _openframeworks.ofFloatColor_limit

class ofShortColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofShortColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofShortColor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofShortColor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _openframeworks.new_ofShortColor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["fromHsb"] = lambda x: _openframeworks.ofShortColor_fromHsb
    if _newclass:fromHsb = staticmethod(_openframeworks.ofShortColor_fromHsb)
    __swig_getmethods__["fromHex"] = lambda x: _openframeworks.ofShortColor_fromHex
    if _newclass:fromHex = staticmethod(_openframeworks.ofShortColor_fromHex)
    def set(self, *args): return _openframeworks.ofShortColor_set(self, *args)
    def setHex(self, *args): return _openframeworks.ofShortColor_setHex(self, *args)
    def getHex(self): return _openframeworks.ofShortColor_getHex(self)
    def clamp(self): return _openframeworks.ofShortColor_clamp(self)
    def invert(self): return _openframeworks.ofShortColor_invert(self)
    def normalize(self): return _openframeworks.ofShortColor_normalize(self)
    def lerp(self, *args): return _openframeworks.ofShortColor_lerp(self, *args)
    def getClamped(self): return _openframeworks.ofShortColor_getClamped(self)
    def getInverted(self): return _openframeworks.ofShortColor_getInverted(self)
    def getNormalized(self): return _openframeworks.ofShortColor_getNormalized(self)
    def getLerped(self, *args): return _openframeworks.ofShortColor_getLerped(self, *args)
    def getHue(self): return _openframeworks.ofShortColor_getHue(self)
    def getHueAngle(self): return _openframeworks.ofShortColor_getHueAngle(self)
    def getSaturation(self): return _openframeworks.ofShortColor_getSaturation(self)
    def getBrightness(self): return _openframeworks.ofShortColor_getBrightness(self)
    def getLightness(self): return _openframeworks.ofShortColor_getLightness(self)
    def getHsb(self, *args): return _openframeworks.ofShortColor_getHsb(self, *args)
    def setHue(self, *args): return _openframeworks.ofShortColor_setHue(self, *args)
    def setHueAngle(self, *args): return _openframeworks.ofShortColor_setHueAngle(self, *args)
    def setSaturation(self, *args): return _openframeworks.ofShortColor_setSaturation(self, *args)
    def setBrightness(self, *args): return _openframeworks.ofShortColor_setBrightness(self, *args)
    def setHsb(self, *args): return _openframeworks.ofShortColor_setHsb(self, *args)
    def __eq__(self, *args): return _openframeworks.ofShortColor___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofShortColor___ne__(self, *args)
    def __add__(self, *args): return _openframeworks.ofShortColor___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofShortColor___iadd__(self, *args)
    def __sub__(self, *args): return _openframeworks.ofShortColor___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofShortColor___isub__(self, *args)
    def __mul__(self, *args): return _openframeworks.ofShortColor___mul__(self, *args)
    def __imul__(self, *args): return _openframeworks.ofShortColor___imul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofShortColor___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofShortColor___idiv__(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofShortColor___getitem__(self, *args)
    __swig_getmethods__["limit"] = lambda x: _openframeworks.ofShortColor_limit
    if _newclass:limit = staticmethod(_openframeworks.ofShortColor_limit)
    def getR(self): return _openframeworks.ofShortColor_getR(self)
    def getG(self): return _openframeworks.ofShortColor_getG(self)
    def getB(self): return _openframeworks.ofShortColor_getB(self)
    def getA(self): return _openframeworks.ofShortColor_getA(self)
    def setR(self, *args): return _openframeworks.ofShortColor_setR(self, *args)
    def setG(self, *args): return _openframeworks.ofShortColor_setG(self, *args)
    def setB(self, *args): return _openframeworks.ofShortColor_setB(self, *args)
    def setA(self, *args): return _openframeworks.ofShortColor_setA(self, *args)
    def __str__(self): return _openframeworks.ofShortColor___str__(self)
ofShortColor_swigregister = _openframeworks.ofShortColor_swigregister
ofShortColor_swigregister(ofShortColor)

def ofShortColor_fromHsb(*args):
  return _openframeworks.ofShortColor_fromHsb(*args)
ofShortColor_fromHsb = _openframeworks.ofShortColor_fromHsb

def ofShortColor_fromHex(*args):
  return _openframeworks.ofShortColor_fromHex(*args)
ofShortColor_fromHex = _openframeworks.ofShortColor_fromHex
ofShortColor.white = _openframeworks.cvar.ofShortColor_white
ofShortColor.gray = _openframeworks.cvar.ofShortColor_gray
ofShortColor.black = _openframeworks.cvar.ofShortColor_black
ofShortColor.red = _openframeworks.cvar.ofShortColor_red
ofShortColor.green = _openframeworks.cvar.ofShortColor_green
ofShortColor.blue = _openframeworks.cvar.ofShortColor_blue
ofShortColor.cyan = _openframeworks.cvar.ofShortColor_cyan
ofShortColor.magenta = _openframeworks.cvar.ofShortColor_magenta
ofShortColor.yellow = _openframeworks.cvar.ofShortColor_yellow
ofShortColor.aliceBlue = _openframeworks.cvar.ofShortColor_aliceBlue
ofShortColor.antiqueWhite = _openframeworks.cvar.ofShortColor_antiqueWhite
ofShortColor.aqua = _openframeworks.cvar.ofShortColor_aqua
ofShortColor.aquamarine = _openframeworks.cvar.ofShortColor_aquamarine
ofShortColor.azure = _openframeworks.cvar.ofShortColor_azure
ofShortColor.beige = _openframeworks.cvar.ofShortColor_beige
ofShortColor.bisque = _openframeworks.cvar.ofShortColor_bisque
ofShortColor.blanchedAlmond = _openframeworks.cvar.ofShortColor_blanchedAlmond
ofShortColor.blueViolet = _openframeworks.cvar.ofShortColor_blueViolet
ofShortColor.brown = _openframeworks.cvar.ofShortColor_brown
ofShortColor.burlyWood = _openframeworks.cvar.ofShortColor_burlyWood
ofShortColor.cadetBlue = _openframeworks.cvar.ofShortColor_cadetBlue
ofShortColor.chartreuse = _openframeworks.cvar.ofShortColor_chartreuse
ofShortColor.chocolate = _openframeworks.cvar.ofShortColor_chocolate
ofShortColor.coral = _openframeworks.cvar.ofShortColor_coral
ofShortColor.cornflowerBlue = _openframeworks.cvar.ofShortColor_cornflowerBlue
ofShortColor.cornsilk = _openframeworks.cvar.ofShortColor_cornsilk
ofShortColor.crimson = _openframeworks.cvar.ofShortColor_crimson
ofShortColor.darkBlue = _openframeworks.cvar.ofShortColor_darkBlue
ofShortColor.darkCyan = _openframeworks.cvar.ofShortColor_darkCyan
ofShortColor.darkGoldenRod = _openframeworks.cvar.ofShortColor_darkGoldenRod
ofShortColor.darkGray = _openframeworks.cvar.ofShortColor_darkGray
ofShortColor.darkGrey = _openframeworks.cvar.ofShortColor_darkGrey
ofShortColor.darkGreen = _openframeworks.cvar.ofShortColor_darkGreen
ofShortColor.darkKhaki = _openframeworks.cvar.ofShortColor_darkKhaki
ofShortColor.darkMagenta = _openframeworks.cvar.ofShortColor_darkMagenta
ofShortColor.darkOliveGreen = _openframeworks.cvar.ofShortColor_darkOliveGreen
ofShortColor.darkorange = _openframeworks.cvar.ofShortColor_darkorange
ofShortColor.darkOrchid = _openframeworks.cvar.ofShortColor_darkOrchid
ofShortColor.darkRed = _openframeworks.cvar.ofShortColor_darkRed
ofShortColor.darkSalmon = _openframeworks.cvar.ofShortColor_darkSalmon
ofShortColor.darkSeaGreen = _openframeworks.cvar.ofShortColor_darkSeaGreen
ofShortColor.darkSlateBlue = _openframeworks.cvar.ofShortColor_darkSlateBlue
ofShortColor.darkSlateGray = _openframeworks.cvar.ofShortColor_darkSlateGray
ofShortColor.darkSlateGrey = _openframeworks.cvar.ofShortColor_darkSlateGrey
ofShortColor.darkTurquoise = _openframeworks.cvar.ofShortColor_darkTurquoise
ofShortColor.darkViolet = _openframeworks.cvar.ofShortColor_darkViolet
ofShortColor.deepPink = _openframeworks.cvar.ofShortColor_deepPink
ofShortColor.deepSkyBlue = _openframeworks.cvar.ofShortColor_deepSkyBlue
ofShortColor.dimGray = _openframeworks.cvar.ofShortColor_dimGray
ofShortColor.dimGrey = _openframeworks.cvar.ofShortColor_dimGrey
ofShortColor.dodgerBlue = _openframeworks.cvar.ofShortColor_dodgerBlue
ofShortColor.fireBrick = _openframeworks.cvar.ofShortColor_fireBrick
ofShortColor.floralWhite = _openframeworks.cvar.ofShortColor_floralWhite
ofShortColor.forestGreen = _openframeworks.cvar.ofShortColor_forestGreen
ofShortColor.fuchsia = _openframeworks.cvar.ofShortColor_fuchsia
ofShortColor.gainsboro = _openframeworks.cvar.ofShortColor_gainsboro
ofShortColor.ghostWhite = _openframeworks.cvar.ofShortColor_ghostWhite
ofShortColor.gold = _openframeworks.cvar.ofShortColor_gold
ofShortColor.goldenRod = _openframeworks.cvar.ofShortColor_goldenRod
ofShortColor.grey = _openframeworks.cvar.ofShortColor_grey
ofShortColor.greenYellow = _openframeworks.cvar.ofShortColor_greenYellow
ofShortColor.honeyDew = _openframeworks.cvar.ofShortColor_honeyDew
ofShortColor.hotPink = _openframeworks.cvar.ofShortColor_hotPink
ofShortColor.indianRed = _openframeworks.cvar.ofShortColor_indianRed
ofShortColor.indigo = _openframeworks.cvar.ofShortColor_indigo
ofShortColor.ivory = _openframeworks.cvar.ofShortColor_ivory
ofShortColor.khaki = _openframeworks.cvar.ofShortColor_khaki
ofShortColor.lavender = _openframeworks.cvar.ofShortColor_lavender
ofShortColor.lavenderBlush = _openframeworks.cvar.ofShortColor_lavenderBlush
ofShortColor.lawnGreen = _openframeworks.cvar.ofShortColor_lawnGreen
ofShortColor.lemonChiffon = _openframeworks.cvar.ofShortColor_lemonChiffon
ofShortColor.lightBlue = _openframeworks.cvar.ofShortColor_lightBlue
ofShortColor.lightCoral = _openframeworks.cvar.ofShortColor_lightCoral
ofShortColor.lightCyan = _openframeworks.cvar.ofShortColor_lightCyan
ofShortColor.lightGoldenRodYellow = _openframeworks.cvar.ofShortColor_lightGoldenRodYellow
ofShortColor.lightGray = _openframeworks.cvar.ofShortColor_lightGray
ofShortColor.lightGrey = _openframeworks.cvar.ofShortColor_lightGrey
ofShortColor.lightGreen = _openframeworks.cvar.ofShortColor_lightGreen
ofShortColor.lightPink = _openframeworks.cvar.ofShortColor_lightPink
ofShortColor.lightSalmon = _openframeworks.cvar.ofShortColor_lightSalmon
ofShortColor.lightSeaGreen = _openframeworks.cvar.ofShortColor_lightSeaGreen
ofShortColor.lightSkyBlue = _openframeworks.cvar.ofShortColor_lightSkyBlue
ofShortColor.lightSlateGray = _openframeworks.cvar.ofShortColor_lightSlateGray
ofShortColor.lightSlateGrey = _openframeworks.cvar.ofShortColor_lightSlateGrey
ofShortColor.lightSteelBlue = _openframeworks.cvar.ofShortColor_lightSteelBlue
ofShortColor.lightYellow = _openframeworks.cvar.ofShortColor_lightYellow
ofShortColor.lime = _openframeworks.cvar.ofShortColor_lime
ofShortColor.limeGreen = _openframeworks.cvar.ofShortColor_limeGreen
ofShortColor.linen = _openframeworks.cvar.ofShortColor_linen
ofShortColor.maroon = _openframeworks.cvar.ofShortColor_maroon
ofShortColor.mediumAquaMarine = _openframeworks.cvar.ofShortColor_mediumAquaMarine
ofShortColor.mediumBlue = _openframeworks.cvar.ofShortColor_mediumBlue
ofShortColor.mediumOrchid = _openframeworks.cvar.ofShortColor_mediumOrchid
ofShortColor.mediumPurple = _openframeworks.cvar.ofShortColor_mediumPurple
ofShortColor.mediumSeaGreen = _openframeworks.cvar.ofShortColor_mediumSeaGreen
ofShortColor.mediumSlateBlue = _openframeworks.cvar.ofShortColor_mediumSlateBlue
ofShortColor.mediumSpringGreen = _openframeworks.cvar.ofShortColor_mediumSpringGreen
ofShortColor.mediumTurquoise = _openframeworks.cvar.ofShortColor_mediumTurquoise
ofShortColor.mediumVioletRed = _openframeworks.cvar.ofShortColor_mediumVioletRed
ofShortColor.midnightBlue = _openframeworks.cvar.ofShortColor_midnightBlue
ofShortColor.mintCream = _openframeworks.cvar.ofShortColor_mintCream
ofShortColor.mistyRose = _openframeworks.cvar.ofShortColor_mistyRose
ofShortColor.moccasin = _openframeworks.cvar.ofShortColor_moccasin
ofShortColor.navajoWhite = _openframeworks.cvar.ofShortColor_navajoWhite
ofShortColor.navy = _openframeworks.cvar.ofShortColor_navy
ofShortColor.oldLace = _openframeworks.cvar.ofShortColor_oldLace
ofShortColor.olive = _openframeworks.cvar.ofShortColor_olive
ofShortColor.oliveDrab = _openframeworks.cvar.ofShortColor_oliveDrab
ofShortColor.orange = _openframeworks.cvar.ofShortColor_orange
ofShortColor.orangeRed = _openframeworks.cvar.ofShortColor_orangeRed
ofShortColor.orchid = _openframeworks.cvar.ofShortColor_orchid
ofShortColor.paleGoldenRod = _openframeworks.cvar.ofShortColor_paleGoldenRod
ofShortColor.paleGreen = _openframeworks.cvar.ofShortColor_paleGreen
ofShortColor.paleTurquoise = _openframeworks.cvar.ofShortColor_paleTurquoise
ofShortColor.paleVioletRed = _openframeworks.cvar.ofShortColor_paleVioletRed
ofShortColor.papayaWhip = _openframeworks.cvar.ofShortColor_papayaWhip
ofShortColor.peachPuff = _openframeworks.cvar.ofShortColor_peachPuff
ofShortColor.peru = _openframeworks.cvar.ofShortColor_peru
ofShortColor.pink = _openframeworks.cvar.ofShortColor_pink
ofShortColor.plum = _openframeworks.cvar.ofShortColor_plum
ofShortColor.powderBlue = _openframeworks.cvar.ofShortColor_powderBlue
ofShortColor.purple = _openframeworks.cvar.ofShortColor_purple
ofShortColor.rosyBrown = _openframeworks.cvar.ofShortColor_rosyBrown
ofShortColor.royalBlue = _openframeworks.cvar.ofShortColor_royalBlue
ofShortColor.saddleBrown = _openframeworks.cvar.ofShortColor_saddleBrown
ofShortColor.salmon = _openframeworks.cvar.ofShortColor_salmon
ofShortColor.sandyBrown = _openframeworks.cvar.ofShortColor_sandyBrown
ofShortColor.seaGreen = _openframeworks.cvar.ofShortColor_seaGreen
ofShortColor.seaShell = _openframeworks.cvar.ofShortColor_seaShell
ofShortColor.sienna = _openframeworks.cvar.ofShortColor_sienna
ofShortColor.silver = _openframeworks.cvar.ofShortColor_silver
ofShortColor.skyBlue = _openframeworks.cvar.ofShortColor_skyBlue
ofShortColor.slateBlue = _openframeworks.cvar.ofShortColor_slateBlue
ofShortColor.slateGray = _openframeworks.cvar.ofShortColor_slateGray
ofShortColor.slateGrey = _openframeworks.cvar.ofShortColor_slateGrey
ofShortColor.snow = _openframeworks.cvar.ofShortColor_snow
ofShortColor.springGreen = _openframeworks.cvar.ofShortColor_springGreen
ofShortColor.steelBlue = _openframeworks.cvar.ofShortColor_steelBlue
ofShortColor.blueSteel = _openframeworks.cvar.ofShortColor_blueSteel
ofShortColor.tan = _openframeworks.cvar.ofShortColor_tan
ofShortColor.teal = _openframeworks.cvar.ofShortColor_teal
ofShortColor.thistle = _openframeworks.cvar.ofShortColor_thistle
ofShortColor.tomato = _openframeworks.cvar.ofShortColor_tomato
ofShortColor.turquoise = _openframeworks.cvar.ofShortColor_turquoise
ofShortColor.violet = _openframeworks.cvar.ofShortColor_violet
ofShortColor.wheat = _openframeworks.cvar.ofShortColor_wheat
ofShortColor.whiteSmoke = _openframeworks.cvar.ofShortColor_whiteSmoke
ofShortColor.yellowGreen = _openframeworks.cvar.ofShortColor_yellowGreen

def ofShortColor_limit():
  return _openframeworks.ofShortColor_limit()
ofShortColor_limit = _openframeworks.ofShortColor_limit


def ofIsVFlipped():
  return _openframeworks.ofIsVFlipped()
ofIsVFlipped = _openframeworks.ofIsVFlipped
class ofSerialDeviceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSerialDeviceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSerialDeviceInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofSerialDeviceInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def getDevicePath(self): return _openframeworks.ofSerialDeviceInfo_getDevicePath(self)
    def getDeviceName(self): return _openframeworks.ofSerialDeviceInfo_getDeviceName(self)
    def getDeviceID(self): return _openframeworks.ofSerialDeviceInfo_getDeviceID(self)
    __swig_destroy__ = _openframeworks.delete_ofSerialDeviceInfo
    __del__ = lambda self : None;
ofSerialDeviceInfo_swigregister = _openframeworks.ofSerialDeviceInfo_swigregister
ofSerialDeviceInfo_swigregister(ofSerialDeviceInfo)

class ofStyle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofStyle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofStyle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofStyle
    __del__ = lambda self : None;
    __swig_setmethods__["color"] = _openframeworks.ofStyle_color_set
    __swig_getmethods__["color"] = _openframeworks.ofStyle_color_get
    if _newclass:color = _swig_property(_openframeworks.ofStyle_color_get, _openframeworks.ofStyle_color_set)
    __swig_setmethods__["bgColor"] = _openframeworks.ofStyle_bgColor_set
    __swig_getmethods__["bgColor"] = _openframeworks.ofStyle_bgColor_get
    if _newclass:bgColor = _swig_property(_openframeworks.ofStyle_bgColor_get, _openframeworks.ofStyle_bgColor_set)
    __swig_setmethods__["polyMode"] = _openframeworks.ofStyle_polyMode_set
    __swig_getmethods__["polyMode"] = _openframeworks.ofStyle_polyMode_get
    if _newclass:polyMode = _swig_property(_openframeworks.ofStyle_polyMode_get, _openframeworks.ofStyle_polyMode_set)
    __swig_setmethods__["rectMode"] = _openframeworks.ofStyle_rectMode_set
    __swig_getmethods__["rectMode"] = _openframeworks.ofStyle_rectMode_get
    if _newclass:rectMode = _swig_property(_openframeworks.ofStyle_rectMode_get, _openframeworks.ofStyle_rectMode_set)
    __swig_setmethods__["bFill"] = _openframeworks.ofStyle_bFill_set
    __swig_getmethods__["bFill"] = _openframeworks.ofStyle_bFill_get
    if _newclass:bFill = _swig_property(_openframeworks.ofStyle_bFill_get, _openframeworks.ofStyle_bFill_set)
    __swig_setmethods__["drawBitmapMode"] = _openframeworks.ofStyle_drawBitmapMode_set
    __swig_getmethods__["drawBitmapMode"] = _openframeworks.ofStyle_drawBitmapMode_get
    if _newclass:drawBitmapMode = _swig_property(_openframeworks.ofStyle_drawBitmapMode_get, _openframeworks.ofStyle_drawBitmapMode_set)
    __swig_setmethods__["blendingMode"] = _openframeworks.ofStyle_blendingMode_set
    __swig_getmethods__["blendingMode"] = _openframeworks.ofStyle_blendingMode_get
    if _newclass:blendingMode = _swig_property(_openframeworks.ofStyle_blendingMode_get, _openframeworks.ofStyle_blendingMode_set)
    __swig_setmethods__["smoothing"] = _openframeworks.ofStyle_smoothing_set
    __swig_getmethods__["smoothing"] = _openframeworks.ofStyle_smoothing_get
    if _newclass:smoothing = _swig_property(_openframeworks.ofStyle_smoothing_get, _openframeworks.ofStyle_smoothing_set)
    __swig_setmethods__["circleResolution"] = _openframeworks.ofStyle_circleResolution_set
    __swig_getmethods__["circleResolution"] = _openframeworks.ofStyle_circleResolution_get
    if _newclass:circleResolution = _swig_property(_openframeworks.ofStyle_circleResolution_get, _openframeworks.ofStyle_circleResolution_set)
    __swig_setmethods__["sphereResolution"] = _openframeworks.ofStyle_sphereResolution_set
    __swig_getmethods__["sphereResolution"] = _openframeworks.ofStyle_sphereResolution_get
    if _newclass:sphereResolution = _swig_property(_openframeworks.ofStyle_sphereResolution_get, _openframeworks.ofStyle_sphereResolution_set)
    __swig_setmethods__["curveResolution"] = _openframeworks.ofStyle_curveResolution_set
    __swig_getmethods__["curveResolution"] = _openframeworks.ofStyle_curveResolution_get
    if _newclass:curveResolution = _swig_property(_openframeworks.ofStyle_curveResolution_get, _openframeworks.ofStyle_curveResolution_set)
    __swig_setmethods__["lineWidth"] = _openframeworks.ofStyle_lineWidth_set
    __swig_getmethods__["lineWidth"] = _openframeworks.ofStyle_lineWidth_get
    if _newclass:lineWidth = _swig_property(_openframeworks.ofStyle_lineWidth_get, _openframeworks.ofStyle_lineWidth_set)
ofStyle_swigregister = _openframeworks.ofStyle_swigregister
ofStyle_swigregister(ofStyle)


def ofResetElapsedTimeCounter():
  return _openframeworks.ofResetElapsedTimeCounter()
ofResetElapsedTimeCounter = _openframeworks.ofResetElapsedTimeCounter

def ofGetElapsedTimef():
  return _openframeworks.ofGetElapsedTimef()
ofGetElapsedTimef = _openframeworks.ofGetElapsedTimef

def ofGetElapsedTimeMillis():
  return _openframeworks.ofGetElapsedTimeMillis()
ofGetElapsedTimeMillis = _openframeworks.ofGetElapsedTimeMillis

def ofGetElapsedTimeMicros():
  return _openframeworks.ofGetElapsedTimeMicros()
ofGetElapsedTimeMicros = _openframeworks.ofGetElapsedTimeMicros

def ofGetFrameNum():
  return _openframeworks.ofGetFrameNum()
ofGetFrameNum = _openframeworks.ofGetFrameNum

def ofGetSeconds():
  return _openframeworks.ofGetSeconds()
ofGetSeconds = _openframeworks.ofGetSeconds

def ofGetMinutes():
  return _openframeworks.ofGetMinutes()
ofGetMinutes = _openframeworks.ofGetMinutes

def ofGetHours():
  return _openframeworks.ofGetHours()
ofGetHours = _openframeworks.ofGetHours

def ofGetUnixTime():
  return _openframeworks.ofGetUnixTime()
ofGetUnixTime = _openframeworks.ofGetUnixTime

def ofGetSystemTime():
  return _openframeworks.ofGetSystemTime()
ofGetSystemTime = _openframeworks.ofGetSystemTime

def ofGetSystemTimeMicros():
  return _openframeworks.ofGetSystemTimeMicros()
ofGetSystemTimeMicros = _openframeworks.ofGetSystemTimeMicros

def ofGetTimestampString(*args):
  return _openframeworks.ofGetTimestampString(*args)
ofGetTimestampString = _openframeworks.ofGetTimestampString

def ofGetYear():
  return _openframeworks.ofGetYear()
ofGetYear = _openframeworks.ofGetYear

def ofGetMonth():
  return _openframeworks.ofGetMonth()
ofGetMonth = _openframeworks.ofGetMonth

def ofGetDay():
  return _openframeworks.ofGetDay()
ofGetDay = _openframeworks.ofGetDay

def ofGetWeekday():
  return _openframeworks.ofGetWeekday()
ofGetWeekday = _openframeworks.ofGetWeekday

def ofLaunchBrowser(*args):
  return _openframeworks.ofLaunchBrowser(*args)
ofLaunchBrowser = _openframeworks.ofLaunchBrowser

def ofEnableDataPath():
  return _openframeworks.ofEnableDataPath()
ofEnableDataPath = _openframeworks.ofEnableDataPath

def ofDisableDataPath():
  return _openframeworks.ofDisableDataPath()
ofDisableDataPath = _openframeworks.ofDisableDataPath

def ofToDataPath(*args):
  return _openframeworks.ofToDataPath(*args)
ofToDataPath = _openframeworks.ofToDataPath

def ofSetWorkingDirectoryToDefault():
  return _openframeworks.ofSetWorkingDirectoryToDefault()
ofSetWorkingDirectoryToDefault = _openframeworks.ofSetWorkingDirectoryToDefault

def ofSetDataPathRoot(*args):
  return _openframeworks.ofSetDataPathRoot(*args)
ofSetDataPathRoot = _openframeworks.ofSetDataPathRoot

def ofToHex(*args):
  return _openframeworks.ofToHex(*args)
ofToHex = _openframeworks.ofToHex

def ofHexToInt(*args):
  return _openframeworks.ofHexToInt(*args)
ofHexToInt = _openframeworks.ofHexToInt

def ofHexToChar(*args):
  return _openframeworks.ofHexToChar(*args)
ofHexToChar = _openframeworks.ofHexToChar

def ofHexToFloat(*args):
  return _openframeworks.ofHexToFloat(*args)
ofHexToFloat = _openframeworks.ofHexToFloat

def ofHexToString(*args):
  return _openframeworks.ofHexToString(*args)
ofHexToString = _openframeworks.ofHexToString

def ofToInt(*args):
  return _openframeworks.ofToInt(*args)
ofToInt = _openframeworks.ofToInt

def ofToChar(*args):
  return _openframeworks.ofToChar(*args)
ofToChar = _openframeworks.ofToChar

def ofToFloat(*args):
  return _openframeworks.ofToFloat(*args)
ofToFloat = _openframeworks.ofToFloat

def ofToDouble(*args):
  return _openframeworks.ofToDouble(*args)
ofToDouble = _openframeworks.ofToDouble

def ofToBool(*args):
  return _openframeworks.ofToBool(*args)
ofToBool = _openframeworks.ofToBool

def ofToBinary(*args):
  return _openframeworks.ofToBinary(*args)
ofToBinary = _openframeworks.ofToBinary

def ofBinaryToInt(*args):
  return _openframeworks.ofBinaryToInt(*args)
ofBinaryToInt = _openframeworks.ofBinaryToInt

def ofBinaryToChar(*args):
  return _openframeworks.ofBinaryToChar(*args)
ofBinaryToChar = _openframeworks.ofBinaryToChar

def ofBinaryToFloat(*args):
  return _openframeworks.ofBinaryToFloat(*args)
ofBinaryToFloat = _openframeworks.ofBinaryToFloat

def ofBinaryToString(*args):
  return _openframeworks.ofBinaryToString(*args)
ofBinaryToString = _openframeworks.ofBinaryToString

def ofGetVersionInfo():
  return _openframeworks.ofGetVersionInfo()
ofGetVersionInfo = _openframeworks.ofGetVersionInfo

def ofGetVersionMajor():
  return _openframeworks.ofGetVersionMajor()
ofGetVersionMajor = _openframeworks.ofGetVersionMajor

def ofGetVersionMinor():
  return _openframeworks.ofGetVersionMinor()
ofGetVersionMinor = _openframeworks.ofGetVersionMinor

def ofGetVersionPatch():
  return _openframeworks.ofGetVersionPatch()
ofGetVersionPatch = _openframeworks.ofGetVersionPatch

def ofSaveScreen(*args):
  return _openframeworks.ofSaveScreen(*args)
ofSaveScreen = _openframeworks.ofSaveScreen

def ofSaveFrame(bUseViewport=False):
  return _openframeworks.ofSaveFrame(bUseViewport)
ofSaveFrame = _openframeworks.ofSaveFrame

def ofSaveViewport(*args):
  return _openframeworks.ofSaveViewport(*args)
ofSaveViewport = _openframeworks.ofSaveViewport

def ofSplitString(*args):
  return _openframeworks.ofSplitString(*args)
ofSplitString = _openframeworks.ofSplitString

def ofJoinString(*args):
  return _openframeworks.ofJoinString(*args)
ofJoinString = _openframeworks.ofJoinString

def ofStringReplace(*args):
  return _openframeworks.ofStringReplace(*args)
ofStringReplace = _openframeworks.ofStringReplace

def ofIsStringInString(*args):
  return _openframeworks.ofIsStringInString(*args)
ofIsStringInString = _openframeworks.ofIsStringInString

def ofStringTimesInString(*args):
  return _openframeworks.ofStringTimesInString(*args)
ofStringTimesInString = _openframeworks.ofStringTimesInString

def ofToLower(*args):
  return _openframeworks.ofToLower(*args)
ofToLower = _openframeworks.ofToLower

def ofToUpper(*args):
  return _openframeworks.ofToUpper(*args)
ofToUpper = _openframeworks.ofToUpper

def ofSystem(*args):
  return _openframeworks.ofSystem(*args)
ofSystem = _openframeworks.ofSystem

def ofGetTargetPlatform():
  return _openframeworks.ofGetTargetPlatform()
ofGetTargetPlatform = _openframeworks.ofGetTargetPlatform
class ofBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBuffer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofBuffer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofBuffer
    __del__ = lambda self : None;
    def set(self, *args): return _openframeworks.ofBuffer_set(self, *args)
    def append(self, *args): return _openframeworks.ofBuffer_append(self, *args)
    def writeTo(self, *args): return _openframeworks.ofBuffer_writeTo(self, *args)
    def clear(self): return _openframeworks.ofBuffer_clear(self)
    def allocate(self, *args): return _openframeworks.ofBuffer_allocate(self, *args)
    def getBinaryBuffer(self, *args): return _openframeworks.ofBuffer_getBinaryBuffer(self, *args)
    def getText(self): return _openframeworks.ofBuffer_getText(self)
    def size(self): return _openframeworks.ofBuffer_size(self)
    def getNextLine(self): return _openframeworks.ofBuffer_getNextLine(self)
    def getFirstLine(self): return _openframeworks.ofBuffer_getFirstLine(self)
    def isLastLine(self): return _openframeworks.ofBuffer_isLastLine(self)
    def resetLineReader(self): return _openframeworks.ofBuffer_resetLineReader(self)
ofBuffer_swigregister = _openframeworks.ofBuffer_swigregister
ofBuffer_swigregister(ofBuffer)


def ofBufferFromFile(*args):
  return _openframeworks.ofBufferFromFile(*args)
ofBufferFromFile = _openframeworks.ofBufferFromFile

def ofBufferToFile(*args):
  return _openframeworks.ofBufferToFile(*args)
ofBufferToFile = _openframeworks.ofBufferToFile
class ofFilePath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFilePath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFilePath, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getFileExt"] = lambda x: _openframeworks.ofFilePath_getFileExt
    if _newclass:getFileExt = staticmethod(_openframeworks.ofFilePath_getFileExt)
    __swig_getmethods__["removeExt"] = lambda x: _openframeworks.ofFilePath_removeExt
    if _newclass:removeExt = staticmethod(_openframeworks.ofFilePath_removeExt)
    __swig_getmethods__["addLeadingSlash"] = lambda x: _openframeworks.ofFilePath_addLeadingSlash
    if _newclass:addLeadingSlash = staticmethod(_openframeworks.ofFilePath_addLeadingSlash)
    __swig_getmethods__["addTrailingSlash"] = lambda x: _openframeworks.ofFilePath_addTrailingSlash
    if _newclass:addTrailingSlash = staticmethod(_openframeworks.ofFilePath_addTrailingSlash)
    __swig_getmethods__["removeTrailingSlash"] = lambda x: _openframeworks.ofFilePath_removeTrailingSlash
    if _newclass:removeTrailingSlash = staticmethod(_openframeworks.ofFilePath_removeTrailingSlash)
    __swig_getmethods__["getPathForDirectory"] = lambda x: _openframeworks.ofFilePath_getPathForDirectory
    if _newclass:getPathForDirectory = staticmethod(_openframeworks.ofFilePath_getPathForDirectory)
    __swig_getmethods__["getAbsolutePath"] = lambda x: _openframeworks.ofFilePath_getAbsolutePath
    if _newclass:getAbsolutePath = staticmethod(_openframeworks.ofFilePath_getAbsolutePath)
    __swig_getmethods__["isAbsolute"] = lambda x: _openframeworks.ofFilePath_isAbsolute
    if _newclass:isAbsolute = staticmethod(_openframeworks.ofFilePath_isAbsolute)
    __swig_getmethods__["getFileName"] = lambda x: _openframeworks.ofFilePath_getFileName
    if _newclass:getFileName = staticmethod(_openframeworks.ofFilePath_getFileName)
    __swig_getmethods__["getBaseName"] = lambda x: _openframeworks.ofFilePath_getBaseName
    if _newclass:getBaseName = staticmethod(_openframeworks.ofFilePath_getBaseName)
    __swig_getmethods__["getEnclosingDirectory"] = lambda x: _openframeworks.ofFilePath_getEnclosingDirectory
    if _newclass:getEnclosingDirectory = staticmethod(_openframeworks.ofFilePath_getEnclosingDirectory)
    __swig_getmethods__["createEnclosingDirectory"] = lambda x: _openframeworks.ofFilePath_createEnclosingDirectory
    if _newclass:createEnclosingDirectory = staticmethod(_openframeworks.ofFilePath_createEnclosingDirectory)
    __swig_getmethods__["getCurrentWorkingDirectory"] = lambda x: _openframeworks.ofFilePath_getCurrentWorkingDirectory
    if _newclass:getCurrentWorkingDirectory = staticmethod(_openframeworks.ofFilePath_getCurrentWorkingDirectory)
    __swig_getmethods__["join"] = lambda x: _openframeworks.ofFilePath_join
    if _newclass:join = staticmethod(_openframeworks.ofFilePath_join)
    __swig_getmethods__["getCurrentExePath"] = lambda x: _openframeworks.ofFilePath_getCurrentExePath
    if _newclass:getCurrentExePath = staticmethod(_openframeworks.ofFilePath_getCurrentExePath)
    __swig_getmethods__["getCurrentExeDir"] = lambda x: _openframeworks.ofFilePath_getCurrentExeDir
    if _newclass:getCurrentExeDir = staticmethod(_openframeworks.ofFilePath_getCurrentExeDir)
    __swig_getmethods__["getUserHomeDir"] = lambda x: _openframeworks.ofFilePath_getUserHomeDir
    if _newclass:getUserHomeDir = staticmethod(_openframeworks.ofFilePath_getUserHomeDir)
    def __init__(self): 
        this = _openframeworks.new_ofFilePath()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofFilePath
    __del__ = lambda self : None;
ofFilePath_swigregister = _openframeworks.ofFilePath_swigregister
ofFilePath_swigregister(ofFilePath)

def ofFilePath_getFileExt(*args):
  return _openframeworks.ofFilePath_getFileExt(*args)
ofFilePath_getFileExt = _openframeworks.ofFilePath_getFileExt

def ofFilePath_removeExt(*args):
  return _openframeworks.ofFilePath_removeExt(*args)
ofFilePath_removeExt = _openframeworks.ofFilePath_removeExt

def ofFilePath_addLeadingSlash(*args):
  return _openframeworks.ofFilePath_addLeadingSlash(*args)
ofFilePath_addLeadingSlash = _openframeworks.ofFilePath_addLeadingSlash

def ofFilePath_addTrailingSlash(*args):
  return _openframeworks.ofFilePath_addTrailingSlash(*args)
ofFilePath_addTrailingSlash = _openframeworks.ofFilePath_addTrailingSlash

def ofFilePath_removeTrailingSlash(*args):
  return _openframeworks.ofFilePath_removeTrailingSlash(*args)
ofFilePath_removeTrailingSlash = _openframeworks.ofFilePath_removeTrailingSlash

def ofFilePath_getPathForDirectory(*args):
  return _openframeworks.ofFilePath_getPathForDirectory(*args)
ofFilePath_getPathForDirectory = _openframeworks.ofFilePath_getPathForDirectory

def ofFilePath_getAbsolutePath(*args):
  return _openframeworks.ofFilePath_getAbsolutePath(*args)
ofFilePath_getAbsolutePath = _openframeworks.ofFilePath_getAbsolutePath

def ofFilePath_isAbsolute(*args):
  return _openframeworks.ofFilePath_isAbsolute(*args)
ofFilePath_isAbsolute = _openframeworks.ofFilePath_isAbsolute

def ofFilePath_getFileName(*args):
  return _openframeworks.ofFilePath_getFileName(*args)
ofFilePath_getFileName = _openframeworks.ofFilePath_getFileName

def ofFilePath_getBaseName(*args):
  return _openframeworks.ofFilePath_getBaseName(*args)
ofFilePath_getBaseName = _openframeworks.ofFilePath_getBaseName

def ofFilePath_getEnclosingDirectory(*args):
  return _openframeworks.ofFilePath_getEnclosingDirectory(*args)
ofFilePath_getEnclosingDirectory = _openframeworks.ofFilePath_getEnclosingDirectory

def ofFilePath_createEnclosingDirectory(*args):
  return _openframeworks.ofFilePath_createEnclosingDirectory(*args)
ofFilePath_createEnclosingDirectory = _openframeworks.ofFilePath_createEnclosingDirectory

def ofFilePath_getCurrentWorkingDirectory():
  return _openframeworks.ofFilePath_getCurrentWorkingDirectory()
ofFilePath_getCurrentWorkingDirectory = _openframeworks.ofFilePath_getCurrentWorkingDirectory

def ofFilePath_join(*args):
  return _openframeworks.ofFilePath_join(*args)
ofFilePath_join = _openframeworks.ofFilePath_join

def ofFilePath_getCurrentExePath():
  return _openframeworks.ofFilePath_getCurrentExePath()
ofFilePath_getCurrentExePath = _openframeworks.ofFilePath_getCurrentExePath

def ofFilePath_getCurrentExeDir():
  return _openframeworks.ofFilePath_getCurrentExeDir()
ofFilePath_getCurrentExeDir = _openframeworks.ofFilePath_getCurrentExeDir

def ofFilePath_getUserHomeDir():
  return _openframeworks.ofFilePath_getUserHomeDir()
ofFilePath_getUserHomeDir = _openframeworks.ofFilePath_getUserHomeDir

class ofFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFile, name)
    __repr__ = _swig_repr
    Reference = _openframeworks.ofFile_Reference
    ReadOnly = _openframeworks.ofFile_ReadOnly
    WriteOnly = _openframeworks.ofFile_WriteOnly
    ReadWrite = _openframeworks.ofFile_ReadWrite
    Append = _openframeworks.ofFile_Append
    def __init__(self, *args): 
        this = _openframeworks.new_ofFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofFile
    __del__ = lambda self : None;
    def open(self, *args): return _openframeworks.ofFile_open(self, *args)
    def changeMode(self, *args): return _openframeworks.ofFile_changeMode(self, *args)
    def close(self): return _openframeworks.ofFile_close(self)
    def create(self): return _openframeworks.ofFile_create(self)
    def exists(self): return _openframeworks.ofFile_exists(self)
    def path(self): return _openframeworks.ofFile_path(self)
    def getExtension(self): return _openframeworks.ofFile_getExtension(self)
    def getFileName(self): return _openframeworks.ofFile_getFileName(self)
    def getBaseName(self): return _openframeworks.ofFile_getBaseName(self)
    def getEnclosingDirectory(self): return _openframeworks.ofFile_getEnclosingDirectory(self)
    def getAbsolutePath(self): return _openframeworks.ofFile_getAbsolutePath(self)
    def canRead(self): return _openframeworks.ofFile_canRead(self)
    def canWrite(self): return _openframeworks.ofFile_canWrite(self)
    def canExecute(self): return _openframeworks.ofFile_canExecute(self)
    def isFile(self): return _openframeworks.ofFile_isFile(self)
    def isLink(self): return _openframeworks.ofFile_isLink(self)
    def isDirectory(self): return _openframeworks.ofFile_isDirectory(self)
    def isDevice(self): return _openframeworks.ofFile_isDevice(self)
    def isHidden(self): return _openframeworks.ofFile_isHidden(self)
    def setWriteable(self, writeable=True): return _openframeworks.ofFile_setWriteable(self, writeable)
    def setReadOnly(self, readable=True): return _openframeworks.ofFile_setReadOnly(self, readable)
    def setExecutable(self, executable=True): return _openframeworks.ofFile_setExecutable(self, executable)
    def copyTo(self, *args): return _openframeworks.ofFile_copyTo(self, *args)
    def moveTo(self, *args): return _openframeworks.ofFile_moveTo(self, *args)
    def renameTo(self, *args): return _openframeworks.ofFile_renameTo(self, *args)
    def remove(self, recursive=False): return _openframeworks.ofFile_remove(self, recursive)
    def getSize(self): return _openframeworks.ofFile_getSize(self)
    def getPocoFile(self): return _openframeworks.ofFile_getPocoFile(self)
    def __eq__(self, *args): return _openframeworks.ofFile___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofFile___ne__(self, *args)
    def __lt__(self, *args): return _openframeworks.ofFile___lt__(self, *args)
    def __le__(self, *args): return _openframeworks.ofFile___le__(self, *args)
    def __gt__(self, *args): return _openframeworks.ofFile___gt__(self, *args)
    def __ge__(self, *args): return _openframeworks.ofFile___ge__(self, *args)
    def readToBuffer(self): return _openframeworks.ofFile_readToBuffer(self)
    def writeFromBuffer(self, *args): return _openframeworks.ofFile_writeFromBuffer(self, *args)
    def getFileBuffer(self): return _openframeworks.ofFile_getFileBuffer(self)
    __swig_getmethods__["copyFromTo"] = lambda x: _openframeworks.ofFile_copyFromTo
    if _newclass:copyFromTo = staticmethod(_openframeworks.ofFile_copyFromTo)
    __swig_getmethods__["moveFromTo"] = lambda x: _openframeworks.ofFile_moveFromTo
    if _newclass:moveFromTo = staticmethod(_openframeworks.ofFile_moveFromTo)
    __swig_getmethods__["doesFileExist"] = lambda x: _openframeworks.ofFile_doesFileExist
    if _newclass:doesFileExist = staticmethod(_openframeworks.ofFile_doesFileExist)
    __swig_getmethods__["removeFile"] = lambda x: _openframeworks.ofFile_removeFile
    if _newclass:removeFile = staticmethod(_openframeworks.ofFile_removeFile)
ofFile_swigregister = _openframeworks.ofFile_swigregister
ofFile_swigregister(ofFile)

def ofFile_copyFromTo(*args):
  return _openframeworks.ofFile_copyFromTo(*args)
ofFile_copyFromTo = _openframeworks.ofFile_copyFromTo

def ofFile_moveFromTo(*args):
  return _openframeworks.ofFile_moveFromTo(*args)
ofFile_moveFromTo = _openframeworks.ofFile_moveFromTo

def ofFile_doesFileExist(*args):
  return _openframeworks.ofFile_doesFileExist(*args)
ofFile_doesFileExist = _openframeworks.ofFile_doesFileExist

def ofFile_removeFile(*args):
  return _openframeworks.ofFile_removeFile(*args)
ofFile_removeFile = _openframeworks.ofFile_removeFile

class ofDirectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofDirectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofDirectory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofDirectory(*args)
        try: self.this.append(this)
        except: self.this = this
    def open(self, *args): return _openframeworks.ofDirectory_open(self, *args)
    def close(self): return _openframeworks.ofDirectory_close(self)
    def create(self, recursive=False): return _openframeworks.ofDirectory_create(self, recursive)
    def exists(self): return _openframeworks.ofDirectory_exists(self)
    def path(self): return _openframeworks.ofDirectory_path(self)
    def getAbsolutePath(self): return _openframeworks.ofDirectory_getAbsolutePath(self)
    def isDirectory(self): return _openframeworks.ofDirectory_isDirectory(self)
    def isHidden(self): return _openframeworks.ofDirectory_isHidden(self)
    def setWriteable(self, writeable=True): return _openframeworks.ofDirectory_setWriteable(self, writeable)
    def setReadOnly(self, readable=True): return _openframeworks.ofDirectory_setReadOnly(self, readable)
    def setExecutable(self, executable=True): return _openframeworks.ofDirectory_setExecutable(self, executable)
    def setShowHidden(self, *args): return _openframeworks.ofDirectory_setShowHidden(self, *args)
    def copyTo(self, *args): return _openframeworks.ofDirectory_copyTo(self, *args)
    def moveTo(self, *args): return _openframeworks.ofDirectory_moveTo(self, *args)
    def renameTo(self, *args): return _openframeworks.ofDirectory_renameTo(self, *args)
    def remove(self, *args): return _openframeworks.ofDirectory_remove(self, *args)
    def allowExt(self, *args): return _openframeworks.ofDirectory_allowExt(self, *args)
    def listDir(self, *args): return _openframeworks.ofDirectory_listDir(self, *args)
    def getOriginalDirectory(self): return _openframeworks.ofDirectory_getOriginalDirectory(self)
    def getName(self, *args): return _openframeworks.ofDirectory_getName(self, *args)
    def getPath(self, *args): return _openframeworks.ofDirectory_getPath(self, *args)
    def getFile(self, *args): return _openframeworks.ofDirectory_getFile(self, *args)
    def getFiles(self): return _openframeworks.ofDirectory_getFiles(self)
    def __getitem__(self, *args): return _openframeworks.ofDirectory___getitem__(self, *args)
    def getShowHidden(self): return _openframeworks.ofDirectory_getShowHidden(self)
    def reset(self): return _openframeworks.ofDirectory_reset(self)
    def sort(self): return _openframeworks.ofDirectory_sort(self)
    def size(self): return _openframeworks.ofDirectory_size(self)
    def numFiles(self): return _openframeworks.ofDirectory_numFiles(self)
    def getPocoFile(self): return _openframeworks.ofDirectory_getPocoFile(self)
    def __eq__(self, *args): return _openframeworks.ofDirectory___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofDirectory___ne__(self, *args)
    def __lt__(self, *args): return _openframeworks.ofDirectory___lt__(self, *args)
    def __le__(self, *args): return _openframeworks.ofDirectory___le__(self, *args)
    def __gt__(self, *args): return _openframeworks.ofDirectory___gt__(self, *args)
    def __ge__(self, *args): return _openframeworks.ofDirectory___ge__(self, *args)
    __swig_getmethods__["createDirectory"] = lambda x: _openframeworks.ofDirectory_createDirectory
    if _newclass:createDirectory = staticmethod(_openframeworks.ofDirectory_createDirectory)
    __swig_getmethods__["isDirectoryEmpty"] = lambda x: _openframeworks.ofDirectory_isDirectoryEmpty
    if _newclass:isDirectoryEmpty = staticmethod(_openframeworks.ofDirectory_isDirectoryEmpty)
    __swig_getmethods__["doesDirectoryExist"] = lambda x: _openframeworks.ofDirectory_doesDirectoryExist
    if _newclass:doesDirectoryExist = staticmethod(_openframeworks.ofDirectory_doesDirectoryExist)
    __swig_getmethods__["removeDirectory"] = lambda x: _openframeworks.ofDirectory_removeDirectory
    if _newclass:removeDirectory = staticmethod(_openframeworks.ofDirectory_removeDirectory)
    __swig_destroy__ = _openframeworks.delete_ofDirectory
    __del__ = lambda self : None;
ofDirectory_swigregister = _openframeworks.ofDirectory_swigregister
ofDirectory_swigregister(ofDirectory)

def ofDirectory_createDirectory(*args):
  return _openframeworks.ofDirectory_createDirectory(*args)
ofDirectory_createDirectory = _openframeworks.ofDirectory_createDirectory

def ofDirectory_isDirectoryEmpty(*args):
  return _openframeworks.ofDirectory_isDirectoryEmpty(*args)
ofDirectory_isDirectoryEmpty = _openframeworks.ofDirectory_isDirectoryEmpty

def ofDirectory_doesDirectoryExist(*args):
  return _openframeworks.ofDirectory_doesDirectoryExist(*args)
ofDirectory_doesDirectoryExist = _openframeworks.ofDirectory_doesDirectoryExist

def ofDirectory_removeDirectory(*args):
  return _openframeworks.ofDirectory_removeDirectory(*args)
ofDirectory_removeDirectory = _openframeworks.ofDirectory_removeDirectory


def log(*args):
  return _openframeworks.log(*args)
log = _openframeworks.log
OF_LOG_VERBOSE = _openframeworks.OF_LOG_VERBOSE
OF_LOG_NOTICE = _openframeworks.OF_LOG_NOTICE
OF_LOG_WARNING = _openframeworks.OF_LOG_WARNING
OF_LOG_ERROR = _openframeworks.OF_LOG_ERROR
OF_LOG_FATAL_ERROR = _openframeworks.OF_LOG_FATAL_ERROR
OF_LOG_SILENT = _openframeworks.OF_LOG_SILENT

def ofSetLogLevel(*args):
  return _openframeworks.ofSetLogLevel(*args)
ofSetLogLevel = _openframeworks.ofSetLogLevel

def ofGetLogLevel():
  return _openframeworks.ofGetLogLevel()
ofGetLogLevel = _openframeworks.ofGetLogLevel

def ofGetLogLevelName(*args):
  return _openframeworks.ofGetLogLevelName(*args)
ofGetLogLevelName = _openframeworks.ofGetLogLevelName

def ofLogToFile(*args):
  return _openframeworks.ofLogToFile(*args)
ofLogToFile = _openframeworks.ofLogToFile

def ofLogToConsole():
  return _openframeworks.ofLogToConsole()
ofLogToConsole = _openframeworks.ofLogToConsole
class ofFileDialogResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFileDialogResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFileDialogResult, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofFileDialogResult()
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _openframeworks.ofFileDialogResult_getName(self)
    def getPath(self): return _openframeworks.ofFileDialogResult_getPath(self)
    __swig_setmethods__["filePath"] = _openframeworks.ofFileDialogResult_filePath_set
    __swig_getmethods__["filePath"] = _openframeworks.ofFileDialogResult_filePath_get
    if _newclass:filePath = _swig_property(_openframeworks.ofFileDialogResult_filePath_get, _openframeworks.ofFileDialogResult_filePath_set)
    __swig_setmethods__["fileName"] = _openframeworks.ofFileDialogResult_fileName_set
    __swig_getmethods__["fileName"] = _openframeworks.ofFileDialogResult_fileName_get
    if _newclass:fileName = _swig_property(_openframeworks.ofFileDialogResult_fileName_get, _openframeworks.ofFileDialogResult_fileName_set)
    __swig_setmethods__["bSuccess"] = _openframeworks.ofFileDialogResult_bSuccess_set
    __swig_getmethods__["bSuccess"] = _openframeworks.ofFileDialogResult_bSuccess_get
    if _newclass:bSuccess = _swig_property(_openframeworks.ofFileDialogResult_bSuccess_get, _openframeworks.ofFileDialogResult_bSuccess_set)
    __swig_destroy__ = _openframeworks.delete_ofFileDialogResult
    __del__ = lambda self : None;
ofFileDialogResult_swigregister = _openframeworks.ofFileDialogResult_swigregister
ofFileDialogResult_swigregister(ofFileDialogResult)


def ofSystemAlertDialog(*args):
  return _openframeworks.ofSystemAlertDialog(*args)
ofSystemAlertDialog = _openframeworks.ofSystemAlertDialog

def ofSystemLoadDialog(windowTitle="", bFolderSelection=False, defaultPath=""):
  return _openframeworks.ofSystemLoadDialog(windowTitle, bFolderSelection, defaultPath)
ofSystemLoadDialog = _openframeworks.ofSystemLoadDialog

def ofSystemSaveDialog(*args):
  return _openframeworks.ofSystemSaveDialog(*args)
ofSystemSaveDialog = _openframeworks.ofSystemSaveDialog

def ofSystemTextBoxDialog(*args):
  return _openframeworks.ofSystemTextBoxDialog(*args)
ofSystemTextBoxDialog = _openframeworks.ofSystemTextBoxDialog
class ofHttpRequest(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofHttpRequest, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofHttpRequest, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofHttpRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["url"] = _openframeworks.ofHttpRequest_url_set
    __swig_getmethods__["url"] = _openframeworks.ofHttpRequest_url_get
    if _newclass:url = _swig_property(_openframeworks.ofHttpRequest_url_get, _openframeworks.ofHttpRequest_url_set)
    __swig_setmethods__["name"] = _openframeworks.ofHttpRequest_name_set
    __swig_getmethods__["name"] = _openframeworks.ofHttpRequest_name_get
    if _newclass:name = _swig_property(_openframeworks.ofHttpRequest_name_get, _openframeworks.ofHttpRequest_name_set)
    __swig_setmethods__["saveTo"] = _openframeworks.ofHttpRequest_saveTo_set
    __swig_getmethods__["saveTo"] = _openframeworks.ofHttpRequest_saveTo_get
    if _newclass:saveTo = _swig_property(_openframeworks.ofHttpRequest_saveTo_get, _openframeworks.ofHttpRequest_saveTo_set)
    def getID(self): return _openframeworks.ofHttpRequest_getID(self)
    __swig_destroy__ = _openframeworks.delete_ofHttpRequest
    __del__ = lambda self : None;
ofHttpRequest_swigregister = _openframeworks.ofHttpRequest_swigregister
ofHttpRequest_swigregister(ofHttpRequest)

class ofHttpResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofHttpResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofHttpResponse, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofHttpResponse(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["request"] = _openframeworks.ofHttpResponse_request_set
    __swig_getmethods__["request"] = _openframeworks.ofHttpResponse_request_get
    if _newclass:request = _swig_property(_openframeworks.ofHttpResponse_request_get, _openframeworks.ofHttpResponse_request_set)
    __swig_setmethods__["data"] = _openframeworks.ofHttpResponse_data_set
    __swig_getmethods__["data"] = _openframeworks.ofHttpResponse_data_get
    if _newclass:data = _swig_property(_openframeworks.ofHttpResponse_data_get, _openframeworks.ofHttpResponse_data_set)
    __swig_setmethods__["status"] = _openframeworks.ofHttpResponse_status_set
    __swig_getmethods__["status"] = _openframeworks.ofHttpResponse_status_get
    if _newclass:status = _swig_property(_openframeworks.ofHttpResponse_status_get, _openframeworks.ofHttpResponse_status_set)
    __swig_setmethods__["error"] = _openframeworks.ofHttpResponse_error_set
    __swig_getmethods__["error"] = _openframeworks.ofHttpResponse_error_get
    if _newclass:error = _swig_property(_openframeworks.ofHttpResponse_error_get, _openframeworks.ofHttpResponse_error_set)
    __swig_destroy__ = _openframeworks.delete_ofHttpResponse
    __del__ = lambda self : None;
ofHttpResponse_swigregister = _openframeworks.ofHttpResponse_swigregister
ofHttpResponse_swigregister(ofHttpResponse)


def ofLoadURL(*args):
  return _openframeworks.ofLoadURL(*args)
ofLoadURL = _openframeworks.ofLoadURL

def ofLoadURLAsync(*args):
  return _openframeworks.ofLoadURLAsync(*args)
ofLoadURLAsync = _openframeworks.ofLoadURLAsync

def ofSaveURLTo(*args):
  return _openframeworks.ofSaveURLTo(*args)
ofSaveURLTo = _openframeworks.ofSaveURLTo

def ofSaveURLAsync(*args):
  return _openframeworks.ofSaveURLAsync(*args)
ofSaveURLAsync = _openframeworks.ofSaveURLAsync

def ofRemoveURLRequest(*args):
  return _openframeworks.ofRemoveURLRequest(*args)
ofRemoveURLRequest = _openframeworks.ofRemoveURLRequest

def ofRemoveAllURLRequests():
  return _openframeworks.ofRemoveAllURLRequests()
ofRemoveAllURLRequests = _openframeworks.ofRemoveAllURLRequests

def ofStopURLLoader():
  return _openframeworks.ofStopURLLoader()
ofStopURLLoader = _openframeworks.ofStopURLLoader

def ofURLResponseEvent():
  return _openframeworks.ofURLResponseEvent()
ofURLResponseEvent = _openframeworks.ofURLResponseEvent
class ofURLFileLoader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofURLFileLoader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofURLFileLoader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofURLFileLoader()
        try: self.this.append(this)
        except: self.this = this
    def get(self, *args): return _openframeworks.ofURLFileLoader_get(self, *args)
    def getAsync(self, *args): return _openframeworks.ofURLFileLoader_getAsync(self, *args)
    def saveTo(self, *args): return _openframeworks.ofURLFileLoader_saveTo(self, *args)
    def saveAsync(self, *args): return _openframeworks.ofURLFileLoader_saveAsync(self, *args)
    def remove(self, *args): return _openframeworks.ofURLFileLoader_remove(self, *args)
    def clear(self): return _openframeworks.ofURLFileLoader_clear(self)
    def stop(self): return _openframeworks.ofURLFileLoader_stop(self)
    __swig_destroy__ = _openframeworks.delete_ofURLFileLoader
    __del__ = lambda self : None;
ofURLFileLoader_swigregister = _openframeworks.ofURLFileLoader_swigregister
ofURLFileLoader_swigregister(ofURLFileLoader)

class ofRectangle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofRectangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofRectangle, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofRectangle
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _openframeworks.new_ofRectangle(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _openframeworks.ofRectangle_set(self, *args)
    def setWidth(self, *args): return _openframeworks.ofRectangle_setWidth(self, *args)
    def setHeight(self, *args): return _openframeworks.ofRectangle_setHeight(self, *args)
    def setPosition(self, *args): return _openframeworks.ofRectangle_setPosition(self, *args)
    def setFromCenter(self, *args): return _openframeworks.ofRectangle_setFromCenter(self, *args)
    def translate(self, *args): return _openframeworks.ofRectangle_translate(self, *args)
    def translateX(self, *args): return _openframeworks.ofRectangle_translateX(self, *args)
    def translateY(self, *args): return _openframeworks.ofRectangle_translateY(self, *args)
    def scale(self, *args): return _openframeworks.ofRectangle_scale(self, *args)
    def scaleWidth(self, *args): return _openframeworks.ofRectangle_scaleWidth(self, *args)
    def scaleHeight(self, *args): return _openframeworks.ofRectangle_scaleHeight(self, *args)
    def scaleFromCenter(self, *args): return _openframeworks.ofRectangle_scaleFromCenter(self, *args)
    def scaleToScaleMode(self, *args): return _openframeworks.ofRectangle_scaleToScaleMode(self, *args)
    def scaleToAspectRatio(self, *args): return _openframeworks.ofRectangle_scaleToAspectRatio(self, *args)
    def scaleTo(self, *args): return _openframeworks.ofRectangle_scaleTo(self, *args)
    def alignToHorz(self, *args): return _openframeworks.ofRectangle_alignToHorz(self, *args)
    def alignToVert(self, *args): return _openframeworks.ofRectangle_alignToVert(self, *args)
    def alignTo(self, *args): return _openframeworks.ofRectangle_alignTo(self, *args)
    def inside(self, *args): return _openframeworks.ofRectangle_inside(self, *args)
    def intersects(self, *args): return _openframeworks.ofRectangle_intersects(self, *args)
    def growToInclude(self, *args): return _openframeworks.ofRectangle_growToInclude(self, *args)
    def getIntersection(self, *args): return _openframeworks.ofRectangle_getIntersection(self, *args)
    def getUnion(self, *args): return _openframeworks.ofRectangle_getUnion(self, *args)
    def standardize(self): return _openframeworks.ofRectangle_standardize(self)
    def getStandardized(self): return _openframeworks.ofRectangle_getStandardized(self)
    def isStandardized(self): return _openframeworks.ofRectangle_isStandardized(self)
    def getArea(self): return _openframeworks.ofRectangle_getArea(self)
    def getPerimeter(self): return _openframeworks.ofRectangle_getPerimeter(self)
    def getAspectRatio(self): return _openframeworks.ofRectangle_getAspectRatio(self)
    def isEmpty(self): return _openframeworks.ofRectangle_isEmpty(self)
    def getMin(self): return _openframeworks.ofRectangle_getMin(self)
    def getMax(self): return _openframeworks.ofRectangle_getMax(self)
    def getMinX(self): return _openframeworks.ofRectangle_getMinX(self)
    def getMaxX(self): return _openframeworks.ofRectangle_getMaxX(self)
    def getMinY(self): return _openframeworks.ofRectangle_getMinY(self)
    def getMaxY(self): return _openframeworks.ofRectangle_getMaxY(self)
    def getLeft(self): return _openframeworks.ofRectangle_getLeft(self)
    def getRight(self): return _openframeworks.ofRectangle_getRight(self)
    def getTop(self): return _openframeworks.ofRectangle_getTop(self)
    def getBottom(self): return _openframeworks.ofRectangle_getBottom(self)
    def getTopLeft(self): return _openframeworks.ofRectangle_getTopLeft(self)
    def getTopRight(self): return _openframeworks.ofRectangle_getTopRight(self)
    def getBottomLeft(self): return _openframeworks.ofRectangle_getBottomLeft(self)
    def getBottomRight(self): return _openframeworks.ofRectangle_getBottomRight(self)
    def getHorzAnchor(self, *args): return _openframeworks.ofRectangle_getHorzAnchor(self, *args)
    def getVertAnchor(self, *args): return _openframeworks.ofRectangle_getVertAnchor(self, *args)
    def getPosition(self): return _openframeworks.ofRectangle_getPosition(self)
    def getPositionRef(self): return _openframeworks.ofRectangle_getPositionRef(self)
    def getCenter(self): return _openframeworks.ofRectangle_getCenter(self)
    def getWidth(self): return _openframeworks.ofRectangle_getWidth(self)
    def getHeight(self): return _openframeworks.ofRectangle_getHeight(self)
    def __add__(self, *args): return _openframeworks.ofRectangle___add__(self, *args)
    def __eq__(self, *args): return _openframeworks.ofRectangle___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofRectangle___ne__(self, *args)
    __swig_setmethods__["position"] = _openframeworks.ofRectangle_position_set
    __swig_getmethods__["position"] = _openframeworks.ofRectangle_position_get
    if _newclass:position = _swig_property(_openframeworks.ofRectangle_position_get, _openframeworks.ofRectangle_position_set)
    __swig_setmethods__["width"] = _openframeworks.ofRectangle_width_set
    __swig_getmethods__["width"] = _openframeworks.ofRectangle_width_get
    if _newclass:width = _swig_property(_openframeworks.ofRectangle_width_get, _openframeworks.ofRectangle_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofRectangle_height_set
    __swig_getmethods__["height"] = _openframeworks.ofRectangle_height_get
    if _newclass:height = _swig_property(_openframeworks.ofRectangle_height_get, _openframeworks.ofRectangle_height_set)
    __swig_setmethods__["x"] = _openframeworks.ofRectangle_x_set
    __swig_getmethods__["x"] = _openframeworks.ofRectangle_x_get
    if _newclass:x = _swig_property(_openframeworks.ofRectangle_x_get, _openframeworks.ofRectangle_x_set)
    __swig_setmethods__["y"] = _openframeworks.ofRectangle_y_set
    __swig_getmethods__["y"] = _openframeworks.ofRectangle_y_get
    if _newclass:y = _swig_property(_openframeworks.ofRectangle_y_get, _openframeworks.ofRectangle_y_set)
ofRectangle_swigregister = _openframeworks.ofRectangle_swigregister
ofRectangle_swigregister(ofRectangle)

class ofNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofNode, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofNode
    __del__ = lambda self : None;
    def setParent(self, *args): return _openframeworks.ofNode_setParent(self, *args)
    def clearParent(self, bMaintainGlobalTransform=False): return _openframeworks.ofNode_clearParent(self, bMaintainGlobalTransform)
    def getParent(self): return _openframeworks.ofNode_getParent(self)
    def getPosition(self): return _openframeworks.ofNode_getPosition(self)
    def getX(self): return _openframeworks.ofNode_getX(self)
    def getY(self): return _openframeworks.ofNode_getY(self)
    def getZ(self): return _openframeworks.ofNode_getZ(self)
    def getXAxis(self): return _openframeworks.ofNode_getXAxis(self)
    def getYAxis(self): return _openframeworks.ofNode_getYAxis(self)
    def getZAxis(self): return _openframeworks.ofNode_getZAxis(self)
    def getSideDir(self): return _openframeworks.ofNode_getSideDir(self)
    def getLookAtDir(self): return _openframeworks.ofNode_getLookAtDir(self)
    def getUpDir(self): return _openframeworks.ofNode_getUpDir(self)
    def getPitch(self): return _openframeworks.ofNode_getPitch(self)
    def getHeading(self): return _openframeworks.ofNode_getHeading(self)
    def getRoll(self): return _openframeworks.ofNode_getRoll(self)
    def getOrientationQuat(self): return _openframeworks.ofNode_getOrientationQuat(self)
    def getOrientationEuler(self): return _openframeworks.ofNode_getOrientationEuler(self)
    def getScale(self): return _openframeworks.ofNode_getScale(self)
    def getLocalTransformMatrix(self): return _openframeworks.ofNode_getLocalTransformMatrix(self)
    def getGlobalTransformMatrix(self): return _openframeworks.ofNode_getGlobalTransformMatrix(self)
    def getGlobalPosition(self): return _openframeworks.ofNode_getGlobalPosition(self)
    def getGlobalOrientation(self): return _openframeworks.ofNode_getGlobalOrientation(self)
    def getGlobalScale(self): return _openframeworks.ofNode_getGlobalScale(self)
    def setTransformMatrix(self, *args): return _openframeworks.ofNode_setTransformMatrix(self, *args)
    def setPosition(self, *args): return _openframeworks.ofNode_setPosition(self, *args)
    def setGlobalPosition(self, *args): return _openframeworks.ofNode_setGlobalPosition(self, *args)
    def setOrientation(self, *args): return _openframeworks.ofNode_setOrientation(self, *args)
    def setGlobalOrientation(self, *args): return _openframeworks.ofNode_setGlobalOrientation(self, *args)
    def setScale(self, *args): return _openframeworks.ofNode_setScale(self, *args)
    def move(self, *args): return _openframeworks.ofNode_move(self, *args)
    def truck(self, *args): return _openframeworks.ofNode_truck(self, *args)
    def boom(self, *args): return _openframeworks.ofNode_boom(self, *args)
    def dolly(self, *args): return _openframeworks.ofNode_dolly(self, *args)
    def tilt(self, *args): return _openframeworks.ofNode_tilt(self, *args)
    def pan(self, *args): return _openframeworks.ofNode_pan(self, *args)
    def roll(self, *args): return _openframeworks.ofNode_roll(self, *args)
    def rotate(self, *args): return _openframeworks.ofNode_rotate(self, *args)
    def rotateAround(self, *args): return _openframeworks.ofNode_rotateAround(self, *args)
    def lookAt(self, *args): return _openframeworks.ofNode_lookAt(self, *args)
    def orbit(self, *args): return _openframeworks.ofNode_orbit(self, *args)
    def transformGL(self): return _openframeworks.ofNode_transformGL(self)
    def restoreTransformGL(self): return _openframeworks.ofNode_restoreTransformGL(self)
    def resetTransform(self): return _openframeworks.ofNode_resetTransform(self)
    def customDraw(self): return _openframeworks.ofNode_customDraw(self)
    def draw(self): return _openframeworks.ofNode_draw(self)
ofNode_swigregister = _openframeworks.ofNode_swigregister
ofNode_swigregister(ofNode)


def ofDrawAxis(*args):
  return _openframeworks.ofDrawAxis(*args)
ofDrawAxis = _openframeworks.ofDrawAxis

def ofDrawGrid(scale=10.0, ticks=8.0, labels=False, x=True, y=True, z=True):
  return _openframeworks.ofDrawGrid(scale, ticks, labels, x, y, z)
ofDrawGrid = _openframeworks.ofDrawGrid

def ofDrawGridPlane(*args):
  return _openframeworks.ofDrawGridPlane(*args)
ofDrawGridPlane = _openframeworks.ofDrawGridPlane

def ofDrawArrow(*args):
  return _openframeworks.ofDrawArrow(*args)
ofDrawArrow = _openframeworks.ofDrawArrow

def ofDrawRotationAxes(*args):
  return _openframeworks.ofDrawRotationAxes(*args)
ofDrawRotationAxes = _openframeworks.ofDrawRotationAxes
class ofCamera(ofNode):
    __swig_setmethods__ = {}
    for _s in [ofNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofCamera, name, value)
    __swig_getmethods__ = {}
    for _s in [ofNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofCamera, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofCamera()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofCamera
    __del__ = lambda self : None;
    def setFov(self, *args): return _openframeworks.ofCamera_setFov(self, *args)
    def setNearClip(self, *args): return _openframeworks.ofCamera_setNearClip(self, *args)
    def setFarClip(self, *args): return _openframeworks.ofCamera_setFarClip(self, *args)
    def setLensOffset(self, *args): return _openframeworks.ofCamera_setLensOffset(self, *args)
    def setAspectRatio(self, *args): return _openframeworks.ofCamera_setAspectRatio(self, *args)
    def setForceAspectRatio(self, *args): return _openframeworks.ofCamera_setForceAspectRatio(self, *args)
    def getFov(self): return _openframeworks.ofCamera_getFov(self)
    def getNearClip(self): return _openframeworks.ofCamera_getNearClip(self)
    def getFarClip(self): return _openframeworks.ofCamera_getFarClip(self)
    def getLensOffset(self): return _openframeworks.ofCamera_getLensOffset(self)
    def getForceAspectRatio(self): return _openframeworks.ofCamera_getForceAspectRatio(self)
    def getAspectRatio(self): return _openframeworks.ofCamera_getAspectRatio(self)
    def setupPerspective(self, *args): return _openframeworks.ofCamera_setupPerspective(self, *args)
    def setupOffAxisViewPortal(self, *args): return _openframeworks.ofCamera_setupOffAxisViewPortal(self, *args)
    def setVFlip(self, *args): return _openframeworks.ofCamera_setVFlip(self, *args)
    def isVFlipped(self): return _openframeworks.ofCamera_isVFlipped(self)
    def enableOrtho(self): return _openframeworks.ofCamera_enableOrtho(self)
    def disableOrtho(self): return _openframeworks.ofCamera_disableOrtho(self)
    def getOrtho(self): return _openframeworks.ofCamera_getOrtho(self)
    def getImagePlaneDistance(self, *args): return _openframeworks.ofCamera_getImagePlaneDistance(self, *args)
    def begin(self, *args): return _openframeworks.ofCamera_begin(self, *args)
    def end(self): return _openframeworks.ofCamera_end(self)
    def getProjectionMatrix(self, *args): return _openframeworks.ofCamera_getProjectionMatrix(self, *args)
    def getModelViewMatrix(self): return _openframeworks.ofCamera_getModelViewMatrix(self)
    def getModelViewProjectionMatrix(self, *args): return _openframeworks.ofCamera_getModelViewProjectionMatrix(self, *args)
    def worldToScreen(self, *args): return _openframeworks.ofCamera_worldToScreen(self, *args)
    def screenToWorld(self, *args): return _openframeworks.ofCamera_screenToWorld(self, *args)
    def worldToCamera(self, *args): return _openframeworks.ofCamera_worldToCamera(self, *args)
    def cameraToWorld(self, *args): return _openframeworks.ofCamera_cameraToWorld(self, *args)
ofCamera_swigregister = _openframeworks.ofCamera_swigregister
ofCamera_swigregister(ofCamera)

class ofEasyCam(ofCamera):
    __swig_setmethods__ = {}
    for _s in [ofCamera]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofEasyCam, name, value)
    __swig_getmethods__ = {}
    for _s in [ofCamera]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofEasyCam, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofEasyCam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofEasyCam
    __del__ = lambda self : None;
    def begin(self, *args): return _openframeworks.ofEasyCam_begin(self, *args)
    def reset(self): return _openframeworks.ofEasyCam_reset(self)
    def setTarget(self, *args): return _openframeworks.ofEasyCam_setTarget(self, *args)
    def getTarget(self): return _openframeworks.ofEasyCam_getTarget(self)
    def setDistance(self, *args): return _openframeworks.ofEasyCam_setDistance(self, *args)
    def getDistance(self): return _openframeworks.ofEasyCam_getDistance(self)
    def setDrag(self, *args): return _openframeworks.ofEasyCam_setDrag(self, *args)
    def getDrag(self): return _openframeworks.ofEasyCam_getDrag(self)
    def setTranslationKey(self, *args): return _openframeworks.ofEasyCam_setTranslationKey(self, *args)
    def getTranslationKey(self): return _openframeworks.ofEasyCam_getTranslationKey(self)
    def enableMouseInput(self): return _openframeworks.ofEasyCam_enableMouseInput(self)
    def disableMouseInput(self): return _openframeworks.ofEasyCam_disableMouseInput(self)
    def getMouseInputEnabled(self): return _openframeworks.ofEasyCam_getMouseInputEnabled(self)
    def enableMouseMiddleButton(self): return _openframeworks.ofEasyCam_enableMouseMiddleButton(self)
    def disableMouseMiddleButton(self): return _openframeworks.ofEasyCam_disableMouseMiddleButton(self)
    def getMouseMiddleButtonEnabled(self): return _openframeworks.ofEasyCam_getMouseMiddleButtonEnabled(self)
    def setAutoDistance(self, *args): return _openframeworks.ofEasyCam_setAutoDistance(self, *args)
ofEasyCam_swigregister = _openframeworks.ofEasyCam_swigregister
ofEasyCam_swigregister(ofEasyCam)

class ofMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofMesh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofMesh
    __del__ = lambda self : None;
    def setMode(self, *args): return _openframeworks.ofMesh_setMode(self, *args)
    def getMode(self): return _openframeworks.ofMesh_getMode(self)
    def clear(self): return _openframeworks.ofMesh_clear(self)
    def setupIndicesAuto(self): return _openframeworks.ofMesh_setupIndicesAuto(self)
    def getVertex(self, *args): return _openframeworks.ofMesh_getVertex(self, *args)
    def addVertex(self, *args): return _openframeworks.ofMesh_addVertex(self, *args)
    def addVertices(self, *args): return _openframeworks.ofMesh_addVertices(self, *args)
    def removeVertex(self, *args): return _openframeworks.ofMesh_removeVertex(self, *args)
    def setVertex(self, *args): return _openframeworks.ofMesh_setVertex(self, *args)
    def clearVertices(self): return _openframeworks.ofMesh_clearVertices(self)
    def getNormal(self, *args): return _openframeworks.ofMesh_getNormal(self, *args)
    def addNormal(self, *args): return _openframeworks.ofMesh_addNormal(self, *args)
    def addNormals(self, *args): return _openframeworks.ofMesh_addNormals(self, *args)
    def removeNormal(self, *args): return _openframeworks.ofMesh_removeNormal(self, *args)
    def setNormal(self, *args): return _openframeworks.ofMesh_setNormal(self, *args)
    def clearNormals(self): return _openframeworks.ofMesh_clearNormals(self)
    def getColor(self, *args): return _openframeworks.ofMesh_getColor(self, *args)
    def addColor(self, *args): return _openframeworks.ofMesh_addColor(self, *args)
    def addColors(self, *args): return _openframeworks.ofMesh_addColors(self, *args)
    def removeColor(self, *args): return _openframeworks.ofMesh_removeColor(self, *args)
    def setColor(self, *args): return _openframeworks.ofMesh_setColor(self, *args)
    def clearColors(self): return _openframeworks.ofMesh_clearColors(self)
    def getTexCoord(self, *args): return _openframeworks.ofMesh_getTexCoord(self, *args)
    def addTexCoord(self, *args): return _openframeworks.ofMesh_addTexCoord(self, *args)
    def addTexCoords(self, *args): return _openframeworks.ofMesh_addTexCoords(self, *args)
    def removeTexCoord(self, *args): return _openframeworks.ofMesh_removeTexCoord(self, *args)
    def setTexCoord(self, *args): return _openframeworks.ofMesh_setTexCoord(self, *args)
    def clearTexCoords(self): return _openframeworks.ofMesh_clearTexCoords(self)
    def getIndex(self, *args): return _openframeworks.ofMesh_getIndex(self, *args)
    def addIndex(self, *args): return _openframeworks.ofMesh_addIndex(self, *args)
    def addIndices(self, *args): return _openframeworks.ofMesh_addIndices(self, *args)
    def removeIndex(self, *args): return _openframeworks.ofMesh_removeIndex(self, *args)
    def setIndex(self, *args): return _openframeworks.ofMesh_setIndex(self, *args)
    def clearIndices(self): return _openframeworks.ofMesh_clearIndices(self)
    def addTriangle(self, *args): return _openframeworks.ofMesh_addTriangle(self, *args)
    def getNumVertices(self): return _openframeworks.ofMesh_getNumVertices(self)
    def getNumColors(self): return _openframeworks.ofMesh_getNumColors(self)
    def getNumNormals(self): return _openframeworks.ofMesh_getNumNormals(self)
    def getNumTexCoords(self): return _openframeworks.ofMesh_getNumTexCoords(self)
    def getNumIndices(self): return _openframeworks.ofMesh_getNumIndices(self)
    def getVerticesPointer(self, *args): return _openframeworks.ofMesh_getVerticesPointer(self, *args)
    def getColorsPointer(self, *args): return _openframeworks.ofMesh_getColorsPointer(self, *args)
    def getNormalsPointer(self, *args): return _openframeworks.ofMesh_getNormalsPointer(self, *args)
    def getTexCoordsPointer(self, *args): return _openframeworks.ofMesh_getTexCoordsPointer(self, *args)
    def getIndexPointer(self, *args): return _openframeworks.ofMesh_getIndexPointer(self, *args)
    def getVertices(self, *args): return _openframeworks.ofMesh_getVertices(self, *args)
    def getColors(self, *args): return _openframeworks.ofMesh_getColors(self, *args)
    def getNormals(self, *args): return _openframeworks.ofMesh_getNormals(self, *args)
    def getTexCoords(self, *args): return _openframeworks.ofMesh_getTexCoords(self, *args)
    def getIndices(self, *args): return _openframeworks.ofMesh_getIndices(self, *args)
    def getCentroid(self): return _openframeworks.ofMesh_getCentroid(self)
    def haveVertsChanged(self): return _openframeworks.ofMesh_haveVertsChanged(self)
    def haveColorsChanged(self): return _openframeworks.ofMesh_haveColorsChanged(self)
    def haveNormalsChanged(self): return _openframeworks.ofMesh_haveNormalsChanged(self)
    def haveTexCoordsChanged(self): return _openframeworks.ofMesh_haveTexCoordsChanged(self)
    def haveIndicesChanged(self): return _openframeworks.ofMesh_haveIndicesChanged(self)
    def hasVertices(self): return _openframeworks.ofMesh_hasVertices(self)
    def hasColors(self): return _openframeworks.ofMesh_hasColors(self)
    def hasNormals(self): return _openframeworks.ofMesh_hasNormals(self)
    def hasTexCoords(self): return _openframeworks.ofMesh_hasTexCoords(self)
    def hasIndices(self): return _openframeworks.ofMesh_hasIndices(self)
    def drawVertices(self): return _openframeworks.ofMesh_drawVertices(self)
    def drawWireframe(self): return _openframeworks.ofMesh_drawWireframe(self)
    def drawFaces(self): return _openframeworks.ofMesh_drawFaces(self)
    def load(self, *args): return _openframeworks.ofMesh_load(self, *args)
    def save(self, *args): return _openframeworks.ofMesh_save(self, *args)
    def enableColors(self): return _openframeworks.ofMesh_enableColors(self)
    def enableTextures(self): return _openframeworks.ofMesh_enableTextures(self)
    def enableNormals(self): return _openframeworks.ofMesh_enableNormals(self)
    def enableIndices(self): return _openframeworks.ofMesh_enableIndices(self)
    def disableColors(self): return _openframeworks.ofMesh_disableColors(self)
    def disableTextures(self): return _openframeworks.ofMesh_disableTextures(self)
    def disableNormals(self): return _openframeworks.ofMesh_disableNormals(self)
    def disableIndices(self): return _openframeworks.ofMesh_disableIndices(self)
    def usingColors(self): return _openframeworks.ofMesh_usingColors(self)
    def usingTextures(self): return _openframeworks.ofMesh_usingTextures(self)
    def usingNormals(self): return _openframeworks.ofMesh_usingNormals(self)
    def usingIndices(self): return _openframeworks.ofMesh_usingIndices(self)
    def append(self, *args): return _openframeworks.ofMesh_append(self, *args)
    def setColorForIndices(self, *args): return _openframeworks.ofMesh_setColorForIndices(self, *args)
    def getMeshForIndices(self, *args): return _openframeworks.ofMesh_getMeshForIndices(self, *args)
    def mergeDuplicateVertices(self): return _openframeworks.ofMesh_mergeDuplicateVertices(self)
    def getUniqueFaces(self): return _openframeworks.ofMesh_getUniqueFaces(self)
    def getFaceNormals(self, perVetex=False): return _openframeworks.ofMesh_getFaceNormals(self, perVetex)
    def setFromTriangles(self, *args): return _openframeworks.ofMesh_setFromTriangles(self, *args)
    def smoothNormals(self, *args): return _openframeworks.ofMesh_smoothNormals(self, *args)
    __swig_getmethods__["plane"] = lambda x: _openframeworks.ofMesh_plane
    if _newclass:plane = staticmethod(_openframeworks.ofMesh_plane)
    __swig_getmethods__["sphere"] = lambda x: _openframeworks.ofMesh_sphere
    if _newclass:sphere = staticmethod(_openframeworks.ofMesh_sphere)
    __swig_getmethods__["icosahedron"] = lambda x: _openframeworks.ofMesh_icosahedron
    if _newclass:icosahedron = staticmethod(_openframeworks.ofMesh_icosahedron)
    __swig_getmethods__["icosphere"] = lambda x: _openframeworks.ofMesh_icosphere
    if _newclass:icosphere = staticmethod(_openframeworks.ofMesh_icosphere)
    __swig_getmethods__["cylinder"] = lambda x: _openframeworks.ofMesh_cylinder
    if _newclass:cylinder = staticmethod(_openframeworks.ofMesh_cylinder)
    __swig_getmethods__["cone"] = lambda x: _openframeworks.ofMesh_cone
    if _newclass:cone = staticmethod(_openframeworks.ofMesh_cone)
    __swig_getmethods__["box"] = lambda x: _openframeworks.ofMesh_box
    if _newclass:box = staticmethod(_openframeworks.ofMesh_box)
    __swig_getmethods__["axis"] = lambda x: _openframeworks.ofMesh_axis
    if _newclass:axis = staticmethod(_openframeworks.ofMesh_axis)
    def draw(self, *args): return _openframeworks.ofMesh_draw(self, *args)
ofMesh_swigregister = _openframeworks.ofMesh_swigregister
ofMesh_swigregister(ofMesh)

def ofMesh_plane(*args):
  return _openframeworks.ofMesh_plane(*args)
ofMesh_plane = _openframeworks.ofMesh_plane

def ofMesh_sphere(*args):
  return _openframeworks.ofMesh_sphere(*args)
ofMesh_sphere = _openframeworks.ofMesh_sphere

def ofMesh_icosahedron(*args):
  return _openframeworks.ofMesh_icosahedron(*args)
ofMesh_icosahedron = _openframeworks.ofMesh_icosahedron

def ofMesh_icosphere(*args):
  return _openframeworks.ofMesh_icosphere(*args)
ofMesh_icosphere = _openframeworks.ofMesh_icosphere

def ofMesh_cylinder(*args):
  return _openframeworks.ofMesh_cylinder(*args)
ofMesh_cylinder = _openframeworks.ofMesh_cylinder

def ofMesh_cone(*args):
  return _openframeworks.ofMesh_cone(*args)
ofMesh_cone = _openframeworks.ofMesh_cone

def ofMesh_box(*args):
  return _openframeworks.ofMesh_box(*args)
ofMesh_box = _openframeworks.ofMesh_box

def ofMesh_axis(size=1.0):
  return _openframeworks.ofMesh_axis(size)
ofMesh_axis = _openframeworks.ofMesh_axis

class ofMeshFace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMeshFace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofMeshFace, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofMeshFace()
        try: self.this.append(this)
        except: self.this = this
    def getFaceNormal(self): return _openframeworks.ofMeshFace_getFaceNormal(self)
    def setVertex(self, *args): return _openframeworks.ofMeshFace_setVertex(self, *args)
    def getVertex(self, *args): return _openframeworks.ofMeshFace_getVertex(self, *args)
    def setNormal(self, *args): return _openframeworks.ofMeshFace_setNormal(self, *args)
    def getNormal(self, *args): return _openframeworks.ofMeshFace_getNormal(self, *args)
    def setColor(self, *args): return _openframeworks.ofMeshFace_setColor(self, *args)
    def getColor(self, *args): return _openframeworks.ofMeshFace_getColor(self, *args)
    def setTexCoord(self, *args): return _openframeworks.ofMeshFace_setTexCoord(self, *args)
    def getTexCoord(self, *args): return _openframeworks.ofMeshFace_getTexCoord(self, *args)
    def setHasColors(self, *args): return _openframeworks.ofMeshFace_setHasColors(self, *args)
    def setHasNormals(self, *args): return _openframeworks.ofMeshFace_setHasNormals(self, *args)
    def setHasTexcoords(self, *args): return _openframeworks.ofMeshFace_setHasTexcoords(self, *args)
    def hasColors(self): return _openframeworks.ofMeshFace_hasColors(self)
    def hasNormals(self): return _openframeworks.ofMeshFace_hasNormals(self)
    def hasTexcoords(self): return _openframeworks.ofMeshFace_hasTexcoords(self)
    __swig_destroy__ = _openframeworks.delete_ofMeshFace
    __del__ = lambda self : None;
ofMeshFace_swigregister = _openframeworks.ofMeshFace_swigregister
ofMeshFace_swigregister(ofMeshFace)

class ofPlanePrimitive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofPlanePrimitive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofPlanePrimitive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofPlanePrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofPlanePrimitive
    __del__ = lambda self : None;
    def set(self, *args): return _openframeworks.ofPlanePrimitive_set(self, *args)
    def resizeToTexture(self, *args): return _openframeworks.ofPlanePrimitive_resizeToTexture(self, *args)
    def setWidth(self, *args): return _openframeworks.ofPlanePrimitive_setWidth(self, *args)
    def setHeight(self, *args): return _openframeworks.ofPlanePrimitive_setHeight(self, *args)
    def setColumns(self, *args): return _openframeworks.ofPlanePrimitive_setColumns(self, *args)
    def setRows(self, *args): return _openframeworks.ofPlanePrimitive_setRows(self, *args)
    def setResolution(self, *args): return _openframeworks.ofPlanePrimitive_setResolution(self, *args)
    def setMode(self, *args): return _openframeworks.ofPlanePrimitive_setMode(self, *args)
    def getNumColumns(self): return _openframeworks.ofPlanePrimitive_getNumColumns(self)
    def getNumRows(self): return _openframeworks.ofPlanePrimitive_getNumRows(self)
    def getResolution(self): return _openframeworks.ofPlanePrimitive_getResolution(self)
    def getWidth(self): return _openframeworks.ofPlanePrimitive_getWidth(self)
    def getHeight(self): return _openframeworks.ofPlanePrimitive_getHeight(self)
ofPlanePrimitive_swigregister = _openframeworks.ofPlanePrimitive_swigregister
ofPlanePrimitive_swigregister(ofPlanePrimitive)

class ofSpherePrimitive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSpherePrimitive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSpherePrimitive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofSpherePrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofSpherePrimitive
    __del__ = lambda self : None;
    def set(self, *args): return _openframeworks.ofSpherePrimitive_set(self, *args)
    def setResolution(self, *args): return _openframeworks.ofSpherePrimitive_setResolution(self, *args)
    def setRadius(self, *args): return _openframeworks.ofSpherePrimitive_setRadius(self, *args)
    def setMode(self, *args): return _openframeworks.ofSpherePrimitive_setMode(self, *args)
    def getRadius(self): return _openframeworks.ofSpherePrimitive_getRadius(self)
    def getResolution(self): return _openframeworks.ofSpherePrimitive_getResolution(self)
ofSpherePrimitive_swigregister = _openframeworks.ofSpherePrimitive_swigregister
ofSpherePrimitive_swigregister(ofSpherePrimitive)

class ofIcoSpherePrimitive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofIcoSpherePrimitive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofIcoSpherePrimitive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofIcoSpherePrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofIcoSpherePrimitive
    __del__ = lambda self : None;
    def set(self, *args): return _openframeworks.ofIcoSpherePrimitive_set(self, *args)
    def setResolution(self, *args): return _openframeworks.ofIcoSpherePrimitive_setResolution(self, *args)
    def setRadius(self, *args): return _openframeworks.ofIcoSpherePrimitive_setRadius(self, *args)
    def setMode(self, *args): return _openframeworks.ofIcoSpherePrimitive_setMode(self, *args)
    def getRadius(self): return _openframeworks.ofIcoSpherePrimitive_getRadius(self)
    def getResolution(self): return _openframeworks.ofIcoSpherePrimitive_getResolution(self)
ofIcoSpherePrimitive_swigregister = _openframeworks.ofIcoSpherePrimitive_swigregister
ofIcoSpherePrimitive_swigregister(ofIcoSpherePrimitive)

class ofCylinderPrimitive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofCylinderPrimitive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofCylinderPrimitive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofCylinderPrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofCylinderPrimitive
    __del__ = lambda self : None;
    def set(self, *args): return _openframeworks.ofCylinderPrimitive_set(self, *args)
    def setRadius(self, *args): return _openframeworks.ofCylinderPrimitive_setRadius(self, *args)
    def setHeight(self, *args): return _openframeworks.ofCylinderPrimitive_setHeight(self, *args)
    def setCapped(self, *args): return _openframeworks.ofCylinderPrimitive_setCapped(self, *args)
    def setResolutionRadius(self, *args): return _openframeworks.ofCylinderPrimitive_setResolutionRadius(self, *args)
    def setResolutionHeight(self, *args): return _openframeworks.ofCylinderPrimitive_setResolutionHeight(self, *args)
    def setResolutionCap(self, *args): return _openframeworks.ofCylinderPrimitive_setResolutionCap(self, *args)
    def setResolution(self, *args): return _openframeworks.ofCylinderPrimitive_setResolution(self, *args)
    def setMode(self, *args): return _openframeworks.ofCylinderPrimitive_setMode(self, *args)
    def setTopCapColor(self, *args): return _openframeworks.ofCylinderPrimitive_setTopCapColor(self, *args)
    def setCylinderColor(self, *args): return _openframeworks.ofCylinderPrimitive_setCylinderColor(self, *args)
    def setBottomCapColor(self, *args): return _openframeworks.ofCylinderPrimitive_setBottomCapColor(self, *args)
    def getTopCapIndices(self): return _openframeworks.ofCylinderPrimitive_getTopCapIndices(self)
    def getTopCapMesh(self): return _openframeworks.ofCylinderPrimitive_getTopCapMesh(self)
    def getCylinderIndices(self): return _openframeworks.ofCylinderPrimitive_getCylinderIndices(self)
    def getCylinderMesh(self): return _openframeworks.ofCylinderPrimitive_getCylinderMesh(self)
    def getBottomCapIndices(self): return _openframeworks.ofCylinderPrimitive_getBottomCapIndices(self)
    def getBottomCapMesh(self): return _openframeworks.ofCylinderPrimitive_getBottomCapMesh(self)
    def getResolutionRadius(self): return _openframeworks.ofCylinderPrimitive_getResolutionRadius(self)
    def getResolutionHeight(self): return _openframeworks.ofCylinderPrimitive_getResolutionHeight(self)
    def getResolutionCap(self): return _openframeworks.ofCylinderPrimitive_getResolutionCap(self)
    def getResolution(self): return _openframeworks.ofCylinderPrimitive_getResolution(self)
    def getHeight(self): return _openframeworks.ofCylinderPrimitive_getHeight(self)
    def getRadius(self): return _openframeworks.ofCylinderPrimitive_getRadius(self)
    def getCapped(self): return _openframeworks.ofCylinderPrimitive_getCapped(self)
ofCylinderPrimitive_swigregister = _openframeworks.ofCylinderPrimitive_swigregister
ofCylinderPrimitive_swigregister(ofCylinderPrimitive)

class ofConePrimitive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofConePrimitive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofConePrimitive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofConePrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofConePrimitive
    __del__ = lambda self : None;
    def set(self, *args): return _openframeworks.ofConePrimitive_set(self, *args)
    def setResolutionRadius(self, *args): return _openframeworks.ofConePrimitive_setResolutionRadius(self, *args)
    def setResolutionHeight(self, *args): return _openframeworks.ofConePrimitive_setResolutionHeight(self, *args)
    def setResolutionCap(self, *args): return _openframeworks.ofConePrimitive_setResolutionCap(self, *args)
    def setResolution(self, *args): return _openframeworks.ofConePrimitive_setResolution(self, *args)
    def setMode(self, *args): return _openframeworks.ofConePrimitive_setMode(self, *args)
    def setRadius(self, *args): return _openframeworks.ofConePrimitive_setRadius(self, *args)
    def setHeight(self, *args): return _openframeworks.ofConePrimitive_setHeight(self, *args)
    def setTopColor(self, *args): return _openframeworks.ofConePrimitive_setTopColor(self, *args)
    def setCapColor(self, *args): return _openframeworks.ofConePrimitive_setCapColor(self, *args)
    def getConeIndices(self): return _openframeworks.ofConePrimitive_getConeIndices(self)
    def getConeMesh(self): return _openframeworks.ofConePrimitive_getConeMesh(self)
    def getCapIndices(self): return _openframeworks.ofConePrimitive_getCapIndices(self)
    def getCapMesh(self): return _openframeworks.ofConePrimitive_getCapMesh(self)
    def getResolutionRadius(self): return _openframeworks.ofConePrimitive_getResolutionRadius(self)
    def getResolutionHeight(self): return _openframeworks.ofConePrimitive_getResolutionHeight(self)
    def getResolutionCap(self): return _openframeworks.ofConePrimitive_getResolutionCap(self)
    def getResolution(self): return _openframeworks.ofConePrimitive_getResolution(self)
    def getRadius(self): return _openframeworks.ofConePrimitive_getRadius(self)
    def getHeight(self): return _openframeworks.ofConePrimitive_getHeight(self)
ofConePrimitive_swigregister = _openframeworks.ofConePrimitive_swigregister
ofConePrimitive_swigregister(ofConePrimitive)

class ofBoxPrimitive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofBoxPrimitive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofBoxPrimitive, name)
    __repr__ = _swig_repr
    SIDE_FRONT = _openframeworks.ofBoxPrimitive_SIDE_FRONT
    SIDE_RIGHT = _openframeworks.ofBoxPrimitive_SIDE_RIGHT
    SIDE_LEFT = _openframeworks.ofBoxPrimitive_SIDE_LEFT
    SIDE_BACK = _openframeworks.ofBoxPrimitive_SIDE_BACK
    SIDE_TOP = _openframeworks.ofBoxPrimitive_SIDE_TOP
    SIDE_BOTTOM = _openframeworks.ofBoxPrimitive_SIDE_BOTTOM
    SIDES_TOTAL = _openframeworks.ofBoxPrimitive_SIDES_TOTAL
    def __init__(self, *args): 
        this = _openframeworks.new_ofBoxPrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofBoxPrimitive
    __del__ = lambda self : None;
    def set(self, *args): return _openframeworks.ofBoxPrimitive_set(self, *args)
    def setWidth(self, *args): return _openframeworks.ofBoxPrimitive_setWidth(self, *args)
    def setHeight(self, *args): return _openframeworks.ofBoxPrimitive_setHeight(self, *args)
    def setDepth(self, *args): return _openframeworks.ofBoxPrimitive_setDepth(self, *args)
    def resizeToTexture(self, *args): return _openframeworks.ofBoxPrimitive_resizeToTexture(self, *args)
    def getSideIndices(self, *args): return _openframeworks.ofBoxPrimitive_getSideIndices(self, *args)
    def getSideMesh(self, *args): return _openframeworks.ofBoxPrimitive_getSideMesh(self, *args)
    def setResolutionWidth(self, *args): return _openframeworks.ofBoxPrimitive_setResolutionWidth(self, *args)
    def setResolutionHeight(self, *args): return _openframeworks.ofBoxPrimitive_setResolutionHeight(self, *args)
    def setResolutionDepth(self, *args): return _openframeworks.ofBoxPrimitive_setResolutionDepth(self, *args)
    def setResolution(self, *args): return _openframeworks.ofBoxPrimitive_setResolution(self, *args)
    def setMode(self, *args): return _openframeworks.ofBoxPrimitive_setMode(self, *args)
    def setSideColor(self, *args): return _openframeworks.ofBoxPrimitive_setSideColor(self, *args)
    def getResolutionWidth(self): return _openframeworks.ofBoxPrimitive_getResolutionWidth(self)
    def getResolutionHeight(self): return _openframeworks.ofBoxPrimitive_getResolutionHeight(self)
    def getResolutionDepth(self): return _openframeworks.ofBoxPrimitive_getResolutionDepth(self)
    def getResolution(self): return _openframeworks.ofBoxPrimitive_getResolution(self)
    def getWidth(self): return _openframeworks.ofBoxPrimitive_getWidth(self)
    def getHeight(self): return _openframeworks.ofBoxPrimitive_getHeight(self)
    def getDepth(self): return _openframeworks.ofBoxPrimitive_getDepth(self)
    def getSize(self): return _openframeworks.ofBoxPrimitive_getSize(self)
ofBoxPrimitive_swigregister = _openframeworks.ofBoxPrimitive_swigregister
ofBoxPrimitive_swigregister(ofBoxPrimitive)


def ofSetupOpenGL(*args):
  return _openframeworks.ofSetupOpenGL(*args)
ofSetupOpenGL = _openframeworks.ofSetupOpenGL

def ofRunApp(OFSA=None):
  return _openframeworks.ofRunApp(OFSA)
ofRunApp = _openframeworks.ofRunApp

def ofGetAppPtr():
  return _openframeworks.ofGetAppPtr()
ofGetAppPtr = _openframeworks.ofGetAppPtr

def ofExit(status=0):
  return _openframeworks.ofExit(status)
ofExit = _openframeworks.ofExit

def ofGetFrameRate():
  return _openframeworks.ofGetFrameRate()
ofGetFrameRate = _openframeworks.ofGetFrameRate

def ofGetTargetFrameRate():
  return _openframeworks.ofGetTargetFrameRate()
ofGetTargetFrameRate = _openframeworks.ofGetTargetFrameRate

def ofSetFrameRate(*args):
  return _openframeworks.ofSetFrameRate(*args)
ofSetFrameRate = _openframeworks.ofSetFrameRate

def ofSleepMillis(*args):
  return _openframeworks.ofSleepMillis(*args)
ofSleepMillis = _openframeworks.ofSleepMillis

def ofGetLastFrameTime():
  return _openframeworks.ofGetLastFrameTime()
ofGetLastFrameTime = _openframeworks.ofGetLastFrameTime

def ofSetOrientation(*args):
  return _openframeworks.ofSetOrientation(*args)
ofSetOrientation = _openframeworks.ofSetOrientation

def ofGetOrientation():
  return _openframeworks.ofGetOrientation()
ofGetOrientation = _openframeworks.ofGetOrientation

def ofHideCursor():
  return _openframeworks.ofHideCursor()
ofHideCursor = _openframeworks.ofHideCursor

def ofShowCursor():
  return _openframeworks.ofShowCursor()
ofShowCursor = _openframeworks.ofShowCursor

def ofGetWindowPositionX():
  return _openframeworks.ofGetWindowPositionX()
ofGetWindowPositionX = _openframeworks.ofGetWindowPositionX

def ofGetWindowPositionY():
  return _openframeworks.ofGetWindowPositionY()
ofGetWindowPositionY = _openframeworks.ofGetWindowPositionY

def ofGetScreenWidth():
  return _openframeworks.ofGetScreenWidth()
ofGetScreenWidth = _openframeworks.ofGetScreenWidth

def ofGetScreenHeight():
  return _openframeworks.ofGetScreenHeight()
ofGetScreenHeight = _openframeworks.ofGetScreenHeight

def ofGetWindowMode():
  return _openframeworks.ofGetWindowMode()
ofGetWindowMode = _openframeworks.ofGetWindowMode

def ofGetWidth():
  return _openframeworks.ofGetWidth()
ofGetWidth = _openframeworks.ofGetWidth

def ofGetHeight():
  return _openframeworks.ofGetHeight()
ofGetHeight = _openframeworks.ofGetHeight

def ofGetWindowWidth():
  return _openframeworks.ofGetWindowWidth()
ofGetWindowWidth = _openframeworks.ofGetWindowWidth

def ofGetWindowHeight():
  return _openframeworks.ofGetWindowHeight()
ofGetWindowHeight = _openframeworks.ofGetWindowHeight

def ofDoesHWOrientation():
  return _openframeworks.ofDoesHWOrientation()
ofDoesHWOrientation = _openframeworks.ofDoesHWOrientation

def ofGetWindowSize():
  return _openframeworks.ofGetWindowSize()
ofGetWindowSize = _openframeworks.ofGetWindowSize

def ofGetWindowRect():
  return _openframeworks.ofGetWindowRect()
ofGetWindowRect = _openframeworks.ofGetWindowRect

def ofGetWindowPtr():
  return _openframeworks.ofGetWindowPtr()
ofGetWindowPtr = _openframeworks.ofGetWindowPtr

def ofSetWindowPosition(*args):
  return _openframeworks.ofSetWindowPosition(*args)
ofSetWindowPosition = _openframeworks.ofSetWindowPosition

def ofSetWindowShape(*args):
  return _openframeworks.ofSetWindowShape(*args)
ofSetWindowShape = _openframeworks.ofSetWindowShape

def ofSetWindowTitle(*args):
  return _openframeworks.ofSetWindowTitle(*args)
ofSetWindowTitle = _openframeworks.ofSetWindowTitle

def ofEnableSetupScreen():
  return _openframeworks.ofEnableSetupScreen()
ofEnableSetupScreen = _openframeworks.ofEnableSetupScreen

def ofDisableSetupScreen():
  return _openframeworks.ofDisableSetupScreen()
ofDisableSetupScreen = _openframeworks.ofDisableSetupScreen

def ofSetFullscreen(*args):
  return _openframeworks.ofSetFullscreen(*args)
ofSetFullscreen = _openframeworks.ofSetFullscreen

def ofToggleFullscreen():
  return _openframeworks.ofToggleFullscreen()
ofToggleFullscreen = _openframeworks.ofToggleFullscreen

def ofSetVerticalSync(*args):
  return _openframeworks.ofSetVerticalSync(*args)
ofSetVerticalSync = _openframeworks.ofSetVerticalSync
FIRMATA_MAJOR_VERSION = _openframeworks.FIRMATA_MAJOR_VERSION
FIRMATA_MINOR_VERSION = _openframeworks.FIRMATA_MINOR_VERSION
FIRMATA_MAX_DATA_BYTES = _openframeworks.FIRMATA_MAX_DATA_BYTES
FIRMATA_DIGITAL_MESSAGE = _openframeworks.FIRMATA_DIGITAL_MESSAGE
FIRMATA_ANALOG_MESSAGE = _openframeworks.FIRMATA_ANALOG_MESSAGE
FIRMATA_REPORT_ANALOG = _openframeworks.FIRMATA_REPORT_ANALOG
FIRMATA_REPORT_DIGITAL = _openframeworks.FIRMATA_REPORT_DIGITAL
FIRMATA_SET_PIN_MODE = _openframeworks.FIRMATA_SET_PIN_MODE
FIRMATA_REPORT_VERSION = _openframeworks.FIRMATA_REPORT_VERSION
FIRMATA_SYSTEM_RESET = _openframeworks.FIRMATA_SYSTEM_RESET
FIRMATA_START_SYSEX = _openframeworks.FIRMATA_START_SYSEX
FIRMATA_END_SYSEX = _openframeworks.FIRMATA_END_SYSEX
FIRMATA_INPUT = _openframeworks.FIRMATA_INPUT
FIRMATA_OUTPUT = _openframeworks.FIRMATA_OUTPUT
FIRMATA_ANALOG = _openframeworks.FIRMATA_ANALOG
FIRMATA_PWM = _openframeworks.FIRMATA_PWM
FIRMATA_SERVO = _openframeworks.FIRMATA_SERVO
SHIFT = _openframeworks.SHIFT
I2C = _openframeworks.I2C
TOTAL_PIN_MODES = _openframeworks.TOTAL_PIN_MODES
FIRMATA_SYSEX_SERVO_CONFIG = _openframeworks.FIRMATA_SYSEX_SERVO_CONFIG
FIRMATA_SYSEX_FIRMATA_STRING = _openframeworks.FIRMATA_SYSEX_FIRMATA_STRING
SHIFT_DATA = _openframeworks.SHIFT_DATA
I2C_REQUEST = _openframeworks.I2C_REQUEST
I2C_REPLY = _openframeworks.I2C_REPLY
I2C_CONFIG = _openframeworks.I2C_CONFIG
EXTENDED_ANALOG = _openframeworks.EXTENDED_ANALOG
PIN_STATE_QUERY = _openframeworks.PIN_STATE_QUERY
PIN_STATE_RESPONSE = _openframeworks.PIN_STATE_RESPONSE
CAPABILITY_QUERY = _openframeworks.CAPABILITY_QUERY
CAPABILITY_RESPONSE = _openframeworks.CAPABILITY_RESPONSE
ANALOG_MAPPING_QUERY = _openframeworks.ANALOG_MAPPING_QUERY
ANALOG_MAPPING_RESPONSE = _openframeworks.ANALOG_MAPPING_RESPONSE
FIRMATA_SYSEX_REPORT_FIRMWARE = _openframeworks.FIRMATA_SYSEX_REPORT_FIRMWARE
SAMPLING_INTERVAL = _openframeworks.SAMPLING_INTERVAL
FIRMATA_SYSEX_NON_REALTIME = _openframeworks.FIRMATA_SYSEX_NON_REALTIME
FIRMATA_SYSEX_REALTIME = _openframeworks.FIRMATA_SYSEX_REALTIME
ARD_TOTAL_DIGITAL_PINS = _openframeworks.ARD_TOTAL_DIGITAL_PINS
ARD_TOTAL_ANALOG_PINS = _openframeworks.ARD_TOTAL_ANALOG_PINS
ARD_TOTAL_PORTS = _openframeworks.ARD_TOTAL_PORTS
ARD_INPUT = _openframeworks.ARD_INPUT
ARD_OUTPUT = _openframeworks.ARD_OUTPUT
ARD_ANALOG = _openframeworks.ARD_ANALOG
ARD_PWM = _openframeworks.ARD_PWM
ARD_SERVO = _openframeworks.ARD_SERVO
ARD_HIGH = _openframeworks.ARD_HIGH
ARD_LOW = _openframeworks.ARD_LOW
ARD_ON = _openframeworks.ARD_ON
ARD_OFF = _openframeworks.ARD_OFF
SYSEX_SERVO_ATTACH = _openframeworks.SYSEX_SERVO_ATTACH
SYSEX_SERVO_DETACH = _openframeworks.SYSEX_SERVO_DETACH
SYSEX_SERVO_WRITE = _openframeworks.SYSEX_SERVO_WRITE
OF_ARDUINO_DELAY_LENGTH = _openframeworks.OF_ARDUINO_DELAY_LENGTH
FIRMWARE2_2 = _openframeworks.FIRMWARE2_2
FIRMWARE2_3 = _openframeworks.FIRMWARE2_3
class ofArduino(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofArduino, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofArduino, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofArduino()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofArduino
    __del__ = lambda self : None;
    def connect(self, *args): return _openframeworks.ofArduino_connect(self, *args)
    def disconnect(self): return _openframeworks.ofArduino_disconnect(self)
    def isArduinoReady(self): return _openframeworks.ofArduino_isArduinoReady(self)
    def setUseDelay(self, *args): return _openframeworks.ofArduino_setUseDelay(self, *args)
    def update(self): return _openframeworks.ofArduino_update(self)
    def isInitialized(self): return _openframeworks.ofArduino_isInitialized(self)
    def setDigitalHistoryLength(self, *args): return _openframeworks.ofArduino_setDigitalHistoryLength(self, *args)
    def setAnalogHistoryLength(self, *args): return _openframeworks.ofArduino_setAnalogHistoryLength(self, *args)
    def setStringHistoryLength(self, *args): return _openframeworks.ofArduino_setStringHistoryLength(self, *args)
    def setSysExHistoryLength(self, *args): return _openframeworks.ofArduino_setSysExHistoryLength(self, *args)
    def sendDigitalPinMode(self, *args): return _openframeworks.ofArduino_sendDigitalPinMode(self, *args)
    def sendAnalogPinReporting(self, *args): return _openframeworks.ofArduino_sendAnalogPinReporting(self, *args)
    def sendDigital(self, *args): return _openframeworks.ofArduino_sendDigital(self, *args)
    def sendPwm(self, *args): return _openframeworks.ofArduino_sendPwm(self, *args)
    def sendSysEx(self, *args): return _openframeworks.ofArduino_sendSysEx(self, *args)
    def sendString(self, *args): return _openframeworks.ofArduino_sendString(self, *args)
    def sendProtocolVersionRequest(self): return _openframeworks.ofArduino_sendProtocolVersionRequest(self)
    def sendFirmwareVersionRequest(self): return _openframeworks.ofArduino_sendFirmwareVersionRequest(self)
    def sendReset(self): return _openframeworks.ofArduino_sendReset(self)
    def sendSysExBegin(self): return _openframeworks.ofArduino_sendSysExBegin(self)
    def sendSysExEnd(self): return _openframeworks.ofArduino_sendSysExEnd(self)
    def sendByte(self, *args): return _openframeworks.ofArduino_sendByte(self, *args)
    def sendValueAsTwo7bitBytes(self, *args): return _openframeworks.ofArduino_sendValueAsTwo7bitBytes(self, *args)
    def getPwm(self, *args): return _openframeworks.ofArduino_getPwm(self, *args)
    def getDigital(self, *args): return _openframeworks.ofArduino_getDigital(self, *args)
    def getAnalog(self, *args): return _openframeworks.ofArduino_getAnalog(self, *args)
    def getSysEx(self): return _openframeworks.ofArduino_getSysEx(self)
    def getString(self): return _openframeworks.ofArduino_getString(self)
    def getMajorProtocolVersion(self): return _openframeworks.ofArduino_getMajorProtocolVersion(self)
    def getMinorProtocolVersion(self): return _openframeworks.ofArduino_getMinorProtocolVersion(self)
    def getMajorFirmwareVersion(self): return _openframeworks.ofArduino_getMajorFirmwareVersion(self)
    def getMinorFirmwareVersion(self): return _openframeworks.ofArduino_getMinorFirmwareVersion(self)
    def getFirmwareName(self): return _openframeworks.ofArduino_getFirmwareName(self)
    def getDigitalHistory(self, *args): return _openframeworks.ofArduino_getDigitalHistory(self, *args)
    def getAnalogHistory(self, *args): return _openframeworks.ofArduino_getAnalogHistory(self, *args)
    def getSysExHistory(self): return _openframeworks.ofArduino_getSysExHistory(self)
    def getStringHistory(self): return _openframeworks.ofArduino_getStringHistory(self)
    def getDigitalPinMode(self, *args): return _openframeworks.ofArduino_getDigitalPinMode(self, *args)
    def getAnalogPinReporting(self, *args): return _openframeworks.ofArduino_getAnalogPinReporting(self, *args)
    def getValueFromTwo7bitBytes(self, *args): return _openframeworks.ofArduino_getValueFromTwo7bitBytes(self, *args)
    __swig_setmethods__["EDigitalPinChanged"] = _openframeworks.ofArduino_EDigitalPinChanged_set
    __swig_getmethods__["EDigitalPinChanged"] = _openframeworks.ofArduino_EDigitalPinChanged_get
    if _newclass:EDigitalPinChanged = _swig_property(_openframeworks.ofArduino_EDigitalPinChanged_get, _openframeworks.ofArduino_EDigitalPinChanged_set)
    __swig_setmethods__["EAnalogPinChanged"] = _openframeworks.ofArduino_EAnalogPinChanged_set
    __swig_getmethods__["EAnalogPinChanged"] = _openframeworks.ofArduino_EAnalogPinChanged_get
    if _newclass:EAnalogPinChanged = _swig_property(_openframeworks.ofArduino_EAnalogPinChanged_get, _openframeworks.ofArduino_EAnalogPinChanged_set)
    __swig_setmethods__["ESysExReceived"] = _openframeworks.ofArduino_ESysExReceived_set
    __swig_getmethods__["ESysExReceived"] = _openframeworks.ofArduino_ESysExReceived_get
    if _newclass:ESysExReceived = _swig_property(_openframeworks.ofArduino_ESysExReceived_get, _openframeworks.ofArduino_ESysExReceived_set)
    __swig_setmethods__["EProtocolVersionReceived"] = _openframeworks.ofArduino_EProtocolVersionReceived_set
    __swig_getmethods__["EProtocolVersionReceived"] = _openframeworks.ofArduino_EProtocolVersionReceived_get
    if _newclass:EProtocolVersionReceived = _swig_property(_openframeworks.ofArduino_EProtocolVersionReceived_get, _openframeworks.ofArduino_EProtocolVersionReceived_set)
    __swig_setmethods__["EFirmwareVersionReceived"] = _openframeworks.ofArduino_EFirmwareVersionReceived_set
    __swig_getmethods__["EFirmwareVersionReceived"] = _openframeworks.ofArduino_EFirmwareVersionReceived_get
    if _newclass:EFirmwareVersionReceived = _swig_property(_openframeworks.ofArduino_EFirmwareVersionReceived_get, _openframeworks.ofArduino_EFirmwareVersionReceived_set)
    __swig_setmethods__["EInitialized"] = _openframeworks.ofArduino_EInitialized_set
    __swig_getmethods__["EInitialized"] = _openframeworks.ofArduino_EInitialized_get
    if _newclass:EInitialized = _swig_property(_openframeworks.ofArduino_EInitialized_get, _openframeworks.ofArduino_EInitialized_set)
    __swig_setmethods__["EStringReceived"] = _openframeworks.ofArduino_EStringReceived_set
    __swig_getmethods__["EStringReceived"] = _openframeworks.ofArduino_EStringReceived_get
    if _newclass:EStringReceived = _swig_property(_openframeworks.ofArduino_EStringReceived_get, _openframeworks.ofArduino_EStringReceived_set)
    def sendServo(self, *args): return _openframeworks.ofArduino_sendServo(self, *args)
    def sendServoAttach(self, *args): return _openframeworks.ofArduino_sendServoAttach(self, *args)
    def sendServoDetach(self, *args): return _openframeworks.ofArduino_sendServoDetach(self, *args)
    def getServo(self, *args): return _openframeworks.ofArduino_getServo(self, *args)
ofArduino_swigregister = _openframeworks.ofArduino_swigregister
ofArduino_swigregister(ofArduino)

class ofSerial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofSerial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofSerial, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofSerial()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofSerial
    __del__ = lambda self : None;
    def listDevices(self): return _openframeworks.ofSerial_listDevices(self)
    def enumerateDevices(self): return _openframeworks.ofSerial_enumerateDevices(self)
    def getDeviceList(self): return _openframeworks.ofSerial_getDeviceList(self)
    def close(self): return _openframeworks.ofSerial_close(self)
    def setup(self, *args): return _openframeworks.ofSerial_setup(self, *args)
    def readBytes(self, *args): return _openframeworks.ofSerial_readBytes(self, *args)
    def writeBytes(self, *args): return _openframeworks.ofSerial_writeBytes(self, *args)
    def writeByte(self, *args): return _openframeworks.ofSerial_writeByte(self, *args)
    def readByte(self): return _openframeworks.ofSerial_readByte(self)
    def flush(self, flushIn=True, flushOut=True): return _openframeworks.ofSerial_flush(self, flushIn, flushOut)
    def available(self): return _openframeworks.ofSerial_available(self)
    def drain(self): return _openframeworks.ofSerial_drain(self)
    def isInitialized(self): return _openframeworks.ofSerial_isInitialized(self)
ofSerial_swigregister = _openframeworks.ofSerial_swigregister
ofSerial_swigregister(ofSerial)

OF_MAX_LIGHTS = _openframeworks.OF_MAX_LIGHTS
OF_LIGHT_POINT = _openframeworks.OF_LIGHT_POINT
OF_LIGHT_SPOT = _openframeworks.OF_LIGHT_SPOT
OF_LIGHT_DIRECTIONAL = _openframeworks.OF_LIGHT_DIRECTIONAL

def ofEnableLighting():
  return _openframeworks.ofEnableLighting()
ofEnableLighting = _openframeworks.ofEnableLighting

def ofDisableLighting():
  return _openframeworks.ofDisableLighting()
ofDisableLighting = _openframeworks.ofDisableLighting

def ofEnableSeparateSpecularLight():
  return _openframeworks.ofEnableSeparateSpecularLight()
ofEnableSeparateSpecularLight = _openframeworks.ofEnableSeparateSpecularLight

def ofDisableSeparateSpecularLight():
  return _openframeworks.ofDisableSeparateSpecularLight()
ofDisableSeparateSpecularLight = _openframeworks.ofDisableSeparateSpecularLight

def ofGetLightingEnabled():
  return _openframeworks.ofGetLightingEnabled()
ofGetLightingEnabled = _openframeworks.ofGetLightingEnabled

def ofSetSmoothLighting(*args):
  return _openframeworks.ofSetSmoothLighting(*args)
ofSetSmoothLighting = _openframeworks.ofSetSmoothLighting

def ofSetGlobalAmbientColor(*args):
  return _openframeworks.ofSetGlobalAmbientColor(*args)
ofSetGlobalAmbientColor = _openframeworks.ofSetGlobalAmbientColor
class ofLight(ofNode):
    __swig_setmethods__ = {}
    for _s in [ofNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofLight, name, value)
    __swig_getmethods__ = {}
    for _s in [ofNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofLight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofLight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofLight
    __del__ = lambda self : None;
    def destroy(self): return _openframeworks.ofLight_destroy(self)
    def setup(self): return _openframeworks.ofLight_setup(self)
    def enable(self): return _openframeworks.ofLight_enable(self)
    def disable(self): return _openframeworks.ofLight_disable(self)
    def getIsEnabled(self): return _openframeworks.ofLight_getIsEnabled(self)
    def setDirectional(self): return _openframeworks.ofLight_setDirectional(self)
    def getIsDirectional(self): return _openframeworks.ofLight_getIsDirectional(self)
    def setSpotlight(self, spotCutOff=45., exponent=0.): return _openframeworks.ofLight_setSpotlight(self, spotCutOff, exponent)
    def getIsSpotlight(self): return _openframeworks.ofLight_getIsSpotlight(self)
    def setSpotlightCutOff(self, *args): return _openframeworks.ofLight_setSpotlightCutOff(self, *args)
    def getSpotlightCutOff(self): return _openframeworks.ofLight_getSpotlightCutOff(self)
    def setSpotConcentration(self, *args): return _openframeworks.ofLight_setSpotConcentration(self, *args)
    def getSpotConcentration(self): return _openframeworks.ofLight_getSpotConcentration(self)
    def setPointLight(self): return _openframeworks.ofLight_setPointLight(self)
    def getIsPointLight(self): return _openframeworks.ofLight_getIsPointLight(self)
    def setAttenuation(self, constant=1., linear=0., quadratic=0.): return _openframeworks.ofLight_setAttenuation(self, constant, linear, quadratic)
    def getAttenuationConstant(self): return _openframeworks.ofLight_getAttenuationConstant(self)
    def getAttenuationLinear(self): return _openframeworks.ofLight_getAttenuationLinear(self)
    def getAttenuationQuadratic(self): return _openframeworks.ofLight_getAttenuationQuadratic(self)
    def getType(self): return _openframeworks.ofLight_getType(self)
    def setAmbientColor(self, *args): return _openframeworks.ofLight_setAmbientColor(self, *args)
    def setDiffuseColor(self, *args): return _openframeworks.ofLight_setDiffuseColor(self, *args)
    def setSpecularColor(self, *args): return _openframeworks.ofLight_setSpecularColor(self, *args)
    def getAmbientColor(self): return _openframeworks.ofLight_getAmbientColor(self)
    def getDiffuseColor(self): return _openframeworks.ofLight_getDiffuseColor(self)
    def getSpecularColor(self): return _openframeworks.ofLight_getSpecularColor(self)
    def getLightID(self): return _openframeworks.ofLight_getLightID(self)
ofLight_swigregister = _openframeworks.ofLight_swigregister
ofLight_swigregister(ofLight)

class ofMaterial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofMaterial, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofMaterial()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofMaterial
    __del__ = lambda self : None;
    def setColors(self, *args): return _openframeworks.ofMaterial_setColors(self, *args)
    def setDiffuseColor(self, *args): return _openframeworks.ofMaterial_setDiffuseColor(self, *args)
    def setAmbientColor(self, *args): return _openframeworks.ofMaterial_setAmbientColor(self, *args)
    def setSpecularColor(self, *args): return _openframeworks.ofMaterial_setSpecularColor(self, *args)
    def setEmissiveColor(self, *args): return _openframeworks.ofMaterial_setEmissiveColor(self, *args)
    def setShininess(self, *args): return _openframeworks.ofMaterial_setShininess(self, *args)
    def getDiffuseColor(self): return _openframeworks.ofMaterial_getDiffuseColor(self)
    def getAmbientColor(self): return _openframeworks.ofMaterial_getAmbientColor(self)
    def getSpecularColor(self): return _openframeworks.ofMaterial_getSpecularColor(self)
    def getEmissiveColor(self): return _openframeworks.ofMaterial_getEmissiveColor(self)
    def getShininess(self): return _openframeworks.ofMaterial_getShininess(self)
    def begin(self): return _openframeworks.ofMaterial_begin(self)
    def end(self): return _openframeworks.ofMaterial_end(self)
ofMaterial_swigregister = _openframeworks.ofMaterial_swigregister
ofMaterial_swigregister(ofMaterial)

class ofShader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofShader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofShader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofShader
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _openframeworks.new_ofShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def load(self, *args): return _openframeworks.ofShader_load(self, *args)
    def setGeometryInputType(self, *args): return _openframeworks.ofShader_setGeometryInputType(self, *args)
    def setGeometryOutputType(self, *args): return _openframeworks.ofShader_setGeometryOutputType(self, *args)
    def setGeometryOutputCount(self, *args): return _openframeworks.ofShader_setGeometryOutputCount(self, *args)
    def getGeometryMaxOutputCount(self): return _openframeworks.ofShader_getGeometryMaxOutputCount(self)
    def unload(self): return _openframeworks.ofShader_unload(self)
    def isLoaded(self): return _openframeworks.ofShader_isLoaded(self)
    def begin(self): return _openframeworks.ofShader_begin(self)
    def end(self): return _openframeworks.ofShader_end(self)
    def setUniformTexture(self, *args): return _openframeworks.ofShader_setUniformTexture(self, *args)
    def setUniform1i(self, *args): return _openframeworks.ofShader_setUniform1i(self, *args)
    def setUniform2i(self, *args): return _openframeworks.ofShader_setUniform2i(self, *args)
    def setUniform3i(self, *args): return _openframeworks.ofShader_setUniform3i(self, *args)
    def setUniform4i(self, *args): return _openframeworks.ofShader_setUniform4i(self, *args)
    def setUniform1f(self, *args): return _openframeworks.ofShader_setUniform1f(self, *args)
    def setUniform2f(self, *args): return _openframeworks.ofShader_setUniform2f(self, *args)
    def setUniform3f(self, *args): return _openframeworks.ofShader_setUniform3f(self, *args)
    def setUniform4f(self, *args): return _openframeworks.ofShader_setUniform4f(self, *args)
    def setUniform1iv(self, *args): return _openframeworks.ofShader_setUniform1iv(self, *args)
    def setUniform2iv(self, *args): return _openframeworks.ofShader_setUniform2iv(self, *args)
    def setUniform3iv(self, *args): return _openframeworks.ofShader_setUniform3iv(self, *args)
    def setUniform4iv(self, *args): return _openframeworks.ofShader_setUniform4iv(self, *args)
    def setUniform1fv(self, *args): return _openframeworks.ofShader_setUniform1fv(self, *args)
    def setUniform2fv(self, *args): return _openframeworks.ofShader_setUniform2fv(self, *args)
    def setUniform3fv(self, *args): return _openframeworks.ofShader_setUniform3fv(self, *args)
    def setUniform4fv(self, *args): return _openframeworks.ofShader_setUniform4fv(self, *args)
    def setUniformMatrix4f(self, *args): return _openframeworks.ofShader_setUniformMatrix4f(self, *args)
    def getAttributeLocation(self, *args): return _openframeworks.ofShader_getAttributeLocation(self, *args)
    def setAttribute1s(self, *args): return _openframeworks.ofShader_setAttribute1s(self, *args)
    def setAttribute2s(self, *args): return _openframeworks.ofShader_setAttribute2s(self, *args)
    def setAttribute3s(self, *args): return _openframeworks.ofShader_setAttribute3s(self, *args)
    def setAttribute4s(self, *args): return _openframeworks.ofShader_setAttribute4s(self, *args)
    def setAttribute1f(self, *args): return _openframeworks.ofShader_setAttribute1f(self, *args)
    def setAttribute2f(self, *args): return _openframeworks.ofShader_setAttribute2f(self, *args)
    def setAttribute3f(self, *args): return _openframeworks.ofShader_setAttribute3f(self, *args)
    def setAttribute4f(self, *args): return _openframeworks.ofShader_setAttribute4f(self, *args)
    def setAttribute1d(self, *args): return _openframeworks.ofShader_setAttribute1d(self, *args)
    def setAttribute2d(self, *args): return _openframeworks.ofShader_setAttribute2d(self, *args)
    def setAttribute3d(self, *args): return _openframeworks.ofShader_setAttribute3d(self, *args)
    def setAttribute4d(self, *args): return _openframeworks.ofShader_setAttribute4d(self, *args)
    def setAttribute1fv(self, *args): return _openframeworks.ofShader_setAttribute1fv(self, *args)
    def setAttribute2fv(self, *args): return _openframeworks.ofShader_setAttribute2fv(self, *args)
    def setAttribute3fv(self, *args): return _openframeworks.ofShader_setAttribute3fv(self, *args)
    def setAttribute4fv(self, *args): return _openframeworks.ofShader_setAttribute4fv(self, *args)
    def bindAttribute(self, *args): return _openframeworks.ofShader_bindAttribute(self, *args)
    def printActiveUniforms(self): return _openframeworks.ofShader_printActiveUniforms(self)
    def printActiveAttributes(self): return _openframeworks.ofShader_printActiveAttributes(self)
    def setupShaderFromSource(self, *args): return _openframeworks.ofShader_setupShaderFromSource(self, *args)
    def setupShaderFromFile(self, *args): return _openframeworks.ofShader_setupShaderFromFile(self, *args)
    def linkProgram(self): return _openframeworks.ofShader_linkProgram(self)
    def bindDefaults(self): return _openframeworks.ofShader_bindDefaults(self)
    def getProgram(self): return _openframeworks.ofShader_getProgram(self)
    def getShader(self, *args): return _openframeworks.ofShader_getShader(self, *args)
    def __eq__(self, *args): return _openframeworks.ofShader___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofShader___ne__(self, *args)
    POSITION_ATTRIBUTE = _openframeworks.ofShader_POSITION_ATTRIBUTE
    COLOR_ATTRIBUTE = _openframeworks.ofShader_COLOR_ATTRIBUTE
    NORMAL_ATTRIBUTE = _openframeworks.ofShader_NORMAL_ATTRIBUTE
    TEXCOORD_ATTRIBUTE = _openframeworks.ofShader_TEXCOORD_ATTRIBUTE
    def getShaderSource(self, *args): return _openframeworks.ofShader_getShaderSource(self, *args)
ofShader_swigregister = _openframeworks.ofShader_swigregister
ofShader_swigregister(ofShader)

class ofVbo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVbo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofVbo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofVbo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofVbo
    __del__ = lambda self : None;
    def setMesh(self, *args): return _openframeworks.ofVbo_setMesh(self, *args)
    def setIndexData(self, *args): return _openframeworks.ofVbo_setIndexData(self, *args)
    def setVertexData(self, *args): return _openframeworks.ofVbo_setVertexData(self, *args)
    def setColorData(self, *args): return _openframeworks.ofVbo_setColorData(self, *args)
    def setNormalData(self, *args): return _openframeworks.ofVbo_setNormalData(self, *args)
    def setTexCoordData(self, *args): return _openframeworks.ofVbo_setTexCoordData(self, *args)
    def setAttributeData(self, *args): return _openframeworks.ofVbo_setAttributeData(self, *args)
    def updateMesh(self, *args): return _openframeworks.ofVbo_updateMesh(self, *args)
    def updateIndexData(self, *args): return _openframeworks.ofVbo_updateIndexData(self, *args)
    def updateVertexData(self, *args): return _openframeworks.ofVbo_updateVertexData(self, *args)
    def updateColorData(self, *args): return _openframeworks.ofVbo_updateColorData(self, *args)
    def updateNormalData(self, *args): return _openframeworks.ofVbo_updateNormalData(self, *args)
    def updateTexCoordData(self, *args): return _openframeworks.ofVbo_updateTexCoordData(self, *args)
    def updateAttributeData(self, *args): return _openframeworks.ofVbo_updateAttributeData(self, *args)
    def enableColors(self): return _openframeworks.ofVbo_enableColors(self)
    def enableNormals(self): return _openframeworks.ofVbo_enableNormals(self)
    def enableTexCoords(self): return _openframeworks.ofVbo_enableTexCoords(self)
    def enableIndices(self): return _openframeworks.ofVbo_enableIndices(self)
    def disableColors(self): return _openframeworks.ofVbo_disableColors(self)
    def disableNormals(self): return _openframeworks.ofVbo_disableNormals(self)
    def disableTexCoords(self): return _openframeworks.ofVbo_disableTexCoords(self)
    def disableIndices(self): return _openframeworks.ofVbo_disableIndices(self)
    def getVertId(self): return _openframeworks.ofVbo_getVertId(self)
    def getColorId(self): return _openframeworks.ofVbo_getColorId(self)
    def getNormalId(self): return _openframeworks.ofVbo_getNormalId(self)
    def getTexCoordId(self): return _openframeworks.ofVbo_getTexCoordId(self)
    def getIndexId(self): return _openframeworks.ofVbo_getIndexId(self)
    def getIsAllocated(self): return _openframeworks.ofVbo_getIsAllocated(self)
    def getUsingVerts(self): return _openframeworks.ofVbo_getUsingVerts(self)
    def getUsingColors(self): return _openframeworks.ofVbo_getUsingColors(self)
    def getUsingNormals(self): return _openframeworks.ofVbo_getUsingNormals(self)
    def getUsingTexCoords(self): return _openframeworks.ofVbo_getUsingTexCoords(self)
    def getUsingIndices(self): return _openframeworks.ofVbo_getUsingIndices(self)
    def draw(self, *args): return _openframeworks.ofVbo_draw(self, *args)
    def drawElements(self, *args): return _openframeworks.ofVbo_drawElements(self, *args)
    def drawInstanced(self, *args): return _openframeworks.ofVbo_drawInstanced(self, *args)
    def drawElementsInstanced(self, *args): return _openframeworks.ofVbo_drawElementsInstanced(self, *args)
    def bind(self): return _openframeworks.ofVbo_bind(self)
    def unbind(self): return _openframeworks.ofVbo_unbind(self)
    def clear(self): return _openframeworks.ofVbo_clear(self)
    def clearVertices(self): return _openframeworks.ofVbo_clearVertices(self)
    def clearNormals(self): return _openframeworks.ofVbo_clearNormals(self)
    def clearColors(self): return _openframeworks.ofVbo_clearColors(self)
    def clearTexCoords(self): return _openframeworks.ofVbo_clearTexCoords(self)
    def clearIndices(self): return _openframeworks.ofVbo_clearIndices(self)
    def getNumVertices(self): return _openframeworks.ofVbo_getNumVertices(self)
    def getNumIndices(self): return _openframeworks.ofVbo_getNumIndices(self)
    __swig_getmethods__["disableVAOs"] = lambda x: _openframeworks.ofVbo_disableVAOs
    if _newclass:disableVAOs = staticmethod(_openframeworks.ofVbo_disableVAOs)
    __swig_getmethods__["enableVAOs"] = lambda x: _openframeworks.ofVbo_enableVAOs
    if _newclass:enableVAOs = staticmethod(_openframeworks.ofVbo_enableVAOs)
ofVbo_swigregister = _openframeworks.ofVbo_swigregister
ofVbo_swigregister(ofVbo)

def ofVbo_disableVAOs():
  return _openframeworks.ofVbo_disableVAOs()
ofVbo_disableVAOs = _openframeworks.ofVbo_disableVAOs

def ofVbo_enableVAOs():
  return _openframeworks.ofVbo_enableVAOs()
ofVbo_enableVAOs = _openframeworks.ofVbo_enableVAOs

class ofVboMesh(ofMesh):
    __swig_setmethods__ = {}
    for _s in [ofMesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVboMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [ofMesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofVboMesh, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofVboMesh(*args)
        try: self.this.append(this)
        except: self.this = this
    def setUsage(self, *args): return _openframeworks.ofVboMesh_setUsage(self, *args)
    def draw(self, *args): return _openframeworks.ofVboMesh_draw(self, *args)
    def drawInstanced(self, *args): return _openframeworks.ofVboMesh_drawInstanced(self, *args)
    def getVbo(self): return _openframeworks.ofVboMesh_getVbo(self)
    __swig_destroy__ = _openframeworks.delete_ofVboMesh
    __del__ = lambda self : None;
ofVboMesh_swigregister = _openframeworks.ofVboMesh_swigregister
ofVboMesh_swigregister(ofVboMesh)

OF_INTERPOLATE_NEAREST_NEIGHBOR = _openframeworks.OF_INTERPOLATE_NEAREST_NEIGHBOR
OF_INTERPOLATE_BILINEAR = _openframeworks.OF_INTERPOLATE_BILINEAR
OF_INTERPOLATE_BICUBIC = _openframeworks.OF_INTERPOLATE_BICUBIC
class ofPixels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofPixels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofPixels, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofPixels
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _openframeworks.new_ofPixels(*args)
        try: self.this.append(this)
        except: self.this = this
    def allocate(self, *args): return _openframeworks.ofPixels_allocate(self, *args)
    def allocatePixelFormat(self, *args): return _openframeworks.ofPixels_allocatePixelFormat(self, *args)
    def allocateImageType(self, *args): return _openframeworks.ofPixels_allocateImageType(self, *args)
    def set(self, *args): return _openframeworks.ofPixels_set(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofPixels_setFromPixels(self, *args)
    def setFromPixelsImageType(self, *args): return _openframeworks.ofPixels_setFromPixelsImageType(self, *args)
    def setFromExternalPixels(self, *args): return _openframeworks.ofPixels_setFromExternalPixels(self, *args)
    def setFromAlignedPixels(self, *args): return _openframeworks.ofPixels_setFromAlignedPixels(self, *args)
    def swap(self, *args): return _openframeworks.ofPixels_swap(self, *args)
    def crop(self, *args): return _openframeworks.ofPixels_crop(self, *args)
    def cropTo(self, *args): return _openframeworks.ofPixels_cropTo(self, *args)
    def rotate90(self, *args): return _openframeworks.ofPixels_rotate90(self, *args)
    def rotate90To(self, *args): return _openframeworks.ofPixels_rotate90To(self, *args)
    def mirrorTo(self, *args): return _openframeworks.ofPixels_mirrorTo(self, *args)
    def mirror(self, *args): return _openframeworks.ofPixels_mirror(self, *args)
    def resize(self, *args): return _openframeworks.ofPixels_resize(self, *args)
    def resizeTo(self, *args): return _openframeworks.ofPixels_resizeTo(self, *args)
    def pasteInto(self, *args): return _openframeworks.ofPixels_pasteInto(self, *args)
    def swapRgb(self): return _openframeworks.ofPixels_swapRgb(self)
    def clear(self): return _openframeworks.ofPixels_clear(self)
    def getPixels(self, *args): return _openframeworks.ofPixels_getPixels(self, *args)
    def getPixelIndex(self, *args): return _openframeworks.ofPixels_getPixelIndex(self, *args)
    def getColor(self, *args): return _openframeworks.ofPixels_getColor(self, *args)
    def setColor(self, *args): return _openframeworks.ofPixels_setColor(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofPixels___getitem__(self, *args)
    def isAllocated(self): return _openframeworks.ofPixels_isAllocated(self)
    def getWidth(self): return _openframeworks.ofPixels_getWidth(self)
    def getHeight(self): return _openframeworks.ofPixels_getHeight(self)
    def getBytesPerPixel(self): return _openframeworks.ofPixels_getBytesPerPixel(self)
    def getBitsPerPixel(self): return _openframeworks.ofPixels_getBitsPerPixel(self)
    def getBytesPerChannel(self): return _openframeworks.ofPixels_getBytesPerChannel(self)
    def getBitsPerChannel(self): return _openframeworks.ofPixels_getBitsPerChannel(self)
    def getNumChannels(self): return _openframeworks.ofPixels_getNumChannels(self)
    def getChannel(self, *args): return _openframeworks.ofPixels_getChannel(self, *args)
    def setChannel(self, *args): return _openframeworks.ofPixels_setChannel(self, *args)
    def getImageType(self): return _openframeworks.ofPixels_getImageType(self)
    def setImageType(self, *args): return _openframeworks.ofPixels_setImageType(self, *args)
    def setNumChannels(self, *args): return _openframeworks.ofPixels_setNumChannels(self, *args)
    def size(self): return _openframeworks.ofPixels_size(self)
ofPixels_swigregister = _openframeworks.ofPixels_swigregister
ofPixels_swigregister(ofPixels)

class ofFloatPixels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofFloatPixels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofFloatPixels, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofFloatPixels
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _openframeworks.new_ofFloatPixels(*args)
        try: self.this.append(this)
        except: self.this = this
    def allocate(self, *args): return _openframeworks.ofFloatPixels_allocate(self, *args)
    def allocatePixelFormat(self, *args): return _openframeworks.ofFloatPixels_allocatePixelFormat(self, *args)
    def allocateImageType(self, *args): return _openframeworks.ofFloatPixels_allocateImageType(self, *args)
    def set(self, *args): return _openframeworks.ofFloatPixels_set(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofFloatPixels_setFromPixels(self, *args)
    def setFromPixelsImageType(self, *args): return _openframeworks.ofFloatPixels_setFromPixelsImageType(self, *args)
    def setFromExternalPixels(self, *args): return _openframeworks.ofFloatPixels_setFromExternalPixels(self, *args)
    def setFromAlignedPixels(self, *args): return _openframeworks.ofFloatPixels_setFromAlignedPixels(self, *args)
    def swap(self, *args): return _openframeworks.ofFloatPixels_swap(self, *args)
    def crop(self, *args): return _openframeworks.ofFloatPixels_crop(self, *args)
    def cropTo(self, *args): return _openframeworks.ofFloatPixels_cropTo(self, *args)
    def rotate90(self, *args): return _openframeworks.ofFloatPixels_rotate90(self, *args)
    def rotate90To(self, *args): return _openframeworks.ofFloatPixels_rotate90To(self, *args)
    def mirrorTo(self, *args): return _openframeworks.ofFloatPixels_mirrorTo(self, *args)
    def mirror(self, *args): return _openframeworks.ofFloatPixels_mirror(self, *args)
    def resize(self, *args): return _openframeworks.ofFloatPixels_resize(self, *args)
    def resizeTo(self, *args): return _openframeworks.ofFloatPixels_resizeTo(self, *args)
    def pasteInto(self, *args): return _openframeworks.ofFloatPixels_pasteInto(self, *args)
    def swapRgb(self): return _openframeworks.ofFloatPixels_swapRgb(self)
    def clear(self): return _openframeworks.ofFloatPixels_clear(self)
    def getPixels(self, *args): return _openframeworks.ofFloatPixels_getPixels(self, *args)
    def getPixelIndex(self, *args): return _openframeworks.ofFloatPixels_getPixelIndex(self, *args)
    def getColor(self, *args): return _openframeworks.ofFloatPixels_getColor(self, *args)
    def setColor(self, *args): return _openframeworks.ofFloatPixels_setColor(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofFloatPixels___getitem__(self, *args)
    def isAllocated(self): return _openframeworks.ofFloatPixels_isAllocated(self)
    def getWidth(self): return _openframeworks.ofFloatPixels_getWidth(self)
    def getHeight(self): return _openframeworks.ofFloatPixels_getHeight(self)
    def getBytesPerPixel(self): return _openframeworks.ofFloatPixels_getBytesPerPixel(self)
    def getBitsPerPixel(self): return _openframeworks.ofFloatPixels_getBitsPerPixel(self)
    def getBytesPerChannel(self): return _openframeworks.ofFloatPixels_getBytesPerChannel(self)
    def getBitsPerChannel(self): return _openframeworks.ofFloatPixels_getBitsPerChannel(self)
    def getNumChannels(self): return _openframeworks.ofFloatPixels_getNumChannels(self)
    def getChannel(self, *args): return _openframeworks.ofFloatPixels_getChannel(self, *args)
    def setChannel(self, *args): return _openframeworks.ofFloatPixels_setChannel(self, *args)
    def getImageType(self): return _openframeworks.ofFloatPixels_getImageType(self)
    def setImageType(self, *args): return _openframeworks.ofFloatPixels_setImageType(self, *args)
    def setNumChannels(self, *args): return _openframeworks.ofFloatPixels_setNumChannels(self, *args)
    def size(self): return _openframeworks.ofFloatPixels_size(self)
ofFloatPixels_swigregister = _openframeworks.ofFloatPixels_swigregister
ofFloatPixels_swigregister(ofFloatPixels)

class ofShortPixels(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofShortPixels, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofShortPixels, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofShortPixels
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _openframeworks.new_ofShortPixels(*args)
        try: self.this.append(this)
        except: self.this = this
    def allocate(self, *args): return _openframeworks.ofShortPixels_allocate(self, *args)
    def allocatePixelFormat(self, *args): return _openframeworks.ofShortPixels_allocatePixelFormat(self, *args)
    def allocateImageType(self, *args): return _openframeworks.ofShortPixels_allocateImageType(self, *args)
    def set(self, *args): return _openframeworks.ofShortPixels_set(self, *args)
    def setFromPixels(self, *args): return _openframeworks.ofShortPixels_setFromPixels(self, *args)
    def setFromPixelsImageType(self, *args): return _openframeworks.ofShortPixels_setFromPixelsImageType(self, *args)
    def setFromExternalPixels(self, *args): return _openframeworks.ofShortPixels_setFromExternalPixels(self, *args)
    def setFromAlignedPixels(self, *args): return _openframeworks.ofShortPixels_setFromAlignedPixels(self, *args)
    def swap(self, *args): return _openframeworks.ofShortPixels_swap(self, *args)
    def crop(self, *args): return _openframeworks.ofShortPixels_crop(self, *args)
    def cropTo(self, *args): return _openframeworks.ofShortPixels_cropTo(self, *args)
    def rotate90(self, *args): return _openframeworks.ofShortPixels_rotate90(self, *args)
    def rotate90To(self, *args): return _openframeworks.ofShortPixels_rotate90To(self, *args)
    def mirrorTo(self, *args): return _openframeworks.ofShortPixels_mirrorTo(self, *args)
    def mirror(self, *args): return _openframeworks.ofShortPixels_mirror(self, *args)
    def resize(self, *args): return _openframeworks.ofShortPixels_resize(self, *args)
    def resizeTo(self, *args): return _openframeworks.ofShortPixels_resizeTo(self, *args)
    def pasteInto(self, *args): return _openframeworks.ofShortPixels_pasteInto(self, *args)
    def swapRgb(self): return _openframeworks.ofShortPixels_swapRgb(self)
    def clear(self): return _openframeworks.ofShortPixels_clear(self)
    def getPixels(self, *args): return _openframeworks.ofShortPixels_getPixels(self, *args)
    def getPixelIndex(self, *args): return _openframeworks.ofShortPixels_getPixelIndex(self, *args)
    def getColor(self, *args): return _openframeworks.ofShortPixels_getColor(self, *args)
    def setColor(self, *args): return _openframeworks.ofShortPixels_setColor(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofShortPixels___getitem__(self, *args)
    def isAllocated(self): return _openframeworks.ofShortPixels_isAllocated(self)
    def getWidth(self): return _openframeworks.ofShortPixels_getWidth(self)
    def getHeight(self): return _openframeworks.ofShortPixels_getHeight(self)
    def getBytesPerPixel(self): return _openframeworks.ofShortPixels_getBytesPerPixel(self)
    def getBitsPerPixel(self): return _openframeworks.ofShortPixels_getBitsPerPixel(self)
    def getBytesPerChannel(self): return _openframeworks.ofShortPixels_getBytesPerChannel(self)
    def getBitsPerChannel(self): return _openframeworks.ofShortPixels_getBitsPerChannel(self)
    def getNumChannels(self): return _openframeworks.ofShortPixels_getNumChannels(self)
    def getChannel(self, *args): return _openframeworks.ofShortPixels_getChannel(self, *args)
    def setChannel(self, *args): return _openframeworks.ofShortPixels_setChannel(self, *args)
    def getImageType(self): return _openframeworks.ofShortPixels_getImageType(self)
    def setImageType(self, *args): return _openframeworks.ofShortPixels_setImageType(self, *args)
    def setNumChannels(self, *args): return _openframeworks.ofShortPixels_setNumChannels(self, *args)
    def size(self): return _openframeworks.ofShortPixels_size(self)
ofShortPixels_swigregister = _openframeworks.ofShortPixels_swigregister
ofShortPixels_swigregister(ofShortPixels)

class ofPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofPath, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofPath()
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _openframeworks.ofPath_clear(self)
    def newSubPath(self): return _openframeworks.ofPath_newSubPath(self)
    def close(self): return _openframeworks.ofPath_close(self)
    def lineTo(self, *args): return _openframeworks.ofPath_lineTo(self, *args)
    def moveTo(self, *args): return _openframeworks.ofPath_moveTo(self, *args)
    def curveTo(self, *args): return _openframeworks.ofPath_curveTo(self, *args)
    def bezierTo(self, *args): return _openframeworks.ofPath_bezierTo(self, *args)
    def quadBezierTo(self, *args): return _openframeworks.ofPath_quadBezierTo(self, *args)
    def arc(self, *args): return _openframeworks.ofPath_arc(self, *args)
    def arcNegative(self, *args): return _openframeworks.ofPath_arcNegative(self, *args)
    def triangle(self, *args): return _openframeworks.ofPath_triangle(self, *args)
    def circle(self, *args): return _openframeworks.ofPath_circle(self, *args)
    def ellipse(self, *args): return _openframeworks.ofPath_ellipse(self, *args)
    def rectangle(self, *args): return _openframeworks.ofPath_rectangle(self, *args)
    def rectRounded(self, *args): return _openframeworks.ofPath_rectRounded(self, *args)
    def setPolyWindingMode(self, *args): return _openframeworks.ofPath_setPolyWindingMode(self, *args)
    def setFilled(self, *args): return _openframeworks.ofPath_setFilled(self, *args)
    def setStrokeWidth(self, *args): return _openframeworks.ofPath_setStrokeWidth(self, *args)
    def setColor(self, *args): return _openframeworks.ofPath_setColor(self, *args)
    def setHexColor(self, *args): return _openframeworks.ofPath_setHexColor(self, *args)
    def setFillColor(self, *args): return _openframeworks.ofPath_setFillColor(self, *args)
    def setFillHexColor(self, *args): return _openframeworks.ofPath_setFillHexColor(self, *args)
    def setStrokeColor(self, *args): return _openframeworks.ofPath_setStrokeColor(self, *args)
    def setStrokeHexColor(self, *args): return _openframeworks.ofPath_setStrokeHexColor(self, *args)
    def getWindingMode(self): return _openframeworks.ofPath_getWindingMode(self)
    def isFilled(self): return _openframeworks.ofPath_isFilled(self)
    def getFillColor(self): return _openframeworks.ofPath_getFillColor(self)
    def getStrokeColor(self): return _openframeworks.ofPath_getStrokeColor(self)
    def getStrokeWidth(self): return _openframeworks.ofPath_getStrokeWidth(self)
    def hasOutline(self): return _openframeworks.ofPath_hasOutline(self)
    def draw(self, *args): return _openframeworks.ofPath_draw(self, *args)
    def getOutline(self): return _openframeworks.ofPath_getOutline(self)
    def getTessellation(self): return _openframeworks.ofPath_getTessellation(self)
    def simplify(self, tolerance=0.3): return _openframeworks.ofPath_simplify(self, tolerance)
    def flagShapeChanged(self): return _openframeworks.ofPath_flagShapeChanged(self)
    def hasChanged(self): return _openframeworks.ofPath_hasChanged(self)
    COMMANDS = _openframeworks.ofPath_COMMANDS
    POLYLINES = _openframeworks.ofPath_POLYLINES
    def setMode(self, *args): return _openframeworks.ofPath_setMode(self, *args)
    def getMode(self): return _openframeworks.ofPath_getMode(self)
    def setCurveResolution(self, *args): return _openframeworks.ofPath_setCurveResolution(self, *args)
    def setCircleResolution(self, *args): return _openframeworks.ofPath_setCircleResolution(self, *args)
    def getCircleResolution(self): return _openframeworks.ofPath_getCircleResolution(self)
    def setUseShapeColor(self, *args): return _openframeworks.ofPath_setUseShapeColor(self, *args)
    def getUseShapeColor(self): return _openframeworks.ofPath_getUseShapeColor(self)
    def tessellate(self): return _openframeworks.ofPath_tessellate(self)
    def translate(self, *args): return _openframeworks.ofPath_translate(self, *args)
    def rotate(self, *args): return _openframeworks.ofPath_rotate(self, *args)
    def scale(self, *args): return _openframeworks.ofPath_scale(self, *args)
    def getCommands(self, *args): return _openframeworks.ofPath_getCommands(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofPath
    __del__ = lambda self : None;
ofPath_swigregister = _openframeworks.ofPath_swigregister
ofPath_swigregister(ofPath)

class ofPolyline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofPolyline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofPolyline, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofPolyline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["fromRectangle"] = lambda x: _openframeworks.ofPolyline_fromRectangle
    if _newclass:fromRectangle = staticmethod(_openframeworks.ofPolyline_fromRectangle)
    def clear(self): return _openframeworks.ofPolyline_clear(self)
    def addVertex(self, *args): return _openframeworks.ofPolyline_addVertex(self, *args)
    def addVertices(self, *args): return _openframeworks.ofPolyline_addVertices(self, *args)
    def lineTo(self, *args): return _openframeworks.ofPolyline_lineTo(self, *args)
    def insertVertex(self, *args): return _openframeworks.ofPolyline_insertVertex(self, *args)
    def arc(self, *args): return _openframeworks.ofPolyline_arc(self, *args)
    def arcNegative(self, *args): return _openframeworks.ofPolyline_arcNegative(self, *args)
    def curveTo(self, *args): return _openframeworks.ofPolyline_curveTo(self, *args)
    def bezierTo(self, *args): return _openframeworks.ofPolyline_bezierTo(self, *args)
    def quadBezierTo(self, *args): return _openframeworks.ofPolyline_quadBezierTo(self, *args)
    def getSmoothed(self, *args): return _openframeworks.ofPolyline_getSmoothed(self, *args)
    def getResampledBySpacing(self, *args): return _openframeworks.ofPolyline_getResampledBySpacing(self, *args)
    def getResampledByCount(self, *args): return _openframeworks.ofPolyline_getResampledByCount(self, *args)
    def getBoundingBox(self): return _openframeworks.ofPolyline_getBoundingBox(self)
    def getClosestPoint(self, *args): return _openframeworks.ofPolyline_getClosestPoint(self, *args)
    def inside(self, *args): return _openframeworks.ofPolyline_inside(self, *args)
    def simplify(self, tolerance=0.3): return _openframeworks.ofPolyline_simplify(self, tolerance)
    def size(self): return _openframeworks.ofPolyline_size(self)
    def __getitem__(self, *args): return _openframeworks.ofPolyline___getitem__(self, *args)
    def resize(self, *args): return _openframeworks.ofPolyline_resize(self, *args)
    def setClosed(self, *args): return _openframeworks.ofPolyline_setClosed(self, *args)
    def isClosed(self): return _openframeworks.ofPolyline_isClosed(self)
    def close(self): return _openframeworks.ofPolyline_close(self)
    def hasChanged(self): return _openframeworks.ofPolyline_hasChanged(self)
    def flagHasChanged(self): return _openframeworks.ofPolyline_flagHasChanged(self)
    def getVertices(self, *args): return _openframeworks.ofPolyline_getVertices(self, *args)
    def getPerimeter(self): return _openframeworks.ofPolyline_getPerimeter(self)
    def getArea(self): return _openframeworks.ofPolyline_getArea(self)
    def getCentroid2D(self): return _openframeworks.ofPolyline_getCentroid2D(self)
    def draw(self): return _openframeworks.ofPolyline_draw(self)
    def setRightVector(self, *args): return _openframeworks.ofPolyline_setRightVector(self, *args)
    def getRightVector(self): return _openframeworks.ofPolyline_getRightVector(self)
    def getIndexAtLength(self, *args): return _openframeworks.ofPolyline_getIndexAtLength(self, *args)
    def getIndexAtPercent(self, *args): return _openframeworks.ofPolyline_getIndexAtPercent(self, *args)
    def getLengthAtIndex(self, *args): return _openframeworks.ofPolyline_getLengthAtIndex(self, *args)
    def getLengthAtIndexInterpolated(self, *args): return _openframeworks.ofPolyline_getLengthAtIndexInterpolated(self, *args)
    def getPointAtLength(self, *args): return _openframeworks.ofPolyline_getPointAtLength(self, *args)
    def getPointAtPercent(self, *args): return _openframeworks.ofPolyline_getPointAtPercent(self, *args)
    def getPointAtIndexInterpolated(self, *args): return _openframeworks.ofPolyline_getPointAtIndexInterpolated(self, *args)
    def getAngleAtIndex(self, *args): return _openframeworks.ofPolyline_getAngleAtIndex(self, *args)
    def getAngleAtIndexInterpolated(self, *args): return _openframeworks.ofPolyline_getAngleAtIndexInterpolated(self, *args)
    def getRotationAtIndex(self, *args): return _openframeworks.ofPolyline_getRotationAtIndex(self, *args)
    def getRotationAtIndexInterpolated(self, *args): return _openframeworks.ofPolyline_getRotationAtIndexInterpolated(self, *args)
    def getTangentAtIndex(self, *args): return _openframeworks.ofPolyline_getTangentAtIndex(self, *args)
    def getTangentAtIndexInterpolated(self, *args): return _openframeworks.ofPolyline_getTangentAtIndexInterpolated(self, *args)
    def getNormalAtIndex(self, *args): return _openframeworks.ofPolyline_getNormalAtIndex(self, *args)
    def getNormalAtIndexInterpolated(self, *args): return _openframeworks.ofPolyline_getNormalAtIndexInterpolated(self, *args)
    def getWrappedIndex(self, *args): return _openframeworks.ofPolyline_getWrappedIndex(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofPolyline
    __del__ = lambda self : None;
ofPolyline_swigregister = _openframeworks.ofPolyline_swigregister
ofPolyline_swigregister(ofPolyline)

def ofPolyline_fromRectangle(*args):
  return _openframeworks.ofPolyline_fromRectangle(*args)
ofPolyline_fromRectangle = _openframeworks.ofPolyline_fromRectangle

CIRC_RESOLUTION = _openframeworks.CIRC_RESOLUTION

def ofBeginSaveScreenAsPDF(*args):
  return _openframeworks.ofBeginSaveScreenAsPDF(*args)
ofBeginSaveScreenAsPDF = _openframeworks.ofBeginSaveScreenAsPDF

def ofEndSaveScreenAsPDF():
  return _openframeworks.ofEndSaveScreenAsPDF()
ofEndSaveScreenAsPDF = _openframeworks.ofEndSaveScreenAsPDF

def ofPushView():
  return _openframeworks.ofPushView()
ofPushView = _openframeworks.ofPushView

def ofPopView():
  return _openframeworks.ofPopView()
ofPopView = _openframeworks.ofPopView

def ofViewport(*args):
  return _openframeworks.ofViewport(*args)
ofViewport = _openframeworks.ofViewport

def ofSetupScreenPerspective(*args):
  return _openframeworks.ofSetupScreenPerspective(*args)
ofSetupScreenPerspective = _openframeworks.ofSetupScreenPerspective

def ofSetupScreenOrtho(*args):
  return _openframeworks.ofSetupScreenOrtho(*args)
ofSetupScreenOrtho = _openframeworks.ofSetupScreenOrtho

def ofGetCurrentViewport():
  return _openframeworks.ofGetCurrentViewport()
ofGetCurrentViewport = _openframeworks.ofGetCurrentViewport

def ofGetNativeViewport():
  return _openframeworks.ofGetNativeViewport()
ofGetNativeViewport = _openframeworks.ofGetNativeViewport

def ofGetViewportWidth():
  return _openframeworks.ofGetViewportWidth()
ofGetViewportWidth = _openframeworks.ofGetViewportWidth

def ofGetViewportHeight():
  return _openframeworks.ofGetViewportHeight()
ofGetViewportHeight = _openframeworks.ofGetViewportHeight

def ofOrientationToDegrees(*args):
  return _openframeworks.ofOrientationToDegrees(*args)
ofOrientationToDegrees = _openframeworks.ofOrientationToDegrees

def ofSetCoordHandedness(*args):
  return _openframeworks.ofSetCoordHandedness(*args)
ofSetCoordHandedness = _openframeworks.ofSetCoordHandedness

def ofGetCoordHandedness():
  return _openframeworks.ofGetCoordHandedness()
ofGetCoordHandedness = _openframeworks.ofGetCoordHandedness

def ofPushMatrix():
  return _openframeworks.ofPushMatrix()
ofPushMatrix = _openframeworks.ofPushMatrix

def ofPopMatrix():
  return _openframeworks.ofPopMatrix()
ofPopMatrix = _openframeworks.ofPopMatrix

def ofGetCurrentMatrix(*args):
  return _openframeworks.ofGetCurrentMatrix(*args)
ofGetCurrentMatrix = _openframeworks.ofGetCurrentMatrix

def ofGetCurrentOrientationMatrix():
  return _openframeworks.ofGetCurrentOrientationMatrix()
ofGetCurrentOrientationMatrix = _openframeworks.ofGetCurrentOrientationMatrix

def ofTranslate(*args):
  return _openframeworks.ofTranslate(*args)
ofTranslate = _openframeworks.ofTranslate

def ofScale(*args):
  return _openframeworks.ofScale(*args)
ofScale = _openframeworks.ofScale

def ofRotateX(*args):
  return _openframeworks.ofRotateX(*args)
ofRotateX = _openframeworks.ofRotateX

def ofRotateY(*args):
  return _openframeworks.ofRotateY(*args)
ofRotateY = _openframeworks.ofRotateY

def ofRotateZ(*args):
  return _openframeworks.ofRotateZ(*args)
ofRotateZ = _openframeworks.ofRotateZ

def ofRotate(*args):
  return _openframeworks.ofRotate(*args)
ofRotate = _openframeworks.ofRotate

def ofLoadIdentityMatrix():
  return _openframeworks.ofLoadIdentityMatrix()
ofLoadIdentityMatrix = _openframeworks.ofLoadIdentityMatrix

def ofLoadMatrix(*args):
  return _openframeworks.ofLoadMatrix(*args)
ofLoadMatrix = _openframeworks.ofLoadMatrix

def ofMultMatrix(*args):
  return _openframeworks.ofMultMatrix(*args)
ofMultMatrix = _openframeworks.ofMultMatrix

def ofSetMatrixMode(*args):
  return _openframeworks.ofSetMatrixMode(*args)
ofSetMatrixMode = _openframeworks.ofSetMatrixMode

def ofSetupGraphicDefaults():
  return _openframeworks.ofSetupGraphicDefaults()
ofSetupGraphicDefaults = _openframeworks.ofSetupGraphicDefaults

def ofSetupScreen():
  return _openframeworks.ofSetupScreen()
ofSetupScreen = _openframeworks.ofSetupScreen

def ofGetRectMode():
  return _openframeworks.ofGetRectMode()
ofGetRectMode = _openframeworks.ofGetRectMode

def ofSetCircleResolution(*args):
  return _openframeworks.ofSetCircleResolution(*args)
ofSetCircleResolution = _openframeworks.ofSetCircleResolution

def ofSetCurveResolution(*args):
  return _openframeworks.ofSetCurveResolution(*args)
ofSetCurveResolution = _openframeworks.ofSetCurveResolution

def ofNoFill():
  return _openframeworks.ofNoFill()
ofNoFill = _openframeworks.ofNoFill

def ofFill():
  return _openframeworks.ofFill()
ofFill = _openframeworks.ofFill

def ofGetFill():
  return _openframeworks.ofGetFill()
ofGetFill = _openframeworks.ofGetFill

def ofSetLineWidth(*args):
  return _openframeworks.ofSetLineWidth(*args)
ofSetLineWidth = _openframeworks.ofSetLineWidth

def ofSetDepthTest(*args):
  return _openframeworks.ofSetDepthTest(*args)
ofSetDepthTest = _openframeworks.ofSetDepthTest

def ofEnableDepthTest():
  return _openframeworks.ofEnableDepthTest()
ofEnableDepthTest = _openframeworks.ofEnableDepthTest

def ofDisableDepthTest():
  return _openframeworks.ofDisableDepthTest()
ofDisableDepthTest = _openframeworks.ofDisableDepthTest

def ofSetColor(*args):
  return _openframeworks.ofSetColor(*args)
ofSetColor = _openframeworks.ofSetColor

def ofSetHexColor(*args):
  return _openframeworks.ofSetHexColor(*args)
ofSetHexColor = _openframeworks.ofSetHexColor

def ofEnableBlendMode(*args):
  return _openframeworks.ofEnableBlendMode(*args)
ofEnableBlendMode = _openframeworks.ofEnableBlendMode

def ofDisableBlendMode():
  return _openframeworks.ofDisableBlendMode()
ofDisableBlendMode = _openframeworks.ofDisableBlendMode

def ofEnablePointSprites():
  return _openframeworks.ofEnablePointSprites()
ofEnablePointSprites = _openframeworks.ofEnablePointSprites

def ofDisablePointSprites():
  return _openframeworks.ofDisablePointSprites()
ofDisablePointSprites = _openframeworks.ofDisablePointSprites

def ofEnableAlphaBlending():
  return _openframeworks.ofEnableAlphaBlending()
ofEnableAlphaBlending = _openframeworks.ofEnableAlphaBlending

def ofDisableAlphaBlending():
  return _openframeworks.ofDisableAlphaBlending()
ofDisableAlphaBlending = _openframeworks.ofDisableAlphaBlending

def ofEnableSmoothing():
  return _openframeworks.ofEnableSmoothing()
ofEnableSmoothing = _openframeworks.ofEnableSmoothing

def ofDisableSmoothing():
  return _openframeworks.ofDisableSmoothing()
ofDisableSmoothing = _openframeworks.ofDisableSmoothing

def ofEnableAntiAliasing():
  return _openframeworks.ofEnableAntiAliasing()
ofEnableAntiAliasing = _openframeworks.ofEnableAntiAliasing

def ofDisableAntiAliasing():
  return _openframeworks.ofDisableAntiAliasing()
ofDisableAntiAliasing = _openframeworks.ofDisableAntiAliasing

def ofGetStyle():
  return _openframeworks.ofGetStyle()
ofGetStyle = _openframeworks.ofGetStyle

def ofSetStyle(*args):
  return _openframeworks.ofSetStyle(*args)
ofSetStyle = _openframeworks.ofSetStyle

def ofPushStyle():
  return _openframeworks.ofPushStyle()
ofPushStyle = _openframeworks.ofPushStyle

def ofPopStyle():
  return _openframeworks.ofPopStyle()
ofPopStyle = _openframeworks.ofPopStyle

def ofSetPolyMode(*args):
  return _openframeworks.ofSetPolyMode(*args)
ofSetPolyMode = _openframeworks.ofSetPolyMode

def ofSetRectMode(*args):
  return _openframeworks.ofSetRectMode(*args)
ofSetRectMode = _openframeworks.ofSetRectMode

def ofGetBackground():
  return _openframeworks.ofGetBackground()
ofGetBackground = _openframeworks.ofGetBackground

def ofBackground(*args):
  return _openframeworks.ofBackground(*args)
ofBackground = _openframeworks.ofBackground

def ofBackgroundHex(*args):
  return _openframeworks.ofBackgroundHex(*args)
ofBackgroundHex = _openframeworks.ofBackgroundHex

def ofBackgroundGradient(*args):
  return _openframeworks.ofBackgroundGradient(*args)
ofBackgroundGradient = _openframeworks.ofBackgroundGradient

def ofSetBackgroundColor(*args):
  return _openframeworks.ofSetBackgroundColor(*args)
ofSetBackgroundColor = _openframeworks.ofSetBackgroundColor

def ofSetBackgroundColorHex(*args):
  return _openframeworks.ofSetBackgroundColorHex(*args)
ofSetBackgroundColorHex = _openframeworks.ofSetBackgroundColorHex

def ofSetBackgroundAuto(*args):
  return _openframeworks.ofSetBackgroundAuto(*args)
ofSetBackgroundAuto = _openframeworks.ofSetBackgroundAuto

def ofClear(*args):
  return _openframeworks.ofClear(*args)
ofClear = _openframeworks.ofClear

def ofClearAlpha():
  return _openframeworks.ofClearAlpha()
ofClearAlpha = _openframeworks.ofClearAlpha

def ofTriangle(*args):
  return _openframeworks.ofTriangle(*args)
ofTriangle = _openframeworks.ofTriangle

def ofCircle(*args):
  return _openframeworks.ofCircle(*args)
ofCircle = _openframeworks.ofCircle

def ofEllipse(*args):
  return _openframeworks.ofEllipse(*args)
ofEllipse = _openframeworks.ofEllipse

def ofLine(*args):
  return _openframeworks.ofLine(*args)
ofLine = _openframeworks.ofLine

def ofRect(*args):
  return _openframeworks.ofRect(*args)
ofRect = _openframeworks.ofRect

def ofRectRounded(*args):
  return _openframeworks.ofRectRounded(*args)
ofRectRounded = _openframeworks.ofRectRounded

def ofCurve(*args):
  return _openframeworks.ofCurve(*args)
ofCurve = _openframeworks.ofCurve

def ofBezier(*args):
  return _openframeworks.ofBezier(*args)
ofBezier = _openframeworks.ofBezier

def ofBeginShape():
  return _openframeworks.ofBeginShape()
ofBeginShape = _openframeworks.ofBeginShape

def ofVertex(*args):
  return _openframeworks.ofVertex(*args)
ofVertex = _openframeworks.ofVertex

def ofVertices(*args):
  return _openframeworks.ofVertices(*args)
ofVertices = _openframeworks.ofVertices

def ofCurveVertex(*args):
  return _openframeworks.ofCurveVertex(*args)
ofCurveVertex = _openframeworks.ofCurveVertex

def ofCurveVertices(*args):
  return _openframeworks.ofCurveVertices(*args)
ofCurveVertices = _openframeworks.ofCurveVertices

def ofBezierVertex(*args):
  return _openframeworks.ofBezierVertex(*args)
ofBezierVertex = _openframeworks.ofBezierVertex

def ofEndShape(bClose=False):
  return _openframeworks.ofEndShape(bClose)
ofEndShape = _openframeworks.ofEndShape

def ofNextContour(bClose=False):
  return _openframeworks.ofNextContour(bClose)
ofNextContour = _openframeworks.ofNextContour

def ofSetDrawBitmapMode(*args):
  return _openframeworks.ofSetDrawBitmapMode(*args)
ofSetDrawBitmapMode = _openframeworks.ofSetDrawBitmapMode

def ofDrawBitmapString(*args):
  return _openframeworks.ofDrawBitmapString(*args)
ofDrawBitmapString = _openframeworks.ofDrawBitmapString

def ofDrawBitmapStringHighlight(*args):
  return _openframeworks.ofDrawBitmapStringHighlight(*args)
ofDrawBitmapStringHighlight = _openframeworks.ofDrawBitmapStringHighlight

def ofSetPlaneResolution(*args):
  return _openframeworks.ofSetPlaneResolution(*args)
ofSetPlaneResolution = _openframeworks.ofSetPlaneResolution

def ofGetPlaneResolution():
  return _openframeworks.ofGetPlaneResolution()
ofGetPlaneResolution = _openframeworks.ofGetPlaneResolution

def ofDrawPlane(*args):
  return _openframeworks.ofDrawPlane(*args)
ofDrawPlane = _openframeworks.ofDrawPlane

def ofSetSphereResolution(*args):
  return _openframeworks.ofSetSphereResolution(*args)
ofSetSphereResolution = _openframeworks.ofSetSphereResolution

def ofGetSphereResolution():
  return _openframeworks.ofGetSphereResolution()
ofGetSphereResolution = _openframeworks.ofGetSphereResolution

def ofDrawSphere(*args):
  return _openframeworks.ofDrawSphere(*args)
ofDrawSphere = _openframeworks.ofDrawSphere

def ofSetIcoSphereResolution(*args):
  return _openframeworks.ofSetIcoSphereResolution(*args)
ofSetIcoSphereResolution = _openframeworks.ofSetIcoSphereResolution

def ofGetIcoSphereResolution():
  return _openframeworks.ofGetIcoSphereResolution()
ofGetIcoSphereResolution = _openframeworks.ofGetIcoSphereResolution

def ofDrawIcoSphere(*args):
  return _openframeworks.ofDrawIcoSphere(*args)
ofDrawIcoSphere = _openframeworks.ofDrawIcoSphere

def ofSetCylinderResolution(*args):
  return _openframeworks.ofSetCylinderResolution(*args)
ofSetCylinderResolution = _openframeworks.ofSetCylinderResolution

def ofGetCylinderResolution():
  return _openframeworks.ofGetCylinderResolution()
ofGetCylinderResolution = _openframeworks.ofGetCylinderResolution

def ofDrawCylinder(*args):
  return _openframeworks.ofDrawCylinder(*args)
ofDrawCylinder = _openframeworks.ofDrawCylinder

def ofSetConeResolution(*args):
  return _openframeworks.ofSetConeResolution(*args)
ofSetConeResolution = _openframeworks.ofSetConeResolution

def ofGetConeResolution():
  return _openframeworks.ofGetConeResolution()
ofGetConeResolution = _openframeworks.ofGetConeResolution

def ofDrawCone(*args):
  return _openframeworks.ofDrawCone(*args)
ofDrawCone = _openframeworks.ofDrawCone

def ofSetBoxResolution(*args):
  return _openframeworks.ofSetBoxResolution(*args)
ofSetBoxResolution = _openframeworks.ofSetBoxResolution

def ofGetBoxResolution():
  return _openframeworks.ofGetBoxResolution()
ofGetBoxResolution = _openframeworks.ofGetBoxResolution

def ofDrawBox(*args):
  return _openframeworks.ofDrawBox(*args)
ofDrawBox = _openframeworks.ofDrawBox
class ofTrueTypeFont(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTrueTypeFont, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofTrueTypeFont, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofTrueTypeFont()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofTrueTypeFont
    __del__ = lambda self : None;
    __swig_getmethods__["setGlobalDpi"] = lambda x: _openframeworks.ofTrueTypeFont_setGlobalDpi
    if _newclass:setGlobalDpi = staticmethod(_openframeworks.ofTrueTypeFont_setGlobalDpi)
    def loadFont(self, *args): return _openframeworks.ofTrueTypeFont_loadFont(self, *args)
    def isLoaded(self): return _openframeworks.ofTrueTypeFont_isLoaded(self)
    def isAntiAliased(self): return _openframeworks.ofTrueTypeFont_isAntiAliased(self)
    def hasFullCharacterSet(self): return _openframeworks.ofTrueTypeFont_hasFullCharacterSet(self)
    def getSize(self): return _openframeworks.ofTrueTypeFont_getSize(self)
    def getLineHeight(self): return _openframeworks.ofTrueTypeFont_getLineHeight(self)
    def setLineHeight(self, *args): return _openframeworks.ofTrueTypeFont_setLineHeight(self, *args)
    def getLetterSpacing(self): return _openframeworks.ofTrueTypeFont_getLetterSpacing(self)
    def setLetterSpacing(self, *args): return _openframeworks.ofTrueTypeFont_setLetterSpacing(self, *args)
    def getSpaceSize(self): return _openframeworks.ofTrueTypeFont_getSpaceSize(self)
    def setSpaceSize(self, *args): return _openframeworks.ofTrueTypeFont_setSpaceSize(self, *args)
    def stringWidth(self, *args): return _openframeworks.ofTrueTypeFont_stringWidth(self, *args)
    def stringHeight(self, *args): return _openframeworks.ofTrueTypeFont_stringHeight(self, *args)
    def getStringBoundingBox(self, *args): return _openframeworks.ofTrueTypeFont_getStringBoundingBox(self, *args)
    def drawString(self, *args): return _openframeworks.ofTrueTypeFont_drawString(self, *args)
    def drawStringAsShapes(self, *args): return _openframeworks.ofTrueTypeFont_drawStringAsShapes(self, *args)
    def getNumCharacters(self): return _openframeworks.ofTrueTypeFont_getNumCharacters(self)
    def getCharacterAsPoints(self, *args): return _openframeworks.ofTrueTypeFont_getCharacterAsPoints(self, *args)
    def getStringAsPoints(self, *args): return _openframeworks.ofTrueTypeFont_getStringAsPoints(self, *args)
    def getStringMesh(self, *args): return _openframeworks.ofTrueTypeFont_getStringMesh(self, *args)
    def getFontTexture(self): return _openframeworks.ofTrueTypeFont_getFontTexture(self)
    def bind(self): return _openframeworks.ofTrueTypeFont_bind(self)
    def unbind(self): return _openframeworks.ofTrueTypeFont_unbind(self)
    def getEncoding(self): return _openframeworks.ofTrueTypeFont_getEncoding(self)
    def setEncoding(self, *args): return _openframeworks.ofTrueTypeFont_setEncoding(self, *args)
    __swig_setmethods__["lineHeight"] = _openframeworks.ofTrueTypeFont_lineHeight_set
    __swig_getmethods__["lineHeight"] = _openframeworks.ofTrueTypeFont_lineHeight_get
    if _newclass:lineHeight = _swig_property(_openframeworks.ofTrueTypeFont_lineHeight_get, _openframeworks.ofTrueTypeFont_lineHeight_set)
    __swig_setmethods__["letterSpacing"] = _openframeworks.ofTrueTypeFont_letterSpacing_set
    __swig_getmethods__["letterSpacing"] = _openframeworks.ofTrueTypeFont_letterSpacing_get
    if _newclass:letterSpacing = _swig_property(_openframeworks.ofTrueTypeFont_letterSpacing_get, _openframeworks.ofTrueTypeFont_letterSpacing_set)
    __swig_setmethods__["spaceSize"] = _openframeworks.ofTrueTypeFont_spaceSize_set
    __swig_getmethods__["spaceSize"] = _openframeworks.ofTrueTypeFont_spaceSize_get
    if _newclass:spaceSize = _swig_property(_openframeworks.ofTrueTypeFont_spaceSize_get, _openframeworks.ofTrueTypeFont_spaceSize_set)
ofTrueTypeFont_swigregister = _openframeworks.ofTrueTypeFont_swigregister
ofTrueTypeFont_swigregister(ofTrueTypeFont)

def ofTrueTypeFont_setGlobalDpi(*args):
  return _openframeworks.ofTrueTypeFont_setGlobalDpi(*args)
ofTrueTypeFont_setGlobalDpi = _openframeworks.ofTrueTypeFont_setGlobalDpi

class ofMatrix3x3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMatrix3x3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofMatrix3x3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _openframeworks.ofMatrix3x3_a_set
    __swig_getmethods__["a"] = _openframeworks.ofMatrix3x3_a_get
    if _newclass:a = _swig_property(_openframeworks.ofMatrix3x3_a_get, _openframeworks.ofMatrix3x3_a_set)
    __swig_setmethods__["b"] = _openframeworks.ofMatrix3x3_b_set
    __swig_getmethods__["b"] = _openframeworks.ofMatrix3x3_b_get
    if _newclass:b = _swig_property(_openframeworks.ofMatrix3x3_b_get, _openframeworks.ofMatrix3x3_b_set)
    __swig_setmethods__["c"] = _openframeworks.ofMatrix3x3_c_set
    __swig_getmethods__["c"] = _openframeworks.ofMatrix3x3_c_get
    if _newclass:c = _swig_property(_openframeworks.ofMatrix3x3_c_get, _openframeworks.ofMatrix3x3_c_set)
    __swig_setmethods__["d"] = _openframeworks.ofMatrix3x3_d_set
    __swig_getmethods__["d"] = _openframeworks.ofMatrix3x3_d_get
    if _newclass:d = _swig_property(_openframeworks.ofMatrix3x3_d_get, _openframeworks.ofMatrix3x3_d_set)
    __swig_setmethods__["e"] = _openframeworks.ofMatrix3x3_e_set
    __swig_getmethods__["e"] = _openframeworks.ofMatrix3x3_e_get
    if _newclass:e = _swig_property(_openframeworks.ofMatrix3x3_e_get, _openframeworks.ofMatrix3x3_e_set)
    __swig_setmethods__["f"] = _openframeworks.ofMatrix3x3_f_set
    __swig_getmethods__["f"] = _openframeworks.ofMatrix3x3_f_get
    if _newclass:f = _swig_property(_openframeworks.ofMatrix3x3_f_get, _openframeworks.ofMatrix3x3_f_set)
    __swig_setmethods__["g"] = _openframeworks.ofMatrix3x3_g_set
    __swig_getmethods__["g"] = _openframeworks.ofMatrix3x3_g_get
    if _newclass:g = _swig_property(_openframeworks.ofMatrix3x3_g_get, _openframeworks.ofMatrix3x3_g_set)
    __swig_setmethods__["h"] = _openframeworks.ofMatrix3x3_h_set
    __swig_getmethods__["h"] = _openframeworks.ofMatrix3x3_h_get
    if _newclass:h = _swig_property(_openframeworks.ofMatrix3x3_h_get, _openframeworks.ofMatrix3x3_h_set)
    __swig_setmethods__["i"] = _openframeworks.ofMatrix3x3_i_set
    __swig_getmethods__["i"] = _openframeworks.ofMatrix3x3_i_get
    if _newclass:i = _swig_property(_openframeworks.ofMatrix3x3_i_get, _openframeworks.ofMatrix3x3_i_set)
    def __init__(self, _a=0.0, _b=0.0, _c=0.0, _d=0.0, _e=0.0, _f=0.0, _g=0.0, _h=0.0, _i=0.0): 
        this = _openframeworks.new_ofMatrix3x3(_a, _b, _c, _d, _e, _f, _g, _h, _i)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _openframeworks.ofMatrix3x3_set(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofMatrix3x3___getitem__(self, *args)
    def transpose(self, *args): return _openframeworks.ofMatrix3x3_transpose(self, *args)
    def determinant(self, *args): return _openframeworks.ofMatrix3x3_determinant(self, *args)
    def invert(self): return _openframeworks.ofMatrix3x3_invert(self)
    def inverse(self, *args): return _openframeworks.ofMatrix3x3_inverse(self, *args)
    def __add__(self, *args): return _openframeworks.ofMatrix3x3___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofMatrix3x3___iadd__(self, *args)
    def __sub__(self, *args): return _openframeworks.ofMatrix3x3___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofMatrix3x3___isub__(self, *args)
    def entrywiseTimes(self, *args): return _openframeworks.ofMatrix3x3_entrywiseTimes(self, *args)
    def __imul__(self, *args): return _openframeworks.ofMatrix3x3___imul__(self, *args)
    def __mul__(self, *args): return _openframeworks.ofMatrix3x3___mul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofMatrix3x3___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofMatrix3x3___idiv__(self, *args)
    __swig_destroy__ = _openframeworks.delete_ofMatrix3x3
    __del__ = lambda self : None;
ofMatrix3x3_swigregister = _openframeworks.ofMatrix3x3_swigregister
ofMatrix3x3_swigregister(ofMatrix3x3)

class ofMatrix4x4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMatrix4x4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofMatrix4x4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_mat"] = _openframeworks.ofMatrix4x4__mat_set
    __swig_getmethods__["_mat"] = _openframeworks.ofMatrix4x4__mat_get
    if _newclass:_mat = _swig_property(_openframeworks.ofMatrix4x4__mat_get, _openframeworks.ofMatrix4x4__mat_set)
    def __init__(self, *args): 
        this = _openframeworks.new_ofMatrix4x4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofMatrix4x4
    __del__ = lambda self : None;
    def __call__(self, *args): return _openframeworks.ofMatrix4x4___call__(self, *args)
    def getRowAsVec3f(self, *args): return _openframeworks.ofMatrix4x4_getRowAsVec3f(self, *args)
    def getRowAsVec4f(self, *args): return _openframeworks.ofMatrix4x4_getRowAsVec4f(self, *args)
    def isValid(self): return _openframeworks.ofMatrix4x4_isValid(self)
    def isNaN(self): return _openframeworks.ofMatrix4x4_isNaN(self)
    def set(self, *args): return _openframeworks.ofMatrix4x4_set(self, *args)
    def getPtr(self, *args): return _openframeworks.ofMatrix4x4_getPtr(self, *args)
    def isIdentity(self): return _openframeworks.ofMatrix4x4_isIdentity(self)
    def makeIdentityMatrix(self): return _openframeworks.ofMatrix4x4_makeIdentityMatrix(self)
    def makeScaleMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeScaleMatrix(self, *args)
    def makeTranslationMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeTranslationMatrix(self, *args)
    def makeRotationMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeRotationMatrix(self, *args)
    def makeInvertOf(self, *args): return _openframeworks.ofMatrix4x4_makeInvertOf(self, *args)
    def makeOrthoNormalOf(self, *args): return _openframeworks.ofMatrix4x4_makeOrthoNormalOf(self, *args)
    def makeFromMultiplicationOf(self, *args): return _openframeworks.ofMatrix4x4_makeFromMultiplicationOf(self, *args)
    def getInverse(self): return _openframeworks.ofMatrix4x4_getInverse(self)
    def makeOrthoMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeOrthoMatrix(self, *args)
    def makeOrtho2DMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeOrtho2DMatrix(self, *args)
    def makeFrustumMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeFrustumMatrix(self, *args)
    def makePerspectiveMatrix(self, *args): return _openframeworks.ofMatrix4x4_makePerspectiveMatrix(self, *args)
    def makeLookAtMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeLookAtMatrix(self, *args)
    def makeLookAtViewMatrix(self, *args): return _openframeworks.ofMatrix4x4_makeLookAtViewMatrix(self, *args)
    def getOrtho(self, *args): return _openframeworks.ofMatrix4x4_getOrtho(self, *args)
    def getFrustum(self, *args): return _openframeworks.ofMatrix4x4_getFrustum(self, *args)
    def getPerspective(self, *args): return _openframeworks.ofMatrix4x4_getPerspective(self, *args)
    def getLookAt(self, *args): return _openframeworks.ofMatrix4x4_getLookAt(self, *args)
    def decompose(self, *args): return _openframeworks.ofMatrix4x4_decompose(self, *args)
    __swig_getmethods__["newIdentityMatrix"] = lambda x: _openframeworks.ofMatrix4x4_newIdentityMatrix
    if _newclass:newIdentityMatrix = staticmethod(_openframeworks.ofMatrix4x4_newIdentityMatrix)
    __swig_getmethods__["newScaleMatrix"] = lambda x: _openframeworks.ofMatrix4x4_newScaleMatrix
    if _newclass:newScaleMatrix = staticmethod(_openframeworks.ofMatrix4x4_newScaleMatrix)
    __swig_getmethods__["newTranslationMatrix"] = lambda x: _openframeworks.ofMatrix4x4_newTranslationMatrix
    if _newclass:newTranslationMatrix = staticmethod(_openframeworks.ofMatrix4x4_newTranslationMatrix)
    __swig_getmethods__["newRotationMatrix"] = lambda x: _openframeworks.ofMatrix4x4_newRotationMatrix
    if _newclass:newRotationMatrix = staticmethod(_openframeworks.ofMatrix4x4_newRotationMatrix)
    __swig_getmethods__["getInverseOf"] = lambda x: _openframeworks.ofMatrix4x4_getInverseOf
    if _newclass:getInverseOf = staticmethod(_openframeworks.ofMatrix4x4_getInverseOf)
    __swig_getmethods__["getTransposedOf"] = lambda x: _openframeworks.ofMatrix4x4_getTransposedOf
    if _newclass:getTransposedOf = staticmethod(_openframeworks.ofMatrix4x4_getTransposedOf)
    __swig_getmethods__["getOrthoNormalOf"] = lambda x: _openframeworks.ofMatrix4x4_getOrthoNormalOf
    if _newclass:getOrthoNormalOf = staticmethod(_openframeworks.ofMatrix4x4_getOrthoNormalOf)
    __swig_getmethods__["newOrthoMatrix"] = lambda x: _openframeworks.ofMatrix4x4_newOrthoMatrix
    if _newclass:newOrthoMatrix = staticmethod(_openframeworks.ofMatrix4x4_newOrthoMatrix)
    __swig_getmethods__["newOrtho2DMatrix"] = lambda x: _openframeworks.ofMatrix4x4_newOrtho2DMatrix
    if _newclass:newOrtho2DMatrix = staticmethod(_openframeworks.ofMatrix4x4_newOrtho2DMatrix)
    __swig_getmethods__["newFrustumMatrix"] = lambda x: _openframeworks.ofMatrix4x4_newFrustumMatrix
    if _newclass:newFrustumMatrix = staticmethod(_openframeworks.ofMatrix4x4_newFrustumMatrix)
    __swig_getmethods__["newPerspectiveMatrix"] = lambda x: _openframeworks.ofMatrix4x4_newPerspectiveMatrix
    if _newclass:newPerspectiveMatrix = staticmethod(_openframeworks.ofMatrix4x4_newPerspectiveMatrix)
    __swig_getmethods__["newLookAtMatrix"] = lambda x: _openframeworks.ofMatrix4x4_newLookAtMatrix
    if _newclass:newLookAtMatrix = staticmethod(_openframeworks.ofMatrix4x4_newLookAtMatrix)
    def setRotate(self, *args): return _openframeworks.ofMatrix4x4_setRotate(self, *args)
    def setTranslation(self, *args): return _openframeworks.ofMatrix4x4_setTranslation(self, *args)
    def rotateRad(self, *args): return _openframeworks.ofMatrix4x4_rotateRad(self, *args)
    def rotate(self, *args): return _openframeworks.ofMatrix4x4_rotate(self, *args)
    def translate(self, *args): return _openframeworks.ofMatrix4x4_translate(self, *args)
    def scale(self, *args): return _openframeworks.ofMatrix4x4_scale(self, *args)
    def glRotateRad(self, *args): return _openframeworks.ofMatrix4x4_glRotateRad(self, *args)
    def glRotate(self, *args): return _openframeworks.ofMatrix4x4_glRotate(self, *args)
    def glTranslate(self, *args): return _openframeworks.ofMatrix4x4_glTranslate(self, *args)
    def glScale(self, *args): return _openframeworks.ofMatrix4x4_glScale(self, *args)
    def getRotate(self): return _openframeworks.ofMatrix4x4_getRotate(self)
    def getTranslation(self): return _openframeworks.ofMatrix4x4_getTranslation(self)
    def getScale(self): return _openframeworks.ofMatrix4x4_getScale(self)
    __swig_getmethods__["transform3x3"] = lambda x: _openframeworks.ofMatrix4x4_transform3x3
    if _newclass:transform3x3 = staticmethod(_openframeworks.ofMatrix4x4_transform3x3)
    def postMult(self, *args): return _openframeworks.ofMatrix4x4_postMult(self, *args)
    def __imul__(self, *args): return _openframeworks.ofMatrix4x4___imul__(self, *args)
    def __mul__(self, *args): return _openframeworks.ofMatrix4x4___mul__(self, *args)
    def preMult(self, *args): return _openframeworks.ofMatrix4x4_preMult(self, *args)
    def postMultTranslate(self, *args): return _openframeworks.ofMatrix4x4_postMultTranslate(self, *args)
    def postMultRotate(self, *args): return _openframeworks.ofMatrix4x4_postMultRotate(self, *args)
    def postMultScale(self, *args): return _openframeworks.ofMatrix4x4_postMultScale(self, *args)
    def preMultScale(self, *args): return _openframeworks.ofMatrix4x4_preMultScale(self, *args)
    def preMultTranslate(self, *args): return _openframeworks.ofMatrix4x4_preMultTranslate(self, *args)
    def preMultRotate(self, *args): return _openframeworks.ofMatrix4x4_preMultRotate(self, *args)
ofMatrix4x4_swigregister = _openframeworks.ofMatrix4x4_swigregister
ofMatrix4x4_swigregister(ofMatrix4x4)

def ofMatrix4x4_newIdentityMatrix():
  return _openframeworks.ofMatrix4x4_newIdentityMatrix()
ofMatrix4x4_newIdentityMatrix = _openframeworks.ofMatrix4x4_newIdentityMatrix

def ofMatrix4x4_newScaleMatrix(*args):
  return _openframeworks.ofMatrix4x4_newScaleMatrix(*args)
ofMatrix4x4_newScaleMatrix = _openframeworks.ofMatrix4x4_newScaleMatrix

def ofMatrix4x4_newTranslationMatrix(*args):
  return _openframeworks.ofMatrix4x4_newTranslationMatrix(*args)
ofMatrix4x4_newTranslationMatrix = _openframeworks.ofMatrix4x4_newTranslationMatrix

def ofMatrix4x4_newRotationMatrix(*args):
  return _openframeworks.ofMatrix4x4_newRotationMatrix(*args)
ofMatrix4x4_newRotationMatrix = _openframeworks.ofMatrix4x4_newRotationMatrix

def ofMatrix4x4_getInverseOf(*args):
  return _openframeworks.ofMatrix4x4_getInverseOf(*args)
ofMatrix4x4_getInverseOf = _openframeworks.ofMatrix4x4_getInverseOf

def ofMatrix4x4_getTransposedOf(*args):
  return _openframeworks.ofMatrix4x4_getTransposedOf(*args)
ofMatrix4x4_getTransposedOf = _openframeworks.ofMatrix4x4_getTransposedOf

def ofMatrix4x4_getOrthoNormalOf(*args):
  return _openframeworks.ofMatrix4x4_getOrthoNormalOf(*args)
ofMatrix4x4_getOrthoNormalOf = _openframeworks.ofMatrix4x4_getOrthoNormalOf

def ofMatrix4x4_newOrthoMatrix(*args):
  return _openframeworks.ofMatrix4x4_newOrthoMatrix(*args)
ofMatrix4x4_newOrthoMatrix = _openframeworks.ofMatrix4x4_newOrthoMatrix

def ofMatrix4x4_newOrtho2DMatrix(*args):
  return _openframeworks.ofMatrix4x4_newOrtho2DMatrix(*args)
ofMatrix4x4_newOrtho2DMatrix = _openframeworks.ofMatrix4x4_newOrtho2DMatrix

def ofMatrix4x4_newFrustumMatrix(*args):
  return _openframeworks.ofMatrix4x4_newFrustumMatrix(*args)
ofMatrix4x4_newFrustumMatrix = _openframeworks.ofMatrix4x4_newFrustumMatrix

def ofMatrix4x4_newPerspectiveMatrix(*args):
  return _openframeworks.ofMatrix4x4_newPerspectiveMatrix(*args)
ofMatrix4x4_newPerspectiveMatrix = _openframeworks.ofMatrix4x4_newPerspectiveMatrix

def ofMatrix4x4_newLookAtMatrix(*args):
  return _openframeworks.ofMatrix4x4_newLookAtMatrix(*args)
ofMatrix4x4_newLookAtMatrix = _openframeworks.ofMatrix4x4_newLookAtMatrix

def ofMatrix4x4_transform3x3(*args):
  return _openframeworks.ofMatrix4x4_transform3x3(*args)
ofMatrix4x4_transform3x3 = _openframeworks.ofMatrix4x4_transform3x3

class ofQuaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofQuaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofQuaternion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_v"] = _openframeworks.ofQuaternion__v_set
    __swig_getmethods__["_v"] = _openframeworks.ofQuaternion__v_get
    if _newclass:_v = _swig_property(_openframeworks.ofQuaternion__v_get, _openframeworks.ofQuaternion__v_set)
    def __init__(self, *args): 
        this = _openframeworks.new_ofQuaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _openframeworks.ofQuaternion___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofQuaternion___ne__(self, *args)
    def __lshift__(self, *args): return _openframeworks.ofQuaternion___lshift__(self, *args)
    def __rshift__(self, *args): return _openframeworks.ofQuaternion___rshift__(self, *args)
    def asVec4(self): return _openframeworks.ofQuaternion_asVec4(self)
    def asVec3(self): return _openframeworks.ofQuaternion_asVec3(self)
    def set(self, *args): return _openframeworks.ofQuaternion_set(self, *args)
    def get(self, *args): return _openframeworks.ofQuaternion_get(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofQuaternion___getitem__(self, *args)
    def x(self): return _openframeworks.ofQuaternion_x(self)
    def y(self): return _openframeworks.ofQuaternion_y(self)
    def z(self): return _openframeworks.ofQuaternion_z(self)
    def w(self): return _openframeworks.ofQuaternion_w(self)
    def zeroRotation(self): return _openframeworks.ofQuaternion_zeroRotation(self)
    def __imul__(self, *args): return _openframeworks.ofQuaternion___imul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofQuaternion___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofQuaternion___idiv__(self, *args)
    def __add__(self, *args): return _openframeworks.ofQuaternion___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofQuaternion___iadd__(self, *args)
    def __sub__(self, *args): return _openframeworks.ofQuaternion___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofQuaternion___isub__(self, *args)
    def __neg__(self): return _openframeworks.ofQuaternion___neg__(self)
    def __mul__(self, *args): return _openframeworks.ofQuaternion___mul__(self, *args)
    def length(self): return _openframeworks.ofQuaternion_length(self)
    def length2(self): return _openframeworks.ofQuaternion_length2(self)
    def conj(self): return _openframeworks.ofQuaternion_conj(self)
    def inverse(self): return _openframeworks.ofQuaternion_inverse(self)
    def makeRotate(self, *args): return _openframeworks.ofQuaternion_makeRotate(self, *args)
    def makeRotate_original(self, *args): return _openframeworks.ofQuaternion_makeRotate_original(self, *args)
    def getRotate(self, *args): return _openframeworks.ofQuaternion_getRotate(self, *args)
    def getEuler(self): return _openframeworks.ofQuaternion_getEuler(self)
    def slerp(self, *args): return _openframeworks.ofQuaternion_slerp(self, *args)
    def normalize(self): return _openframeworks.ofQuaternion_normalize(self)
    __swig_destroy__ = _openframeworks.delete_ofQuaternion
    __del__ = lambda self : None;
ofQuaternion_swigregister = _openframeworks.ofQuaternion_swigregister
ofQuaternion_swigregister(ofQuaternion)

class ofVec2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofVec2f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _openframeworks.ofVec2f_x_set
    __swig_getmethods__["x"] = _openframeworks.ofVec2f_x_get
    if _newclass:x = _swig_property(_openframeworks.ofVec2f_x_get, _openframeworks.ofVec2f_x_set)
    __swig_setmethods__["y"] = _openframeworks.ofVec2f_y_set
    __swig_getmethods__["y"] = _openframeworks.ofVec2f_y_get
    if _newclass:y = _swig_property(_openframeworks.ofVec2f_y_get, _openframeworks.ofVec2f_y_set)
    DIM = _openframeworks.ofVec2f_DIM
    def __init__(self, *args): 
        this = _openframeworks.new_ofVec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPtr(self, *args): return _openframeworks.ofVec2f_getPtr(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofVec2f___getitem__(self, *args)
    def set(self, *args): return _openframeworks.ofVec2f_set(self, *args)
    def __eq__(self, *args): return _openframeworks.ofVec2f___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofVec2f___ne__(self, *args)
    def match(self, *args): return _openframeworks.ofVec2f_match(self, *args)
    def isAligned(self, *args): return _openframeworks.ofVec2f_isAligned(self, *args)
    def isAlignedRad(self, *args): return _openframeworks.ofVec2f_isAlignedRad(self, *args)
    def align(self, *args): return _openframeworks.ofVec2f_align(self, *args)
    def alignRad(self, *args): return _openframeworks.ofVec2f_alignRad(self, *args)
    def __add__(self, *args): return _openframeworks.ofVec2f___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofVec2f___iadd__(self, *args)
    def __sub__(self, *args): return _openframeworks.ofVec2f___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofVec2f___isub__(self, *args)
    def __neg__(self): return _openframeworks.ofVec2f___neg__(self)
    def __mul__(self, *args): return _openframeworks.ofVec2f___mul__(self, *args)
    def __imul__(self, *args): return _openframeworks.ofVec2f___imul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofVec2f___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofVec2f___idiv__(self, *args)
    def getScaled(self, *args): return _openframeworks.ofVec2f_getScaled(self, *args)
    def scale(self, *args): return _openframeworks.ofVec2f_scale(self, *args)
    def getRotated(self, *args): return _openframeworks.ofVec2f_getRotated(self, *args)
    def rotate(self, *args): return _openframeworks.ofVec2f_rotate(self, *args)
    def getRotatedRad(self, *args): return _openframeworks.ofVec2f_getRotatedRad(self, *args)
    def rotateRad(self, *args): return _openframeworks.ofVec2f_rotateRad(self, *args)
    def getMapped(self, *args): return _openframeworks.ofVec2f_getMapped(self, *args)
    def map(self, *args): return _openframeworks.ofVec2f_map(self, *args)
    def distance(self, *args): return _openframeworks.ofVec2f_distance(self, *args)
    def squareDistance(self, *args): return _openframeworks.ofVec2f_squareDistance(self, *args)
    def getInterpolated(self, *args): return _openframeworks.ofVec2f_getInterpolated(self, *args)
    def interpolate(self, *args): return _openframeworks.ofVec2f_interpolate(self, *args)
    def getMiddle(self, *args): return _openframeworks.ofVec2f_getMiddle(self, *args)
    def middle(self, *args): return _openframeworks.ofVec2f_middle(self, *args)
    def average(self, *args): return _openframeworks.ofVec2f_average(self, *args)
    def getNormalized(self): return _openframeworks.ofVec2f_getNormalized(self)
    def normalize(self): return _openframeworks.ofVec2f_normalize(self)
    def getLimited(self, *args): return _openframeworks.ofVec2f_getLimited(self, *args)
    def limit(self, *args): return _openframeworks.ofVec2f_limit(self, *args)
    def getPerpendicular(self): return _openframeworks.ofVec2f_getPerpendicular(self)
    def perpendicular(self): return _openframeworks.ofVec2f_perpendicular(self)
    def length(self): return _openframeworks.ofVec2f_length(self)
    def lengthSquared(self): return _openframeworks.ofVec2f_lengthSquared(self)
    def angle(self, *args): return _openframeworks.ofVec2f_angle(self, *args)
    def angleRad(self, *args): return _openframeworks.ofVec2f_angleRad(self, *args)
    def dot(self, *args): return _openframeworks.ofVec2f_dot(self, *args)
    def rescaled(self, *args): return _openframeworks.ofVec2f_rescaled(self, *args)
    def rescale(self, *args): return _openframeworks.ofVec2f_rescale(self, *args)
    def normalized(self): return _openframeworks.ofVec2f_normalized(self)
    def limited(self, *args): return _openframeworks.ofVec2f_limited(self, *args)
    def perpendiculared(self): return _openframeworks.ofVec2f_perpendiculared(self)
    def interpolated(self, *args): return _openframeworks.ofVec2f_interpolated(self, *args)
    def middled(self, *args): return _openframeworks.ofVec2f_middled(self, *args)
    def mapped(self, *args): return _openframeworks.ofVec2f_mapped(self, *args)
    def distanceSquared(self, *args): return _openframeworks.ofVec2f_distanceSquared(self, *args)
    def rotated(self, *args): return _openframeworks.ofVec2f_rotated(self, *args)
    __swig_getmethods__["zero"] = lambda x: _openframeworks.ofVec2f_zero
    if _newclass:zero = staticmethod(_openframeworks.ofVec2f_zero)
    __swig_getmethods__["one"] = lambda x: _openframeworks.ofVec2f_one
    if _newclass:one = staticmethod(_openframeworks.ofVec2f_one)
    __swig_destroy__ = _openframeworks.delete_ofVec2f
    __del__ = lambda self : None;
ofVec2f_swigregister = _openframeworks.ofVec2f_swigregister
ofVec2f_swigregister(ofVec2f)

def ofVec2f_zero():
  return _openframeworks.ofVec2f_zero()
ofVec2f_zero = _openframeworks.ofVec2f_zero

def ofVec2f_one():
  return _openframeworks.ofVec2f_one()
ofVec2f_one = _openframeworks.ofVec2f_one

class ofVec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofVec3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _openframeworks.ofVec3f_x_set
    __swig_getmethods__["x"] = _openframeworks.ofVec3f_x_get
    if _newclass:x = _swig_property(_openframeworks.ofVec3f_x_get, _openframeworks.ofVec3f_x_set)
    __swig_setmethods__["y"] = _openframeworks.ofVec3f_y_set
    __swig_getmethods__["y"] = _openframeworks.ofVec3f_y_get
    if _newclass:y = _swig_property(_openframeworks.ofVec3f_y_get, _openframeworks.ofVec3f_y_set)
    __swig_setmethods__["z"] = _openframeworks.ofVec3f_z_set
    __swig_getmethods__["z"] = _openframeworks.ofVec3f_z_get
    if _newclass:z = _swig_property(_openframeworks.ofVec3f_z_get, _openframeworks.ofVec3f_z_set)
    DIM = _openframeworks.ofVec3f_DIM
    def __init__(self, *args): 
        this = _openframeworks.new_ofVec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPtr(self, *args): return _openframeworks.ofVec3f_getPtr(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofVec3f___getitem__(self, *args)
    def set(self, *args): return _openframeworks.ofVec3f_set(self, *args)
    def __eq__(self, *args): return _openframeworks.ofVec3f___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofVec3f___ne__(self, *args)
    def match(self, *args): return _openframeworks.ofVec3f_match(self, *args)
    def isAligned(self, *args): return _openframeworks.ofVec3f_isAligned(self, *args)
    def align(self, *args): return _openframeworks.ofVec3f_align(self, *args)
    def isAlignedRad(self, *args): return _openframeworks.ofVec3f_isAlignedRad(self, *args)
    def alignRad(self, *args): return _openframeworks.ofVec3f_alignRad(self, *args)
    def __neg__(self): return _openframeworks.ofVec3f___neg__(self)
    def __add__(self, *args): return _openframeworks.ofVec3f___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofVec3f___iadd__(self, *args)
    def __sub__(self, *args): return _openframeworks.ofVec3f___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofVec3f___isub__(self, *args)
    def __mul__(self, *args): return _openframeworks.ofVec3f___mul__(self, *args)
    def __imul__(self, *args): return _openframeworks.ofVec3f___imul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofVec3f___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofVec3f___idiv__(self, *args)
    def getScaled(self, *args): return _openframeworks.ofVec3f_getScaled(self, *args)
    def scale(self, *args): return _openframeworks.ofVec3f_scale(self, *args)
    def getRotated(self, *args): return _openframeworks.ofVec3f_getRotated(self, *args)
    def rotate(self, *args): return _openframeworks.ofVec3f_rotate(self, *args)
    def getRotatedRad(self, *args): return _openframeworks.ofVec3f_getRotatedRad(self, *args)
    def rotateRad(self, *args): return _openframeworks.ofVec3f_rotateRad(self, *args)
    def getMapped(self, *args): return _openframeworks.ofVec3f_getMapped(self, *args)
    def map(self, *args): return _openframeworks.ofVec3f_map(self, *args)
    def distance(self, *args): return _openframeworks.ofVec3f_distance(self, *args)
    def squareDistance(self, *args): return _openframeworks.ofVec3f_squareDistance(self, *args)
    def getInterpolated(self, *args): return _openframeworks.ofVec3f_getInterpolated(self, *args)
    def interpolate(self, *args): return _openframeworks.ofVec3f_interpolate(self, *args)
    def getMiddle(self, *args): return _openframeworks.ofVec3f_getMiddle(self, *args)
    def middle(self, *args): return _openframeworks.ofVec3f_middle(self, *args)
    def average(self, *args): return _openframeworks.ofVec3f_average(self, *args)
    def getNormalized(self): return _openframeworks.ofVec3f_getNormalized(self)
    def normalize(self): return _openframeworks.ofVec3f_normalize(self)
    def getLimited(self, *args): return _openframeworks.ofVec3f_getLimited(self, *args)
    def limit(self, *args): return _openframeworks.ofVec3f_limit(self, *args)
    def getCrossed(self, *args): return _openframeworks.ofVec3f_getCrossed(self, *args)
    def cross(self, *args): return _openframeworks.ofVec3f_cross(self, *args)
    def getPerpendicular(self, *args): return _openframeworks.ofVec3f_getPerpendicular(self, *args)
    def perpendicular(self, *args): return _openframeworks.ofVec3f_perpendicular(self, *args)
    def length(self): return _openframeworks.ofVec3f_length(self)
    def lengthSquared(self): return _openframeworks.ofVec3f_lengthSquared(self)
    def angle(self, *args): return _openframeworks.ofVec3f_angle(self, *args)
    def angleRad(self, *args): return _openframeworks.ofVec3f_angleRad(self, *args)
    def dot(self, *args): return _openframeworks.ofVec3f_dot(self, *args)
    def rescaled(self, *args): return _openframeworks.ofVec3f_rescaled(self, *args)
    def rescale(self, *args): return _openframeworks.ofVec3f_rescale(self, *args)
    def normalized(self): return _openframeworks.ofVec3f_normalized(self)
    def limited(self, *args): return _openframeworks.ofVec3f_limited(self, *args)
    def crossed(self, *args): return _openframeworks.ofVec3f_crossed(self, *args)
    def perpendiculared(self, *args): return _openframeworks.ofVec3f_perpendiculared(self, *args)
    def mapped(self, *args): return _openframeworks.ofVec3f_mapped(self, *args)
    def distanceSquared(self, *args): return _openframeworks.ofVec3f_distanceSquared(self, *args)
    def interpolated(self, *args): return _openframeworks.ofVec3f_interpolated(self, *args)
    def middled(self, *args): return _openframeworks.ofVec3f_middled(self, *args)
    def rotated(self, *args): return _openframeworks.ofVec3f_rotated(self, *args)
    __swig_getmethods__["zero"] = lambda x: _openframeworks.ofVec3f_zero
    if _newclass:zero = staticmethod(_openframeworks.ofVec3f_zero)
    __swig_getmethods__["one"] = lambda x: _openframeworks.ofVec3f_one
    if _newclass:one = staticmethod(_openframeworks.ofVec3f_one)
    __swig_destroy__ = _openframeworks.delete_ofVec3f
    __del__ = lambda self : None;
ofVec3f_swigregister = _openframeworks.ofVec3f_swigregister
ofVec3f_swigregister(ofVec3f)

def ofVec3f_zero():
  return _openframeworks.ofVec3f_zero()
ofVec3f_zero = _openframeworks.ofVec3f_zero

def ofVec3f_one():
  return _openframeworks.ofVec3f_one()
ofVec3f_one = _openframeworks.ofVec3f_one

class ofVec4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVec4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofVec4f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _openframeworks.ofVec4f_x_set
    __swig_getmethods__["x"] = _openframeworks.ofVec4f_x_get
    if _newclass:x = _swig_property(_openframeworks.ofVec4f_x_get, _openframeworks.ofVec4f_x_set)
    __swig_setmethods__["y"] = _openframeworks.ofVec4f_y_set
    __swig_getmethods__["y"] = _openframeworks.ofVec4f_y_get
    if _newclass:y = _swig_property(_openframeworks.ofVec4f_y_get, _openframeworks.ofVec4f_y_set)
    __swig_setmethods__["z"] = _openframeworks.ofVec4f_z_set
    __swig_getmethods__["z"] = _openframeworks.ofVec4f_z_get
    if _newclass:z = _swig_property(_openframeworks.ofVec4f_z_get, _openframeworks.ofVec4f_z_set)
    __swig_setmethods__["w"] = _openframeworks.ofVec4f_w_set
    __swig_getmethods__["w"] = _openframeworks.ofVec4f_w_get
    if _newclass:w = _swig_property(_openframeworks.ofVec4f_w_get, _openframeworks.ofVec4f_w_set)
    DIM = _openframeworks.ofVec4f_DIM
    def __init__(self, *args): 
        this = _openframeworks.new_ofVec4f(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return _openframeworks.ofVec4f_set(self, *args)
    def getPtr(self, *args): return _openframeworks.ofVec4f_getPtr(self, *args)
    def __getitem__(self, *args): return _openframeworks.ofVec4f___getitem__(self, *args)
    def __eq__(self, *args): return _openframeworks.ofVec4f___eq__(self, *args)
    def __ne__(self, *args): return _openframeworks.ofVec4f___ne__(self, *args)
    def match(self, *args): return _openframeworks.ofVec4f_match(self, *args)
    def __sub__(self, *args): return _openframeworks.ofVec4f___sub__(self, *args)
    def __isub__(self, *args): return _openframeworks.ofVec4f___isub__(self, *args)
    def __add__(self, *args): return _openframeworks.ofVec4f___add__(self, *args)
    def __iadd__(self, *args): return _openframeworks.ofVec4f___iadd__(self, *args)
    def __neg__(self): return _openframeworks.ofVec4f___neg__(self)
    def __mul__(self, *args): return _openframeworks.ofVec4f___mul__(self, *args)
    def __imul__(self, *args): return _openframeworks.ofVec4f___imul__(self, *args)
    def __div__(self, *args): return _openframeworks.ofVec4f___div__(self, *args)
    def __idiv__(self, *args): return _openframeworks.ofVec4f___idiv__(self, *args)
    def getScaled(self, *args): return _openframeworks.ofVec4f_getScaled(self, *args)
    def scale(self, *args): return _openframeworks.ofVec4f_scale(self, *args)
    def distance(self, *args): return _openframeworks.ofVec4f_distance(self, *args)
    def squareDistance(self, *args): return _openframeworks.ofVec4f_squareDistance(self, *args)
    def getInterpolated(self, *args): return _openframeworks.ofVec4f_getInterpolated(self, *args)
    def interpolate(self, *args): return _openframeworks.ofVec4f_interpolate(self, *args)
    def getMiddle(self, *args): return _openframeworks.ofVec4f_getMiddle(self, *args)
    def middle(self, *args): return _openframeworks.ofVec4f_middle(self, *args)
    def average(self, *args): return _openframeworks.ofVec4f_average(self, *args)
    def getNormalized(self): return _openframeworks.ofVec4f_getNormalized(self)
    def normalize(self): return _openframeworks.ofVec4f_normalize(self)
    def getLimited(self, *args): return _openframeworks.ofVec4f_getLimited(self, *args)
    def limit(self, *args): return _openframeworks.ofVec4f_limit(self, *args)
    def length(self): return _openframeworks.ofVec4f_length(self)
    def lengthSquared(self): return _openframeworks.ofVec4f_lengthSquared(self)
    def dot(self, *args): return _openframeworks.ofVec4f_dot(self, *args)
    def rescaled(self, *args): return _openframeworks.ofVec4f_rescaled(self, *args)
    def rescale(self, *args): return _openframeworks.ofVec4f_rescale(self, *args)
    def normalized(self): return _openframeworks.ofVec4f_normalized(self)
    def limited(self, *args): return _openframeworks.ofVec4f_limited(self, *args)
    def distanceSquared(self, *args): return _openframeworks.ofVec4f_distanceSquared(self, *args)
    def interpolated(self, *args): return _openframeworks.ofVec4f_interpolated(self, *args)
    def middled(self, *args): return _openframeworks.ofVec4f_middled(self, *args)
    __swig_getmethods__["zero"] = lambda x: _openframeworks.ofVec4f_zero
    if _newclass:zero = staticmethod(_openframeworks.ofVec4f_zero)
    __swig_getmethods__["one"] = lambda x: _openframeworks.ofVec4f_one
    if _newclass:one = staticmethod(_openframeworks.ofVec4f_one)
    __swig_destroy__ = _openframeworks.delete_ofVec4f
    __del__ = lambda self : None;
ofVec4f_swigregister = _openframeworks.ofVec4f_swigregister
ofVec4f_swigregister(ofVec4f)

def ofVec4f_zero():
  return _openframeworks.ofVec4f_zero()
ofVec4f_zero = _openframeworks.ofVec4f_zero

def ofVec4f_one():
  return _openframeworks.ofVec4f_one()
ofVec4f_one = _openframeworks.ofVec4f_one


def ofNextPow2(*args):
  return _openframeworks.ofNextPow2(*args)
ofNextPow2 = _openframeworks.ofNextPow2

def ofSeedRandom(*args):
  return _openframeworks.ofSeedRandom(*args)
ofSeedRandom = _openframeworks.ofSeedRandom

def ofRandom(*args):
  return _openframeworks.ofRandom(*args)
ofRandom = _openframeworks.ofRandom

def ofRandomf():
  return _openframeworks.ofRandomf()
ofRandomf = _openframeworks.ofRandomf

def ofRandomuf():
  return _openframeworks.ofRandomuf()
ofRandomuf = _openframeworks.ofRandomuf

def ofNormalize(*args):
  return _openframeworks.ofNormalize(*args)
ofNormalize = _openframeworks.ofNormalize

def ofMap(*args):
  return _openframeworks.ofMap(*args)
ofMap = _openframeworks.ofMap

def ofClamp(*args):
  return _openframeworks.ofClamp(*args)
ofClamp = _openframeworks.ofClamp

def ofLerp(*args):
  return _openframeworks.ofLerp(*args)
ofLerp = _openframeworks.ofLerp

def ofDist(*args):
  return _openframeworks.ofDist(*args)
ofDist = _openframeworks.ofDist

def ofDistSquared(*args):
  return _openframeworks.ofDistSquared(*args)
ofDistSquared = _openframeworks.ofDistSquared

def ofSign(*args):
  return _openframeworks.ofSign(*args)
ofSign = _openframeworks.ofSign

def ofInRange(*args):
  return _openframeworks.ofInRange(*args)
ofInRange = _openframeworks.ofInRange

def ofRadToDeg(*args):
  return _openframeworks.ofRadToDeg(*args)
ofRadToDeg = _openframeworks.ofRadToDeg

def ofDegToRad(*args):
  return _openframeworks.ofDegToRad(*args)
ofDegToRad = _openframeworks.ofDegToRad

def ofLerpDegrees(*args):
  return _openframeworks.ofLerpDegrees(*args)
ofLerpDegrees = _openframeworks.ofLerpDegrees

def ofLerpRadians(*args):
  return _openframeworks.ofLerpRadians(*args)
ofLerpRadians = _openframeworks.ofLerpRadians

def ofAngleDifferenceDegrees(*args):
  return _openframeworks.ofAngleDifferenceDegrees(*args)
ofAngleDifferenceDegrees = _openframeworks.ofAngleDifferenceDegrees

def ofAngleDifferenceRadians(*args):
  return _openframeworks.ofAngleDifferenceRadians(*args)
ofAngleDifferenceRadians = _openframeworks.ofAngleDifferenceRadians

def ofWrap(*args):
  return _openframeworks.ofWrap(*args)
ofWrap = _openframeworks.ofWrap

def ofWrapRadians(*args):
  return _openframeworks.ofWrapRadians(*args)
ofWrapRadians = _openframeworks.ofWrapRadians

def ofWrapDegrees(*args):
  return _openframeworks.ofWrapDegrees(*args)
ofWrapDegrees = _openframeworks.ofWrapDegrees

def ofRandomWidth():
  return _openframeworks.ofRandomWidth()
ofRandomWidth = _openframeworks.ofRandomWidth

def ofRandomHeight():
  return _openframeworks.ofRandomHeight()
ofRandomHeight = _openframeworks.ofRandomHeight

def ofNoise(*args):
  return _openframeworks.ofNoise(*args)
ofNoise = _openframeworks.ofNoise

def ofSignedNoise(*args):
  return _openframeworks.ofSignedNoise(*args)
ofSignedNoise = _openframeworks.ofSignedNoise

def ofInsidePoly(*args):
  return _openframeworks.ofInsidePoly(*args)
ofInsidePoly = _openframeworks.ofInsidePoly

def ofLineSegmentIntersection(*args):
  return _openframeworks.ofLineSegmentIntersection(*args)
ofLineSegmentIntersection = _openframeworks.ofLineSegmentIntersection

def ofBezierPoint(*args):
  return _openframeworks.ofBezierPoint(*args)
ofBezierPoint = _openframeworks.ofBezierPoint

def ofCurvePoint(*args):
  return _openframeworks.ofCurvePoint(*args)
ofCurvePoint = _openframeworks.ofCurvePoint

def ofBezierTangent(*args):
  return _openframeworks.ofBezierTangent(*args)
ofBezierTangent = _openframeworks.ofBezierTangent

def ofCurveTangent(*args):
  return _openframeworks.ofCurveTangent(*args)
ofCurveTangent = _openframeworks.ofCurveTangent
class ofXml(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofXml, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofXml, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _openframeworks.delete_ofXml
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _openframeworks.new_ofXml(*args)
        try: self.this.append(this)
        except: self.this = this
    def load(self, *args): return _openframeworks.ofXml_load(self, *args)
    def save(self, *args): return _openframeworks.ofXml_save(self, *args)
    def addChild(self, *args): return _openframeworks.ofXml_addChild(self, *args)
    def addXml(self, *args): return _openframeworks.ofXml_addXml(self, *args)
    def getValue(self, *args): return _openframeworks.ofXml_getValue(self, *args)
    def getIntValue(self, *args): return _openframeworks.ofXml_getIntValue(self, *args)
    def getFloatValue(self, *args): return _openframeworks.ofXml_getFloatValue(self, *args)
    def getBoolValue(self, *args): return _openframeworks.ofXml_getBoolValue(self, *args)
    def setValue(self, *args): return _openframeworks.ofXml_setValue(self, *args)
    def getAttribute(self, *args): return _openframeworks.ofXml_getAttribute(self, *args)
    def setAttribute(self, *args): return _openframeworks.ofXml_setAttribute(self, *args)
    def getAttributes(self): return _openframeworks.ofXml_getAttributes(self)
    def getNumChildren(self, *args): return _openframeworks.ofXml_getNumChildren(self, *args)
    def removeAttribute(self, *args): return _openframeworks.ofXml_removeAttribute(self, *args)
    def removeAttributes(self, *args): return _openframeworks.ofXml_removeAttributes(self, *args)
    def removeContents(self, *args): return _openframeworks.ofXml_removeContents(self, *args)
    def remove(self, *args): return _openframeworks.ofXml_remove(self, *args)
    def exists(self, *args): return _openframeworks.ofXml_exists(self, *args)
    def clear(self): return _openframeworks.ofXml_clear(self)
    def getName(self): return _openframeworks.ofXml_getName(self)
    def reset(self): return _openframeworks.ofXml_reset(self)
    def setToChild(self, *args): return _openframeworks.ofXml_setToChild(self, *args)
    def setTo(self, *args): return _openframeworks.ofXml_setTo(self, *args)
    def setToParent(self, *args): return _openframeworks.ofXml_setToParent(self, *args)
    def setToSibling(self): return _openframeworks.ofXml_setToSibling(self)
    def setToPrevSibling(self): return _openframeworks.ofXml_setToPrevSibling(self)
    def loadFromBuffer(self, *args): return _openframeworks.ofXml_loadFromBuffer(self, *args)
    def toString(self): return _openframeworks.ofXml_toString(self)
    def serialize(self, *args): return _openframeworks.ofXml_serialize(self, *args)
    def deserialize(self, *args): return _openframeworks.ofXml_deserialize(self, *args)
    __swig_getmethods__["tokenize"] = lambda x: _openframeworks.ofXml_tokenize
    if _newclass:tokenize = staticmethod(_openframeworks.ofXml_tokenize)
    def getPocoElement(self, *args): return _openframeworks.ofXml_getPocoElement(self, *args)
    def getPocoDocument(self, *args): return _openframeworks.ofXml_getPocoDocument(self, *args)
ofXml_swigregister = _openframeworks.ofXml_swigregister
ofXml_swigregister(ofXml)

def ofXml_tokenize(*args):
  return _openframeworks.ofXml_tokenize(*args)
ofXml_tokenize = _openframeworks.ofXml_tokenize

class ofMatrixStack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofMatrixStack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofMatrixStack, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _openframeworks.new_ofMatrixStack(*args)
        try: self.this.append(this)
        except: self.this = this
    def setRenderSurface(self, *args): return _openframeworks.ofMatrixStack_setRenderSurface(self, *args)
    def setOrientation(self, *args): return _openframeworks.ofMatrixStack_setOrientation(self, *args)
    def getOrientation(self): return _openframeworks.ofMatrixStack_getOrientation(self)
    def viewport(self, *args): return _openframeworks.ofMatrixStack_viewport(self, *args)
    def nativeViewport(self, *args): return _openframeworks.ofMatrixStack_nativeViewport(self, *args)
    def getCurrentViewport(self): return _openframeworks.ofMatrixStack_getCurrentViewport(self)
    def getNativeViewport(self): return _openframeworks.ofMatrixStack_getNativeViewport(self)
    def getProjectionMatrix(self): return _openframeworks.ofMatrixStack_getProjectionMatrix(self)
    def getModelViewMatrix(self): return _openframeworks.ofMatrixStack_getModelViewMatrix(self)
    def getModelViewProjectionMatrix(self): return _openframeworks.ofMatrixStack_getModelViewProjectionMatrix(self)
    def getTextureMatrix(self): return _openframeworks.ofMatrixStack_getTextureMatrix(self)
    def getCurrentMatrix(self): return _openframeworks.ofMatrixStack_getCurrentMatrix(self)
    def getProjectionMatrixNoOrientation(self): return _openframeworks.ofMatrixStack_getProjectionMatrixNoOrientation(self)
    def getOrientationMatrix(self): return _openframeworks.ofMatrixStack_getOrientationMatrix(self)
    def getOrientationMatrixInverse(self): return _openframeworks.ofMatrixStack_getOrientationMatrixInverse(self)
    def getCurrentMatrixMode(self): return _openframeworks.ofMatrixStack_getCurrentMatrixMode(self)
    def getHandedness(self): return _openframeworks.ofMatrixStack_getHandedness(self)
    def isVFlipped(self): return _openframeworks.ofMatrixStack_isVFlipped(self)
    def customMatrixNeedsFlip(self): return _openframeworks.ofMatrixStack_customMatrixNeedsFlip(self)
    def pushView(self): return _openframeworks.ofMatrixStack_pushView(self)
    def popView(self): return _openframeworks.ofMatrixStack_popView(self)
    def pushMatrix(self): return _openframeworks.ofMatrixStack_pushMatrix(self)
    def popMatrix(self): return _openframeworks.ofMatrixStack_popMatrix(self)
    def translate(self, *args): return _openframeworks.ofMatrixStack_translate(self, *args)
    def scale(self, *args): return _openframeworks.ofMatrixStack_scale(self, *args)
    def rotate(self, *args): return _openframeworks.ofMatrixStack_rotate(self, *args)
    def matrixMode(self, *args): return _openframeworks.ofMatrixStack_matrixMode(self, *args)
    def loadIdentityMatrix(self): return _openframeworks.ofMatrixStack_loadIdentityMatrix(self)
    def loadMatrix(self, *args): return _openframeworks.ofMatrixStack_loadMatrix(self, *args)
    def multMatrix(self, *args): return _openframeworks.ofMatrixStack_multMatrix(self, *args)
    def clearStacks(self): return _openframeworks.ofMatrixStack_clearStacks(self)
    __swig_destroy__ = _openframeworks.delete_ofMatrixStack
    __del__ = lambda self : None;
ofMatrixStack_swigregister = _openframeworks.ofMatrixStack_swigregister
ofMatrixStack_swigregister(ofMatrixStack)

class ofVideoGrabber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVideoGrabber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofVideoGrabber, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofVideoGrabber()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofVideoGrabber
    __del__ = lambda self : None;
    def setGrabber(self, *args): return _openframeworks.ofVideoGrabber_setGrabber(self, *args)
    def getGrabber(self): return _openframeworks.ofVideoGrabber_getGrabber(self)
    def listDevices(self): return _openframeworks.ofVideoGrabber_listDevices(self)
    def isFrameNew(self): return _openframeworks.ofVideoGrabber_isFrameNew(self)
    def update(self): return _openframeworks.ofVideoGrabber_update(self)
    def close(self): return _openframeworks.ofVideoGrabber_close(self)
    def initGrabber(self, *args): return _openframeworks.ofVideoGrabber_initGrabber(self, *args)
    def setPixelFormat(self, *args): return _openframeworks.ofVideoGrabber_setPixelFormat(self, *args)
    def getPixelFormat(self): return _openframeworks.ofVideoGrabber_getPixelFormat(self)
    def videoSettings(self): return _openframeworks.ofVideoGrabber_videoSettings(self)
    def getPixels(self): return _openframeworks.ofVideoGrabber_getPixels(self)
    def getPixelsRef(self): return _openframeworks.ofVideoGrabber_getPixelsRef(self)
    def getTextureReference(self): return _openframeworks.ofVideoGrabber_getTextureReference(self)
    def setVerbose(self, *args): return _openframeworks.ofVideoGrabber_setVerbose(self, *args)
    def setDeviceID(self, *args): return _openframeworks.ofVideoGrabber_setDeviceID(self, *args)
    def setDesiredFrameRate(self, *args): return _openframeworks.ofVideoGrabber_setDesiredFrameRate(self, *args)
    def setUseTexture(self, *args): return _openframeworks.ofVideoGrabber_setUseTexture(self, *args)
    def draw(self, *args): return _openframeworks.ofVideoGrabber_draw(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofVideoGrabber_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofVideoGrabber_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofVideoGrabber_resetAnchor(self)
    def getHeight(self): return _openframeworks.ofVideoGrabber_getHeight(self)
    def getWidth(self): return _openframeworks.ofVideoGrabber_getWidth(self)
    def isInitialized(self): return _openframeworks.ofVideoGrabber_isInitialized(self)
    __swig_setmethods__["height"] = _openframeworks.ofVideoGrabber_height_set
    __swig_getmethods__["height"] = _openframeworks.ofVideoGrabber_height_get
    if _newclass:height = _swig_property(_openframeworks.ofVideoGrabber_height_get, _openframeworks.ofVideoGrabber_height_set)
    __swig_setmethods__["width"] = _openframeworks.ofVideoGrabber_width_set
    __swig_getmethods__["width"] = _openframeworks.ofVideoGrabber_width_get
    if _newclass:width = _swig_property(_openframeworks.ofVideoGrabber_width_get, _openframeworks.ofVideoGrabber_width_set)
ofVideoGrabber_swigregister = _openframeworks.ofVideoGrabber_swigregister
ofVideoGrabber_swigregister(ofVideoGrabber)

class ofVideoPlayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofVideoPlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofVideoPlayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _openframeworks.new_ofVideoPlayer()
        try: self.this.append(this)
        except: self.this = this
    def setPlayer(self, *args): return _openframeworks.ofVideoPlayer_setPlayer(self, *args)
    def getPlayer(self): return _openframeworks.ofVideoPlayer_getPlayer(self)
    def loadMovie(self, *args): return _openframeworks.ofVideoPlayer_loadMovie(self, *args)
    def getMoviePath(self): return _openframeworks.ofVideoPlayer_getMoviePath(self)
    def setPixelFormat(self, *args): return _openframeworks.ofVideoPlayer_setPixelFormat(self, *args)
    def getPixelFormat(self): return _openframeworks.ofVideoPlayer_getPixelFormat(self)
    def closeMovie(self): return _openframeworks.ofVideoPlayer_closeMovie(self)
    def close(self): return _openframeworks.ofVideoPlayer_close(self)
    def update(self): return _openframeworks.ofVideoPlayer_update(self)
    def play(self): return _openframeworks.ofVideoPlayer_play(self)
    def stop(self): return _openframeworks.ofVideoPlayer_stop(self)
    def isFrameNew(self): return _openframeworks.ofVideoPlayer_isFrameNew(self)
    def getPixels(self): return _openframeworks.ofVideoPlayer_getPixels(self)
    def getPixelsRef(self): return _openframeworks.ofVideoPlayer_getPixelsRef(self)
    def getPosition(self): return _openframeworks.ofVideoPlayer_getPosition(self)
    def getSpeed(self): return _openframeworks.ofVideoPlayer_getSpeed(self)
    def getDuration(self): return _openframeworks.ofVideoPlayer_getDuration(self)
    def getIsMovieDone(self): return _openframeworks.ofVideoPlayer_getIsMovieDone(self)
    def setPosition(self, *args): return _openframeworks.ofVideoPlayer_setPosition(self, *args)
    def setVolume(self, *args): return _openframeworks.ofVideoPlayer_setVolume(self, *args)
    def setLoopState(self, *args): return _openframeworks.ofVideoPlayer_setLoopState(self, *args)
    def getLoopState(self): return _openframeworks.ofVideoPlayer_getLoopState(self)
    def setSpeed(self, *args): return _openframeworks.ofVideoPlayer_setSpeed(self, *args)
    def setFrame(self, *args): return _openframeworks.ofVideoPlayer_setFrame(self, *args)
    def setUseTexture(self, *args): return _openframeworks.ofVideoPlayer_setUseTexture(self, *args)
    def getTextureReference(self): return _openframeworks.ofVideoPlayer_getTextureReference(self)
    def draw(self, *args): return _openframeworks.ofVideoPlayer_draw(self, *args)
    def setAnchorPercent(self, *args): return _openframeworks.ofVideoPlayer_setAnchorPercent(self, *args)
    def setAnchorPoint(self, *args): return _openframeworks.ofVideoPlayer_setAnchorPoint(self, *args)
    def resetAnchor(self): return _openframeworks.ofVideoPlayer_resetAnchor(self)
    def setPaused(self, *args): return _openframeworks.ofVideoPlayer_setPaused(self, *args)
    def getCurrentFrame(self): return _openframeworks.ofVideoPlayer_getCurrentFrame(self)
    def getTotalNumFrames(self): return _openframeworks.ofVideoPlayer_getTotalNumFrames(self)
    def firstFrame(self): return _openframeworks.ofVideoPlayer_firstFrame(self)
    def nextFrame(self): return _openframeworks.ofVideoPlayer_nextFrame(self)
    def previousFrame(self): return _openframeworks.ofVideoPlayer_previousFrame(self)
    def getHeight(self): return _openframeworks.ofVideoPlayer_getHeight(self)
    def getWidth(self): return _openframeworks.ofVideoPlayer_getWidth(self)
    def isPaused(self): return _openframeworks.ofVideoPlayer_isPaused(self)
    def isLoaded(self): return _openframeworks.ofVideoPlayer_isLoaded(self)
    def isPlaying(self): return _openframeworks.ofVideoPlayer_isPlaying(self)
    __swig_setmethods__["height"] = _openframeworks.ofVideoPlayer_height_set
    __swig_getmethods__["height"] = _openframeworks.ofVideoPlayer_height_get
    if _newclass:height = _swig_property(_openframeworks.ofVideoPlayer_height_get, _openframeworks.ofVideoPlayer_height_set)
    __swig_setmethods__["width"] = _openframeworks.ofVideoPlayer_width_set
    __swig_getmethods__["width"] = _openframeworks.ofVideoPlayer_width_get
    if _newclass:width = _swig_property(_openframeworks.ofVideoPlayer_width_get, _openframeworks.ofVideoPlayer_width_set)
    __swig_destroy__ = _openframeworks.delete_ofVideoPlayer
    __del__ = lambda self : None;
ofVideoPlayer_swigregister = _openframeworks.ofVideoPlayer_swigregister
ofVideoPlayer_swigregister(ofVideoPlayer)


def ofGetMousePressed(*args):
  return _openframeworks.ofGetMousePressed(*args)
ofGetMousePressed = _openframeworks.ofGetMousePressed

def ofGetKeyPressed(*args):
  return _openframeworks.ofGetKeyPressed(*args)
ofGetKeyPressed = _openframeworks.ofGetKeyPressed

def ofGetMouseX():
  return _openframeworks.ofGetMouseX()
ofGetMouseX = _openframeworks.ofGetMouseX

def ofGetMouseY():
  return _openframeworks.ofGetMouseY()
ofGetMouseY = _openframeworks.ofGetMouseY

def ofGetPreviousMouseX():
  return _openframeworks.ofGetPreviousMouseX()
ofGetPreviousMouseX = _openframeworks.ofGetPreviousMouseX

def ofGetPreviousMouseY():
  return _openframeworks.ofGetPreviousMouseY()
ofGetPreviousMouseY = _openframeworks.ofGetPreviousMouseY

def ofSetEscapeQuitsApp(*args):
  return _openframeworks.ofSetEscapeQuitsApp(*args)
ofSetEscapeQuitsApp = _openframeworks.ofSetEscapeQuitsApp
class ofDragInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofDragInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ofDragInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["files"] = _openframeworks.ofDragInfo_files_set
    __swig_getmethods__["files"] = _openframeworks.ofDragInfo_files_get
    if _newclass:files = _swig_property(_openframeworks.ofDragInfo_files_get, _openframeworks.ofDragInfo_files_set)
    __swig_setmethods__["position"] = _openframeworks.ofDragInfo_position_set
    __swig_getmethods__["position"] = _openframeworks.ofDragInfo_position_get
    if _newclass:position = _swig_property(_openframeworks.ofDragInfo_position_get, _openframeworks.ofDragInfo_position_set)
    def __init__(self): 
        this = _openframeworks.new_ofDragInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofDragInfo
    __del__ = lambda self : None;
ofDragInfo_swigregister = _openframeworks.ofDragInfo_swigregister
ofDragInfo_swigregister(ofDragInfo)

class ofTouchEventArgs(ofVec2f):
    __swig_setmethods__ = {}
    for _s in [ofVec2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTouchEventArgs, name, value)
    __swig_getmethods__ = {}
    for _s in [ofVec2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofTouchEventArgs, name)
    __repr__ = _swig_repr
    down = _openframeworks.ofTouchEventArgs_down
    up = _openframeworks.ofTouchEventArgs_up
    move = _openframeworks.ofTouchEventArgs_move
    doubleTap = _openframeworks.ofTouchEventArgs_doubleTap
    cancel = _openframeworks.ofTouchEventArgs_cancel
    __swig_setmethods__["type"] = _openframeworks.ofTouchEventArgs_type_set
    __swig_getmethods__["type"] = _openframeworks.ofTouchEventArgs_type_get
    if _newclass:type = _swig_property(_openframeworks.ofTouchEventArgs_type_get, _openframeworks.ofTouchEventArgs_type_set)
    __swig_setmethods__["id"] = _openframeworks.ofTouchEventArgs_id_set
    __swig_getmethods__["id"] = _openframeworks.ofTouchEventArgs_id_get
    if _newclass:id = _swig_property(_openframeworks.ofTouchEventArgs_id_get, _openframeworks.ofTouchEventArgs_id_set)
    __swig_setmethods__["time"] = _openframeworks.ofTouchEventArgs_time_set
    __swig_getmethods__["time"] = _openframeworks.ofTouchEventArgs_time_get
    if _newclass:time = _swig_property(_openframeworks.ofTouchEventArgs_time_get, _openframeworks.ofTouchEventArgs_time_set)
    __swig_setmethods__["numTouches"] = _openframeworks.ofTouchEventArgs_numTouches_set
    __swig_getmethods__["numTouches"] = _openframeworks.ofTouchEventArgs_numTouches_get
    if _newclass:numTouches = _swig_property(_openframeworks.ofTouchEventArgs_numTouches_get, _openframeworks.ofTouchEventArgs_numTouches_set)
    __swig_setmethods__["width"] = _openframeworks.ofTouchEventArgs_width_set
    __swig_getmethods__["width"] = _openframeworks.ofTouchEventArgs_width_get
    if _newclass:width = _swig_property(_openframeworks.ofTouchEventArgs_width_get, _openframeworks.ofTouchEventArgs_width_set)
    __swig_setmethods__["height"] = _openframeworks.ofTouchEventArgs_height_set
    __swig_getmethods__["height"] = _openframeworks.ofTouchEventArgs_height_get
    if _newclass:height = _swig_property(_openframeworks.ofTouchEventArgs_height_get, _openframeworks.ofTouchEventArgs_height_set)
    __swig_setmethods__["angle"] = _openframeworks.ofTouchEventArgs_angle_set
    __swig_getmethods__["angle"] = _openframeworks.ofTouchEventArgs_angle_get
    if _newclass:angle = _swig_property(_openframeworks.ofTouchEventArgs_angle_get, _openframeworks.ofTouchEventArgs_angle_set)
    __swig_setmethods__["minoraxis"] = _openframeworks.ofTouchEventArgs_minoraxis_set
    __swig_getmethods__["minoraxis"] = _openframeworks.ofTouchEventArgs_minoraxis_get
    if _newclass:minoraxis = _swig_property(_openframeworks.ofTouchEventArgs_minoraxis_get, _openframeworks.ofTouchEventArgs_minoraxis_set)
    __swig_setmethods__["majoraxis"] = _openframeworks.ofTouchEventArgs_majoraxis_set
    __swig_getmethods__["majoraxis"] = _openframeworks.ofTouchEventArgs_majoraxis_get
    if _newclass:majoraxis = _swig_property(_openframeworks.ofTouchEventArgs_majoraxis_get, _openframeworks.ofTouchEventArgs_majoraxis_set)
    __swig_setmethods__["pressure"] = _openframeworks.ofTouchEventArgs_pressure_set
    __swig_getmethods__["pressure"] = _openframeworks.ofTouchEventArgs_pressure_get
    if _newclass:pressure = _swig_property(_openframeworks.ofTouchEventArgs_pressure_get, _openframeworks.ofTouchEventArgs_pressure_set)
    __swig_setmethods__["xspeed"] = _openframeworks.ofTouchEventArgs_xspeed_set
    __swig_getmethods__["xspeed"] = _openframeworks.ofTouchEventArgs_xspeed_get
    if _newclass:xspeed = _swig_property(_openframeworks.ofTouchEventArgs_xspeed_get, _openframeworks.ofTouchEventArgs_xspeed_set)
    __swig_setmethods__["yspeed"] = _openframeworks.ofTouchEventArgs_yspeed_set
    __swig_getmethods__["yspeed"] = _openframeworks.ofTouchEventArgs_yspeed_get
    if _newclass:yspeed = _swig_property(_openframeworks.ofTouchEventArgs_yspeed_get, _openframeworks.ofTouchEventArgs_yspeed_set)
    __swig_setmethods__["xaccel"] = _openframeworks.ofTouchEventArgs_xaccel_set
    __swig_getmethods__["xaccel"] = _openframeworks.ofTouchEventArgs_xaccel_get
    if _newclass:xaccel = _swig_property(_openframeworks.ofTouchEventArgs_xaccel_get, _openframeworks.ofTouchEventArgs_xaccel_set)
    __swig_setmethods__["yaccel"] = _openframeworks.ofTouchEventArgs_yaccel_set
    __swig_getmethods__["yaccel"] = _openframeworks.ofTouchEventArgs_yaccel_get
    if _newclass:yaccel = _swig_property(_openframeworks.ofTouchEventArgs_yaccel_get, _openframeworks.ofTouchEventArgs_yaccel_set)
    def __init__(self): 
        this = _openframeworks.new_ofTouchEventArgs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openframeworks.delete_ofTouchEventArgs
    __del__ = lambda self : None;
ofTouchEventArgs_swigregister = _openframeworks.ofTouchEventArgs_swigregister
ofTouchEventArgs_swigregister(ofTouchEventArgs)


def ofSendMessage(*args):
  return _openframeworks.ofSendMessage(*args)
ofSendMessage = _openframeworks.ofSendMessage
# Renaming log -> ofLog
ofLog = log
del log

# This file is compatible with both classic and new-style classes.


